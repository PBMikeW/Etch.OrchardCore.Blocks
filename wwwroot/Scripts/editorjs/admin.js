/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./Assets/Editor.js/js/index.js":
/*!**************************************!*\
  !*** ./Assets/Editor.js/js/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _editorjs_delimiter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @editorjs/delimiter */ \"./node_modules/@editorjs/delimiter/dist/delimiter.mjs\");\n/* harmony import */ var _editorjs_embed__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @editorjs/embed */ \"./node_modules/@editorjs/embed/dist/embed.mjs\");\n/* harmony import */ var _editorjs_header__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @editorjs/header */ \"./node_modules/@editorjs/header/dist/header.mjs\");\n/* harmony import */ var _editorjs_list__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @editorjs/list */ \"./node_modules/@editorjs/list/dist/list.mjs\");\n/* harmony import */ var _editorjs_paragraph__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @editorjs/paragraph */ \"./node_modules/@editorjs/paragraph/dist/paragraph.mjs\");\n/* harmony import */ var _editorjs_raw__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @editorjs/raw */ \"./node_modules/@editorjs/raw/dist/raw.mjs\");\n/* harmony import */ var _editorjs_quote__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @editorjs/quote */ \"./node_modules/@editorjs/quote/dist/quote.mjs\");\n/* harmony import */ var _editorjs_table__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @editorjs/table */ \"./node_modules/@editorjs/table/dist/table.mjs\");\n/* harmony import */ var _editorjs_editorjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @editorjs/editorjs */ \"./node_modules/@editorjs/editorjs/dist/editorjs.mjs\");\n/* harmony import */ var editorjs_anchor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! editorjs-anchor */ \"./node_modules/editorjs-anchor/dist/bundle.js\");\n/* harmony import */ var editorjs_anchor__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(editorjs_anchor__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _plugins_link__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./plugins/link */ \"./Assets/Editor.js/js/plugins/link/index.js\");\n/* harmony import */ var editorjs_text_color_plugin__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! editorjs-text-color-plugin */ \"./node_modules/editorjs-text-color-plugin/dist/bundle.mjs\");\n/* harmony import */ var _plugins_text_size__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./plugins/text-size */ \"./Assets/Editor.js/js/plugins/text-size/index.js\");\n/* harmony import */ var _plugins_text_size__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_plugins_text_size__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _plugins_mediaLibrary__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./plugins/mediaLibrary */ \"./Assets/Editor.js/js/plugins/mediaLibrary/index.js\");\n/* harmony import */ var editorjs_undo__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! editorjs-undo */ \"./node_modules/editorjs-undo/dist/bundle.js\");\n/* harmony import */ var editorjs_undo__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(editorjs_undo__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _editorjs_nested_list__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @editorjs/nested-list */ \"./node_modules/@editorjs/nested-list/dist/nested-list.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst AlignmentTuneTool = __webpack_require__(/*! editorjs-text-alignment-blocktune */ \"./node_modules/editorjs-text-alignment-blocktune/dist/bundle.js\");\n\n\n\n\nwindow.initializeEditorJS = (tenantPath, id, hiddenFieldId, typeName, partName, fieldName, placeholder) => {\n  const $hiddenField = document.getElementById(hiddenFieldId);\n  if (!$hiddenField) {\n    return;\n  }\n  const $form = $hiddenField.closest('form');\n  if (!$form) {\n    return;\n  }\n  const editor = new _editorjs_editorjs__WEBPACK_IMPORTED_MODULE_8__[\"default\"]({\n    onReady: () => {\n      new (editorjs_undo__WEBPACK_IMPORTED_MODULE_14___default())({\n        editor\n      });\n    },\n    holder: id,\n    placeholder: placeholder || 'Click here to start entering content blocks..',\n    tools: {\n      table: {\n        class: _editorjs_table__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n        inlineToolbar: true,\n        config: {\n          rows: 2,\n          cols: 3\n        }\n      },\n      Color: {\n        class: editorjs_text_color_plugin__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\n        config: {\n          colorCollections: ['#F8F8F8', '#D1D1D1', '#72808A', '#FFCD00', '#EF4123', '#002D6A', '#FFF', '#000', '#99ABC3'],\n          defaultColor: '#002D6A',\n          type: 'text',\n          customPicker: true\n        }\n      },\n      Marker: {\n        class: editorjs_text_color_plugin__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\n        config: {\n          defaultColor: '#FFBF00',\n          type: 'marker',\n          icon: `<svg fill=\"#000000\" height=\"200px\" width=\"200px\" version=\"1.1\" id=\"Icons\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 32 32\" xml:space=\"preserve\"><g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g><g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></g><g id=\"SVGRepo_iconCarrier\"> <g> <path d=\"M17.6,6L6.9,16.7c-0.2,0.2-0.3,0.4-0.3,0.6L6,23.9c0,0.3,0.1,0.6,0.3,0.8C6.5,24.9,6.7,25,7,25c0,0,0.1,0,0.1,0l6.6-0.6 c0.2,0,0.5-0.1,0.6-0.3L25,13.4L17.6,6z\"></path> <path d=\"M26.4,12l1.4-1.4c1.2-1.2,1.1-3.1-0.1-4.3l-3-3c-0.6-0.6-1.3-0.9-2.2-0.9c-0.8,0-1.6,0.3-2.2,0.9L19,4.6L26.4,12z\"></path> </g> <g> <path d=\"M28,29H4c-0.6,0-1-0.4-1-1s0.4-1,1-1h24c0.6,0,1,0.4,1,1S28.6,29,28,29z\"></path> </g> </g></svg>`\n        }\n      },\n      delimiter: _editorjs_delimiter__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n      fontSize0point8: {\n        class: (_plugins_text_size__WEBPACK_IMPORTED_MODULE_12___default()),\n        config: {\n          cssClass: \"editor-fs-0point8\",\n          buttonText: \".8\"\n        }\n      },\n      fontSize0point9: {\n        class: (_plugins_text_size__WEBPACK_IMPORTED_MODULE_12___default()),\n        config: {\n          cssClass: \"editor-fs-0point9\",\n          buttonText: \".9\"\n        }\n      },\n      fontSize1point0: {\n        class: (_plugins_text_size__WEBPACK_IMPORTED_MODULE_12___default()),\n        config: {\n          cssClass: \"editor-fs-1point0\",\n          buttonText: \"1.0\"\n        }\n      },\n      fontSize1point1: {\n        class: (_plugins_text_size__WEBPACK_IMPORTED_MODULE_12___default()),\n        config: {\n          cssClass: \"editor-fs-1point1\",\n          buttonText: \"1.1\"\n        }\n      },\n      fontSize1point2: {\n        class: (_plugins_text_size__WEBPACK_IMPORTED_MODULE_12___default()),\n        config: {\n          cssClass: \"editor-fs-1point2\",\n          buttonText: \"1.2\"\n        }\n      },\n      fontSize1point3: {\n        class: (_plugins_text_size__WEBPACK_IMPORTED_MODULE_12___default()),\n        config: {\n          cssClass: \"editor-fs-1point3\",\n          buttonText: \"1.3\"\n        }\n      },\n      embed: {\n        class: _editorjs_embed__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n        config: {\n          services: {\n            youtube: true\n          }\n        },\n        inlineToolbar: true\n      },\n      header: {\n        class: _editorjs_header__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        inlineToolbar: true\n      },\n      image: {\n        class: _plugins_mediaLibrary__WEBPACK_IMPORTED_MODULE_13__[\"default\"],\n        config: {\n          id\n        }\n      },\n      link: {\n        class: _plugins_link__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\n        config: {\n          fieldName,\n          partName,\n          typeName,\n          tenantPath\n        }\n      },\n      list: {\n        class: _editorjs_list__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n        inlineToolbar: true\n      },\n      paragraph: {\n        class: _editorjs_paragraph__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n        inlineToolbar: true,\n        config: {\n          preserveBlank: true\n        }\n      },\n      quote: _editorjs_quote__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n      raw: _editorjs_raw__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\n    },\n    data: !$hiddenField.value ? {} : JSON.parse($hiddenField.value),\n    onChange: () => {\n      editor.save().then(outputData => {\n        $hiddenField.value = JSON.stringify(outputData);\n        document.dispatchEvent(new Event('contentpreview:render'));\n      }).catch(error => {});\n    }\n  });\n  const onSubmit = e => {\n    editor.save().then(outputData => {\n      $hiddenField.value = JSON.stringify(outputData);\n      $form.removeEventListener('submit', onSubmit);\n      $form.submit();\n    }).catch(error => {});\n  };\n  $form.addEventListener('submit', onSubmit);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Assets/Editor.js/js/index.js\n");

/***/ }),

/***/ "./Assets/Editor.js/js/plugins/link/index.js":
/*!***************************************************!*\
  !*** ./Assets/Editor.js/js/plugins/link/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LinkTool)\n/* harmony export */ });\n/* harmony import */ var _index_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.css */ \"./Assets/Editor.js/js/plugins/link/index.css\");\n\nconst linkIcon = `<svg width=\"13\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<path d=\"M8.567 13.629c.728.464 1.581.65 2.41.558l-.873.873A3.722 3.722 0 1 1 4.84 9.794L6.694 7.94a3.722 3.722 0 0 1 5.256-.008L10.484 9.4a5.209 5.209 0 0 1-.017.016 1.625 1.625 0 0 0-2.29.009l-1.854 1.854a1.626 1.626 0 0 0 2.244 2.35zm2.766-7.358a3.722 3.722 0 0 0-2.41-.558l.873-.873a3.722 3.722 0 1 1 5.264 5.266l-1.854 1.854a3.722 3.722 0 0 1-5.256.008L9.416 10.5a5.2 5.2 0 0 1 .017-.016 1.625 1.625 0 0 0 2.29-.009l1.854-1.854a1.626 1.626 0 0 0-2.244-2.35z\" transform=\"translate(-3.667 -2.7)\" />\n</svg>\n`;\nconst unlinkIcon = `<svg width=\"16\" height=\"18\" viewBox=\"0 0 16 18\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <path transform=\"rotate(-45 8.358 11.636)\" d=\"M9.14 9.433c.008-.12-.087-.686-.112-.81a1.4 1.4 0 0 0-1.64-1.106l-3.977.772a1.4 1.4 0 0 0 .535 2.749l.935-.162s.019 1.093.592 2.223l-1.098.148A3.65 3.65 0 1 1 2.982 6.08l3.976-.773c1.979-.385 3.838.919 4.28 2.886.51 2.276-1.084 2.816-1.073 2.935.011.12-.394-1.59-1.026-1.696zm3.563-.875l2.105 3.439a3.65 3.65 0 0 1-6.19 3.868L6.47 12.431c-1.068-1.71-.964-2.295-.49-3.07.067-.107 1.16-1.466 1.48-.936-.12.036.9 1.33.789 1.398-.656.41-.28.76.13 1.415l2.145 3.435a1.4 1.4 0 0 0 2.375-1.484l-1.132-1.941c.42-.435 1.237-1.054.935-2.69zm1.88-2.256h3.4a1.125 1.125 0 0 1 0 2.25h-3.4a1.125 1.125 0 0 1 0-2.25zM11.849.038c.62 0 1.125.503 1.125 1.125v3.4a1.125 1.125 0 0 1-2.25 0v-3.4c0-.622.503-1.125 1.125-1.125z\"/>\n</svg>`;\nconst ENTER_KEY = 13;\nclass LinkTool {\n  static get isInline() {\n    return true;\n  }\n  static get sanitize() {\n    return {\n      a: {\n        href: true,\n        target: '_blank',\n        rel: 'nofollow'\n      }\n    };\n  }\n  constructor({\n    api,\n    config\n  }) {\n    this.state = false;\n    this.nodes = {\n      button: null,\n      editor: null,\n      input: null,\n      list: null\n    };\n    this.tag = 'a';\n    this.class = 'cdx-link';\n    this.api = api;\n    this.config = config;\n    this.inlineToolbar = api.inlineToolbar;\n    this.notifier = api.notifier;\n    this.toolbar = api.toolbar;\n    this.CSS = {\n      button: 'ce-inline-tool',\n      buttonActive: 'ce-inline-tool--active',\n      buttonModifier: 'ce-inline-tool--link',\n      editorActive: 'link-tool-editor--active',\n      input: 'ce-inline-tool-input',\n      inputShowed: 'ce-inline-tool-input--showed'\n    };\n  }\n  clear() {\n    this.closeActions();\n  }\n  render() {\n    this.nodes.button = document.createElement('button');\n    this.nodes.button.type = 'button';\n    this.nodes.button.classList.add(this.CSS.button);\n    this.nodes.button.innerHTML = linkIcon;\n    return this.nodes.button;\n  }\n  renderActions() {\n    this.nodes.editor = document.createElement('div');\n    this.nodes.editor.classList.add('link-tool-editor');\n    this.nodes.input = document.createElement('input');\n    this.nodes.input.placeholder = 'Type link or search by title';\n    this.nodes.input.classList.add(this.CSS.input);\n    this.nodes.input.classList.add(this.CSS.inputShowed);\n    this.nodes.input.addEventListener('keydown', event => {\n      if (event.keyCode === ENTER_KEY) {\n        this.enterPressed(event);\n        return;\n      }\n    });\n    this.nodes.input.addEventListener('keyup', event => {\n      const _this = this;\n      if (event.keyCode === ENTER_KEY) {\n        return;\n      }\n      if (this.nodes.input.value.length > 2) {\n        fetch(`${this.config.tenantPath}/Blocks/SearchContentItems?type=${this.config.typeName}&part=${this.config.partName}&field=${this.config.fieldName}&query=${this.nodes.input.value}`).then(response => response.json()).then(contentItems => _this.displayContentItems(contentItems));\n      }\n    });\n    this.nodes.editor.appendChild(this.nodes.input);\n    this.nodes.list = document.createElement('ul');\n    this.nodes.list.classList.add('link-tool-editor__content-items');\n    this.nodes.editor.appendChild(this.nodes.list);\n    return this.nodes.editor;\n  }\n  surround(range) {\n    if (this.state) {\n      this.removeLink();\n      this.closeActions();\n      this.inlineToolbar.close();\n      return;\n    }\n    if (range) {\n      const selectedText = range.extractContents();\n      this.placeholder = document.createElement('span');\n      this.placeholder.style.backgroundColor = '#a8d6ff';\n      this.placeholder.appendChild(selectedText);\n      range.insertNode(this.placeholder);\n    }\n    this.toggleActions();\n  }\n  checkState() {\n    const anchorTag = this.api.selection.findParentTag('A');\n    if (anchorTag) {\n      this.nodes.button.classList.add(this.CSS.buttonActive);\n      this.nodes.button.innerHTML = unlinkIcon;\n      this.nodes.input.value = anchorTag.getAttribute('href');\n      this.state = anchorTag;\n      this.openActions();\n    } else {\n      this.nodes.button.innerHTML = linkIcon;\n      this.nodes.button.classList.remove(this.CSS.buttonActive);\n    }\n  }\n  applyUrl(url) {\n    if (!this.placeholder) {\n      return;\n    }\n    let link = document.createElement('a');\n    link.innerHTML = this.placeholder.innerText;\n    link.href = url;\n    this.placeholder.parentNode.replaceChild(link, this.placeholder);\n    this.placeholder = null;\n  }\n  closeActions() {\n    if (this.placeholder) {\n      this.placeholder.parentNode.innerHTML = this.placeholder.parentNode.innerHTML.replace(this.placeholder.outerHTML, this.placeholder.innerText);\n      this.placeholder = null;\n    }\n    if (this.nodes.editor) {\n      this.nodes.editor.classList.remove(this.CSS.editorActive);\n      this.nodes.input.value = '';\n      this.nodes.list.innerHTML = '';\n    }\n    this.inputOpened = false;\n  }\n  displayContentItems(contentItems) {\n    this.nodes.list.innerHTML = '';\n    contentItems.forEach(contentItem => {\n      let button = document.createElement('button');\n      button.innerText = contentItem.displayText;\n      button.setAttribute('data-href', contentItem.url);\n      let listItem = document.createElement('li');\n      listItem.title = contentItem.displayText;\n      listItem.appendChild(button);\n      button.addEventListener('click', event => {\n        this.selectContentItem(event);\n      });\n      this.nodes.list.appendChild(listItem);\n    });\n  }\n  enterPressed(event) {\n    let value = this.nodes.input.value || '';\n    if (!value.trim()) {\n      event.preventDefault();\n      this.closeActions();\n      return;\n    }\n    this.applyUrl(value);\n\n    /**\r\n     * Preventing events that will be able to happen\r\n     */\n    event.preventDefault();\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    this.inlineToolbar.close();\n  }\n  openActions(needFocus) {\n    this.nodes.editor.classList.add(this.CSS.editorActive);\n    if (needFocus) {\n      this.nodes.input.focus();\n    }\n    this.inputOpened = true;\n  }\n  removeLink() {\n    if (!this.state) {\n      return;\n    }\n    this.state.parentNode.innerHTML = this.state.parentNode.innerHTML.replace(this.state.outerHTML, this.state.innerText);\n    this.state = null;\n  }\n  selectContentItem(event) {\n    const itemUrl = event.target.getAttribute('data-href');\n    this.applyUrl(itemUrl);\n    this.closeActions();\n    this.inlineToolbar.close();\n  }\n  toggleActions() {\n    if (!this.inputOpened) {\n      this.openActions(true);\n    } else {\n      this.closeActions(false);\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Bc3NldHMvRWRpdG9yLmpzL2pzL3BsdWdpbnMvbGluay9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxQjtBQUVyQixNQUFNQSxRQUFRLEdBQUc7QUFDakI7QUFDQTtBQUNBLENBQUM7QUFFRCxNQUFNQyxVQUFVLEdBQUc7QUFDbkI7QUFDQSxPQUFPO0FBRVAsTUFBTUMsU0FBUyxHQUFHLEVBQUU7QUFFTCxNQUFNQyxRQUFRLENBQUM7RUFDMUIsV0FBV0MsUUFBUUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sSUFBSTtFQUNmO0VBRUEsV0FBV0MsUUFBUUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU87TUFDSEMsQ0FBQyxFQUFFO1FBQ0NDLElBQUksRUFBRSxJQUFJO1FBQ1ZDLE1BQU0sRUFBRSxRQUFRO1FBQ2hCQyxHQUFHLEVBQUU7TUFDVDtJQUNKLENBQUM7RUFDTDtFQUVBQyxXQUFXQSxDQUFDO0lBQUVDLEdBQUc7SUFBRUM7RUFBTyxDQUFDLEVBQUU7SUFDekIsSUFBSSxDQUFDQyxLQUFLLEdBQUcsS0FBSztJQUVsQixJQUFJLENBQUNDLEtBQUssR0FBRztNQUNUQyxNQUFNLEVBQUUsSUFBSTtNQUNaQyxNQUFNLEVBQUUsSUFBSTtNQUNaQyxLQUFLLEVBQUUsSUFBSTtNQUNYQyxJQUFJLEVBQUU7SUFDVixDQUFDO0lBRUQsSUFBSSxDQUFDQyxHQUFHLEdBQUcsR0FBRztJQUNkLElBQUksQ0FBQ0MsS0FBSyxHQUFHLFVBQVU7SUFFdkIsSUFBSSxDQUFDVCxHQUFHLEdBQUdBLEdBQUc7SUFDZCxJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNTLGFBQWEsR0FBR1YsR0FBRyxDQUFDVSxhQUFhO0lBQ3RDLElBQUksQ0FBQ0MsUUFBUSxHQUFHWCxHQUFHLENBQUNXLFFBQVE7SUFDNUIsSUFBSSxDQUFDQyxPQUFPLEdBQUdaLEdBQUcsQ0FBQ1ksT0FBTztJQUMxQixJQUFJLENBQUNDLEdBQUcsR0FBRztNQUNQVCxNQUFNLEVBQUUsZ0JBQWdCO01BQ3hCVSxZQUFZLEVBQUUsd0JBQXdCO01BQ3RDQyxjQUFjLEVBQUUsc0JBQXNCO01BQ3RDQyxZQUFZLEVBQUUsMEJBQTBCO01BQ3hDVixLQUFLLEVBQUUsc0JBQXNCO01BQzdCVyxXQUFXLEVBQUU7SUFDakIsQ0FBQztFQUNMO0VBRUFDLEtBQUtBLENBQUEsRUFBRztJQUNKLElBQUksQ0FBQ0MsWUFBWSxDQUFDLENBQUM7RUFDdkI7RUFFQUMsTUFBTUEsQ0FBQSxFQUFHO0lBQ0wsSUFBSSxDQUFDakIsS0FBSyxDQUFDQyxNQUFNLEdBQUdpQixRQUFRLENBQUNDLGFBQWEsQ0FBQyxRQUFRLENBQUM7SUFDcEQsSUFBSSxDQUFDbkIsS0FBSyxDQUFDQyxNQUFNLENBQUNtQixJQUFJLEdBQUcsUUFBUTtJQUNqQyxJQUFJLENBQUNwQixLQUFLLENBQUNDLE1BQU0sQ0FBQ29CLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLElBQUksQ0FBQ1osR0FBRyxDQUFDVCxNQUFNLENBQUM7SUFDaEQsSUFBSSxDQUFDRCxLQUFLLENBQUNDLE1BQU0sQ0FBQ3NCLFNBQVMsR0FBR3JDLFFBQVE7SUFFdEMsT0FBTyxJQUFJLENBQUNjLEtBQUssQ0FBQ0MsTUFBTTtFQUM1QjtFQUVBdUIsYUFBYUEsQ0FBQSxFQUFHO0lBQ1osSUFBSSxDQUFDeEIsS0FBSyxDQUFDRSxNQUFNLEdBQUdnQixRQUFRLENBQUNDLGFBQWEsQ0FBQyxLQUFLLENBQUM7SUFDakQsSUFBSSxDQUFDbkIsS0FBSyxDQUFDRSxNQUFNLENBQUNtQixTQUFTLENBQUNDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQztJQUVuRCxJQUFJLENBQUN0QixLQUFLLENBQUNHLEtBQUssR0FBR2UsUUFBUSxDQUFDQyxhQUFhLENBQUMsT0FBTyxDQUFDO0lBQ2xELElBQUksQ0FBQ25CLEtBQUssQ0FBQ0csS0FBSyxDQUFDc0IsV0FBVyxHQUFHLDhCQUE4QjtJQUM3RCxJQUFJLENBQUN6QixLQUFLLENBQUNHLEtBQUssQ0FBQ2tCLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLElBQUksQ0FBQ1osR0FBRyxDQUFDUCxLQUFLLENBQUM7SUFDOUMsSUFBSSxDQUFDSCxLQUFLLENBQUNHLEtBQUssQ0FBQ2tCLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLElBQUksQ0FBQ1osR0FBRyxDQUFDSSxXQUFXLENBQUM7SUFDcEQsSUFBSSxDQUFDZCxLQUFLLENBQUNHLEtBQUssQ0FBQ3VCLGdCQUFnQixDQUFDLFNBQVMsRUFBRUMsS0FBSyxJQUFJO01BQ2xELElBQUlBLEtBQUssQ0FBQ0MsT0FBTyxLQUFLeEMsU0FBUyxFQUFFO1FBQzdCLElBQUksQ0FBQ3lDLFlBQVksQ0FBQ0YsS0FBSyxDQUFDO1FBQ3hCO01BQ0o7SUFDSixDQUFDLENBQUM7SUFFRixJQUFJLENBQUMzQixLQUFLLENBQUNHLEtBQUssQ0FBQ3VCLGdCQUFnQixDQUFDLE9BQU8sRUFBRUMsS0FBSyxJQUFJO01BQ2hELE1BQU1HLEtBQUssR0FBRyxJQUFJO01BRWxCLElBQUlILEtBQUssQ0FBQ0MsT0FBTyxLQUFLeEMsU0FBUyxFQUFFO1FBQzdCO01BQ0o7TUFFQSxJQUFJLElBQUksQ0FBQ1ksS0FBSyxDQUFDRyxLQUFLLENBQUM0QixLQUFLLENBQUNDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDbkNDLEtBQUssQ0FDRCxHQUFHLElBQUksQ0FBQ25DLE1BQU0sQ0FBQ29DLFVBQVUsbUNBQW1DLElBQUksQ0FBQ3BDLE1BQU0sQ0FBQ3FDLFFBQVEsU0FBUyxJQUFJLENBQUNyQyxNQUFNLENBQUNzQyxRQUFRLFVBQVUsSUFBSSxDQUFDdEMsTUFBTSxDQUFDdUMsU0FBUyxVQUFVLElBQUksQ0FBQ3JDLEtBQUssQ0FBQ0csS0FBSyxDQUFDNEIsS0FBSyxFQUNoTCxDQUFDLENBQ0lPLElBQUksQ0FBQ0MsUUFBUSxJQUFJQSxRQUFRLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDakNGLElBQUksQ0FBQ0csWUFBWSxJQUNkWCxLQUFLLENBQUNZLG1CQUFtQixDQUFDRCxZQUFZLENBQzFDLENBQUM7TUFDVDtJQUNKLENBQUMsQ0FBQztJQUVGLElBQUksQ0FBQ3pDLEtBQUssQ0FBQ0UsTUFBTSxDQUFDeUMsV0FBVyxDQUFDLElBQUksQ0FBQzNDLEtBQUssQ0FBQ0csS0FBSyxDQUFDO0lBRS9DLElBQUksQ0FBQ0gsS0FBSyxDQUFDSSxJQUFJLEdBQUdjLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLElBQUksQ0FBQztJQUM5QyxJQUFJLENBQUNuQixLQUFLLENBQUNJLElBQUksQ0FBQ2lCLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLGlDQUFpQyxDQUFDO0lBQ2hFLElBQUksQ0FBQ3RCLEtBQUssQ0FBQ0UsTUFBTSxDQUFDeUMsV0FBVyxDQUFDLElBQUksQ0FBQzNDLEtBQUssQ0FBQ0ksSUFBSSxDQUFDO0lBRTlDLE9BQU8sSUFBSSxDQUFDSixLQUFLLENBQUNFLE1BQU07RUFDNUI7RUFFQTBDLFFBQVFBLENBQUNDLEtBQUssRUFBRTtJQUNaLElBQUksSUFBSSxDQUFDOUMsS0FBSyxFQUFFO01BQ1osSUFBSSxDQUFDK0MsVUFBVSxDQUFDLENBQUM7TUFDakIsSUFBSSxDQUFDOUIsWUFBWSxDQUFDLENBQUM7TUFDbkIsSUFBSSxDQUFDVCxhQUFhLENBQUN3QyxLQUFLLENBQUMsQ0FBQztNQUMxQjtJQUNKO0lBRUEsSUFBSUYsS0FBSyxFQUFFO01BQ1AsTUFBTUcsWUFBWSxHQUFHSCxLQUFLLENBQUNJLGVBQWUsQ0FBQyxDQUFDO01BQzVDLElBQUksQ0FBQ3hCLFdBQVcsR0FBR1AsUUFBUSxDQUFDQyxhQUFhLENBQUMsTUFBTSxDQUFDO01BQ2pELElBQUksQ0FBQ00sV0FBVyxDQUFDeUIsS0FBSyxDQUFDQyxlQUFlLEdBQUcsU0FBUztNQUNsRCxJQUFJLENBQUMxQixXQUFXLENBQUNrQixXQUFXLENBQUNLLFlBQVksQ0FBQztNQUMxQ0gsS0FBSyxDQUFDTyxVQUFVLENBQUMsSUFBSSxDQUFDM0IsV0FBVyxDQUFDO0lBQ3RDO0lBRUEsSUFBSSxDQUFDNEIsYUFBYSxDQUFDLENBQUM7RUFDeEI7RUFFQUMsVUFBVUEsQ0FBQSxFQUFHO0lBQ1QsTUFBTUMsU0FBUyxHQUFHLElBQUksQ0FBQzFELEdBQUcsQ0FBQzJELFNBQVMsQ0FBQ0MsYUFBYSxDQUFDLEdBQUcsQ0FBQztJQUV2RCxJQUFJRixTQUFTLEVBQUU7TUFDWCxJQUFJLENBQUN2RCxLQUFLLENBQUNDLE1BQU0sQ0FBQ29CLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLElBQUksQ0FBQ1osR0FBRyxDQUFDQyxZQUFZLENBQUM7TUFDdEQsSUFBSSxDQUFDWCxLQUFLLENBQUNDLE1BQU0sQ0FBQ3NCLFNBQVMsR0FBR3BDLFVBQVU7TUFDeEMsSUFBSSxDQUFDYSxLQUFLLENBQUNHLEtBQUssQ0FBQzRCLEtBQUssR0FBR3dCLFNBQVMsQ0FBQ0csWUFBWSxDQUFDLE1BQU0sQ0FBQztNQUN2RCxJQUFJLENBQUMzRCxLQUFLLEdBQUd3RCxTQUFTO01BQ3RCLElBQUksQ0FBQ0ksV0FBVyxDQUFDLENBQUM7SUFDdEIsQ0FBQyxNQUFNO01BQ0gsSUFBSSxDQUFDM0QsS0FBSyxDQUFDQyxNQUFNLENBQUNzQixTQUFTLEdBQUdyQyxRQUFRO01BQ3RDLElBQUksQ0FBQ2MsS0FBSyxDQUFDQyxNQUFNLENBQUNvQixTQUFTLENBQUN1QyxNQUFNLENBQUMsSUFBSSxDQUFDbEQsR0FBRyxDQUFDQyxZQUFZLENBQUM7SUFDN0Q7RUFDSjtFQUVBa0QsUUFBUUEsQ0FBQ0MsR0FBRyxFQUFFO0lBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQ3JDLFdBQVcsRUFBRTtNQUNuQjtJQUNKO0lBRUEsSUFBSXNDLElBQUksR0FBRzdDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLEdBQUcsQ0FBQztJQUN0QzRDLElBQUksQ0FBQ3hDLFNBQVMsR0FBRyxJQUFJLENBQUNFLFdBQVcsQ0FBQ3VDLFNBQVM7SUFDM0NELElBQUksQ0FBQ3RFLElBQUksR0FBR3FFLEdBQUc7SUFFZixJQUFJLENBQUNyQyxXQUFXLENBQUN3QyxVQUFVLENBQUNDLFlBQVksQ0FBQ0gsSUFBSSxFQUFFLElBQUksQ0FBQ3RDLFdBQVcsQ0FBQztJQUVoRSxJQUFJLENBQUNBLFdBQVcsR0FBRyxJQUFJO0VBQzNCO0VBRUFULFlBQVlBLENBQUEsRUFBRztJQUNYLElBQUksSUFBSSxDQUFDUyxXQUFXLEVBQUU7TUFDbEIsSUFBSSxDQUFDQSxXQUFXLENBQUN3QyxVQUFVLENBQUMxQyxTQUFTLEdBQUcsSUFBSSxDQUFDRSxXQUFXLENBQUN3QyxVQUFVLENBQUMxQyxTQUFTLENBQUM0QyxPQUFPLENBQ2pGLElBQUksQ0FBQzFDLFdBQVcsQ0FBQzJDLFNBQVMsRUFDMUIsSUFBSSxDQUFDM0MsV0FBVyxDQUFDdUMsU0FDckIsQ0FBQztNQUNELElBQUksQ0FBQ3ZDLFdBQVcsR0FBRyxJQUFJO0lBQzNCO0lBRUEsSUFBSSxJQUFJLENBQUN6QixLQUFLLENBQUNFLE1BQU0sRUFBRTtNQUNuQixJQUFJLENBQUNGLEtBQUssQ0FBQ0UsTUFBTSxDQUFDbUIsU0FBUyxDQUFDdUMsTUFBTSxDQUFDLElBQUksQ0FBQ2xELEdBQUcsQ0FBQ0csWUFBWSxDQUFDO01BQ3pELElBQUksQ0FBQ2IsS0FBSyxDQUFDRyxLQUFLLENBQUM0QixLQUFLLEdBQUcsRUFBRTtNQUMzQixJQUFJLENBQUMvQixLQUFLLENBQUNJLElBQUksQ0FBQ21CLFNBQVMsR0FBRyxFQUFFO0lBQ2xDO0lBRUEsSUFBSSxDQUFDOEMsV0FBVyxHQUFHLEtBQUs7RUFDNUI7RUFFQTNCLG1CQUFtQkEsQ0FBQ0QsWUFBWSxFQUFFO0lBQzlCLElBQUksQ0FBQ3pDLEtBQUssQ0FBQ0ksSUFBSSxDQUFDbUIsU0FBUyxHQUFHLEVBQUU7SUFFOUJrQixZQUFZLENBQUM2QixPQUFPLENBQUNDLFdBQVcsSUFBSTtNQUNoQyxJQUFJdEUsTUFBTSxHQUFHaUIsUUFBUSxDQUFDQyxhQUFhLENBQUMsUUFBUSxDQUFDO01BQzdDbEIsTUFBTSxDQUFDK0QsU0FBUyxHQUFHTyxXQUFXLENBQUNDLFdBQVc7TUFDMUN2RSxNQUFNLENBQUN3RSxZQUFZLENBQUMsV0FBVyxFQUFFRixXQUFXLENBQUNULEdBQUcsQ0FBQztNQUVqRCxJQUFJWSxRQUFRLEdBQUd4RCxRQUFRLENBQUNDLGFBQWEsQ0FBQyxJQUFJLENBQUM7TUFDM0N1RCxRQUFRLENBQUNDLEtBQUssR0FBR0osV0FBVyxDQUFDQyxXQUFXO01BQ3hDRSxRQUFRLENBQUMvQixXQUFXLENBQUMxQyxNQUFNLENBQUM7TUFFNUJBLE1BQU0sQ0FBQ3lCLGdCQUFnQixDQUFDLE9BQU8sRUFBRUMsS0FBSyxJQUFJO1FBQ3RDLElBQUksQ0FBQ2lELGlCQUFpQixDQUFDakQsS0FBSyxDQUFDO01BQ2pDLENBQUMsQ0FBQztNQUVGLElBQUksQ0FBQzNCLEtBQUssQ0FBQ0ksSUFBSSxDQUFDdUMsV0FBVyxDQUFDK0IsUUFBUSxDQUFDO0lBQ3pDLENBQUMsQ0FBQztFQUNOO0VBRUE3QyxZQUFZQSxDQUFDRixLQUFLLEVBQUU7SUFDaEIsSUFBSUksS0FBSyxHQUFHLElBQUksQ0FBQy9CLEtBQUssQ0FBQ0csS0FBSyxDQUFDNEIsS0FBSyxJQUFJLEVBQUU7SUFFeEMsSUFBSSxDQUFDQSxLQUFLLENBQUM4QyxJQUFJLENBQUMsQ0FBQyxFQUFFO01BQ2ZsRCxLQUFLLENBQUNtRCxjQUFjLENBQUMsQ0FBQztNQUN0QixJQUFJLENBQUM5RCxZQUFZLENBQUMsQ0FBQztNQUNuQjtJQUNKO0lBRUEsSUFBSSxDQUFDNkMsUUFBUSxDQUFDOUIsS0FBSyxDQUFDOztJQUVwQjtBQUNSO0FBQ0E7SUFDUUosS0FBSyxDQUFDbUQsY0FBYyxDQUFDLENBQUM7SUFDdEJuRCxLQUFLLENBQUNvRCxlQUFlLENBQUMsQ0FBQztJQUN2QnBELEtBQUssQ0FBQ3FELHdCQUF3QixDQUFDLENBQUM7SUFDaEMsSUFBSSxDQUFDekUsYUFBYSxDQUFDd0MsS0FBSyxDQUFDLENBQUM7RUFDOUI7RUFFQVksV0FBV0EsQ0FBQ3NCLFNBQVMsRUFBRTtJQUNuQixJQUFJLENBQUNqRixLQUFLLENBQUNFLE1BQU0sQ0FBQ21CLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLElBQUksQ0FBQ1osR0FBRyxDQUFDRyxZQUFZLENBQUM7SUFFdEQsSUFBSW9FLFNBQVMsRUFBRTtNQUNYLElBQUksQ0FBQ2pGLEtBQUssQ0FBQ0csS0FBSyxDQUFDK0UsS0FBSyxDQUFDLENBQUM7SUFDNUI7SUFFQSxJQUFJLENBQUNiLFdBQVcsR0FBRyxJQUFJO0VBQzNCO0VBRUF2QixVQUFVQSxDQUFBLEVBQUc7SUFDVCxJQUFJLENBQUMsSUFBSSxDQUFDL0MsS0FBSyxFQUFFO01BQ2I7SUFDSjtJQUVBLElBQUksQ0FBQ0EsS0FBSyxDQUFDa0UsVUFBVSxDQUFDMUMsU0FBUyxHQUFHLElBQUksQ0FBQ3hCLEtBQUssQ0FBQ2tFLFVBQVUsQ0FBQzFDLFNBQVMsQ0FBQzRDLE9BQU8sQ0FDckUsSUFBSSxDQUFDcEUsS0FBSyxDQUFDcUUsU0FBUyxFQUNwQixJQUFJLENBQUNyRSxLQUFLLENBQUNpRSxTQUNmLENBQUM7SUFFRCxJQUFJLENBQUNqRSxLQUFLLEdBQUcsSUFBSTtFQUNyQjtFQUVBNkUsaUJBQWlCQSxDQUFDakQsS0FBSyxFQUFFO0lBQ3JCLE1BQU13RCxPQUFPLEdBQUd4RCxLQUFLLENBQUNqQyxNQUFNLENBQUNnRSxZQUFZLENBQUMsV0FBVyxDQUFDO0lBRXRELElBQUksQ0FBQ0csUUFBUSxDQUFDc0IsT0FBTyxDQUFDO0lBQ3RCLElBQUksQ0FBQ25FLFlBQVksQ0FBQyxDQUFDO0lBQ25CLElBQUksQ0FBQ1QsYUFBYSxDQUFDd0MsS0FBSyxDQUFDLENBQUM7RUFDOUI7RUFFQU0sYUFBYUEsQ0FBQSxFQUFHO0lBQ1osSUFBSSxDQUFDLElBQUksQ0FBQ2dCLFdBQVcsRUFBRTtNQUNuQixJQUFJLENBQUNWLFdBQVcsQ0FBQyxJQUFJLENBQUM7SUFDMUIsQ0FBQyxNQUFNO01BQ0gsSUFBSSxDQUFDM0MsWUFBWSxDQUFDLEtBQUssQ0FBQztJQUM1QjtFQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9Bc3NldHMvRWRpdG9yLmpzL2pzL3BsdWdpbnMvbGluay9pbmRleC5qcz9jMDJhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi9pbmRleC5jc3MnO1xyXG5cclxuY29uc3QgbGlua0ljb24gPSBgPHN2ZyB3aWR0aD1cIjEzXCIgaGVpZ2h0PVwiMTRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XHJcblx0PHBhdGggZD1cIk04LjU2NyAxMy42MjljLjcyOC40NjQgMS41ODEuNjUgMi40MS41NThsLS44NzMuODczQTMuNzIyIDMuNzIyIDAgMSAxIDQuODQgOS43OTRMNi42OTQgNy45NGEzLjcyMiAzLjcyMiAwIDAgMSA1LjI1Ni0uMDA4TDEwLjQ4NCA5LjRhNS4yMDkgNS4yMDkgMCAwIDEtLjAxNy4wMTYgMS42MjUgMS42MjUgMCAwIDAtMi4yOS4wMDlsLTEuODU0IDEuODU0YTEuNjI2IDEuNjI2IDAgMCAwIDIuMjQ0IDIuMzV6bTIuNzY2LTcuMzU4YTMuNzIyIDMuNzIyIDAgMCAwLTIuNDEtLjU1OGwuODczLS44NzNhMy43MjIgMy43MjIgMCAxIDEgNS4yNjQgNS4yNjZsLTEuODU0IDEuODU0YTMuNzIyIDMuNzIyIDAgMCAxLTUuMjU2LjAwOEw5LjQxNiAxMC41YTUuMiA1LjIgMCAwIDEgLjAxNy0uMDE2IDEuNjI1IDEuNjI1IDAgMCAwIDIuMjktLjAwOWwxLjg1NC0xLjg1NGExLjYyNiAxLjYyNiAwIDAgMC0yLjI0NC0yLjM1elwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtMy42NjcgLTIuNylcIiAvPlxyXG48L3N2Zz5cclxuYDtcclxuXHJcbmNvbnN0IHVubGlua0ljb24gPSBgPHN2ZyB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMThcIiB2aWV3Qm94PVwiMCAwIDE2IDE4XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiPlxyXG4gICAgPHBhdGggdHJhbnNmb3JtPVwicm90YXRlKC00NSA4LjM1OCAxMS42MzYpXCIgZD1cIk05LjE0IDkuNDMzYy4wMDgtLjEyLS4wODctLjY4Ni0uMTEyLS44MWExLjQgMS40IDAgMCAwLTEuNjQtMS4xMDZsLTMuOTc3Ljc3MmExLjQgMS40IDAgMCAwIC41MzUgMi43NDlsLjkzNS0uMTYycy4wMTkgMS4wOTMuNTkyIDIuMjIzbC0xLjA5OC4xNDhBMy42NSAzLjY1IDAgMSAxIDIuOTgyIDYuMDhsMy45NzYtLjc3M2MxLjk3OS0uMzg1IDMuODM4LjkxOSA0LjI4IDIuODg2LjUxIDIuMjc2LTEuMDg0IDIuODE2LTEuMDczIDIuOTM1LjAxMS4xMi0uMzk0LTEuNTktMS4wMjYtMS42OTZ6bTMuNTYzLS44NzVsMi4xMDUgMy40MzlhMy42NSAzLjY1IDAgMCAxLTYuMTkgMy44NjhMNi40NyAxMi40MzFjLTEuMDY4LTEuNzEtLjk2NC0yLjI5NS0uNDktMy4wNy4wNjctLjEwNyAxLjE2LTEuNDY2IDEuNDgtLjkzNi0uMTIuMDM2LjkgMS4zMy43ODkgMS4zOTgtLjY1Ni40MS0uMjguNzYuMTMgMS40MTVsMi4xNDUgMy40MzVhMS40IDEuNCAwIDAgMCAyLjM3NS0xLjQ4NGwtMS4xMzItMS45NDFjLjQyLS40MzUgMS4yMzctMS4wNTQuOTM1LTIuNjl6bTEuODgtMi4yNTZoMy40YTEuMTI1IDEuMTI1IDAgMCAxIDAgMi4yNWgtMy40YTEuMTI1IDEuMTI1IDAgMCAxIDAtMi4yNXpNMTEuODQ5LjAzOGMuNjIgMCAxLjEyNS41MDMgMS4xMjUgMS4xMjV2My40YTEuMTI1IDEuMTI1IDAgMCAxLTIuMjUgMHYtMy40YzAtLjYyMi41MDMtMS4xMjUgMS4xMjUtMS4xMjV6XCIvPlxyXG48L3N2Zz5gO1xyXG5cclxuY29uc3QgRU5URVJfS0VZID0gMTM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaW5rVG9vbCB7XHJcbiAgICBzdGF0aWMgZ2V0IGlzSW5saW5lKCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXQgc2FuaXRpemUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYToge1xyXG4gICAgICAgICAgICAgICAgaHJlZjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHRhcmdldDogJ19ibGFuaycsXHJcbiAgICAgICAgICAgICAgICByZWw6ICdub2ZvbGxvdycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih7IGFwaSwgY29uZmlnIH0pIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMubm9kZXMgPSB7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogbnVsbCxcclxuICAgICAgICAgICAgZWRpdG9yOiBudWxsLFxyXG4gICAgICAgICAgICBpbnB1dDogbnVsbCxcclxuICAgICAgICAgICAgbGlzdDogbnVsbCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnRhZyA9ICdhJztcclxuICAgICAgICB0aGlzLmNsYXNzID0gJ2NkeC1saW5rJztcclxuXHJcbiAgICAgICAgdGhpcy5hcGkgPSBhcGk7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XHJcbiAgICAgICAgdGhpcy5pbmxpbmVUb29sYmFyID0gYXBpLmlubGluZVRvb2xiYXI7XHJcbiAgICAgICAgdGhpcy5ub3RpZmllciA9IGFwaS5ub3RpZmllcjtcclxuICAgICAgICB0aGlzLnRvb2xiYXIgPSBhcGkudG9vbGJhcjtcclxuICAgICAgICB0aGlzLkNTUyA9IHtcclxuICAgICAgICAgICAgYnV0dG9uOiAnY2UtaW5saW5lLXRvb2wnLFxyXG4gICAgICAgICAgICBidXR0b25BY3RpdmU6ICdjZS1pbmxpbmUtdG9vbC0tYWN0aXZlJyxcclxuICAgICAgICAgICAgYnV0dG9uTW9kaWZpZXI6ICdjZS1pbmxpbmUtdG9vbC0tbGluaycsXHJcbiAgICAgICAgICAgIGVkaXRvckFjdGl2ZTogJ2xpbmstdG9vbC1lZGl0b3ItLWFjdGl2ZScsXHJcbiAgICAgICAgICAgIGlucHV0OiAnY2UtaW5saW5lLXRvb2wtaW5wdXQnLFxyXG4gICAgICAgICAgICBpbnB1dFNob3dlZDogJ2NlLWlubGluZS10b29sLWlucHV0LS1zaG93ZWQnLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZUFjdGlvbnMoKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgdGhpcy5ub2Rlcy5idXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICB0aGlzLm5vZGVzLmJ1dHRvbi50eXBlID0gJ2J1dHRvbic7XHJcbiAgICAgICAgdGhpcy5ub2Rlcy5idXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5idXR0b24pO1xyXG4gICAgICAgIHRoaXMubm9kZXMuYnV0dG9uLmlubmVySFRNTCA9IGxpbmtJY29uO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5ub2Rlcy5idXR0b247XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQWN0aW9ucygpIHtcclxuICAgICAgICB0aGlzLm5vZGVzLmVkaXRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMubm9kZXMuZWRpdG9yLmNsYXNzTGlzdC5hZGQoJ2xpbmstdG9vbC1lZGl0b3InKTtcclxuXHJcbiAgICAgICAgdGhpcy5ub2Rlcy5pbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgdGhpcy5ub2Rlcy5pbnB1dC5wbGFjZWhvbGRlciA9ICdUeXBlIGxpbmsgb3Igc2VhcmNoIGJ5IHRpdGxlJztcclxuICAgICAgICB0aGlzLm5vZGVzLmlucHV0LmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuaW5wdXQpO1xyXG4gICAgICAgIHRoaXMubm9kZXMuaW5wdXQuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5pbnB1dFNob3dlZCk7XHJcbiAgICAgICAgdGhpcy5ub2Rlcy5pbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gRU5URVJfS0VZKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVudGVyUHJlc3NlZChldmVudCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5ub2Rlcy5pbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgY29uc3QgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IEVOVEVSX0tFWSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5ub2Rlcy5pbnB1dC52YWx1ZS5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgICAgICAgICBmZXRjaChcclxuICAgICAgICAgICAgICAgICAgICBgJHt0aGlzLmNvbmZpZy50ZW5hbnRQYXRofS9CbG9ja3MvU2VhcmNoQ29udGVudEl0ZW1zP3R5cGU9JHt0aGlzLmNvbmZpZy50eXBlTmFtZX0mcGFydD0ke3RoaXMuY29uZmlnLnBhcnROYW1lfSZmaWVsZD0ke3RoaXMuY29uZmlnLmZpZWxkTmFtZX0mcXVlcnk9JHt0aGlzLm5vZGVzLmlucHV0LnZhbHVlfWBcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oY29udGVudEl0ZW1zID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRpc3BsYXlDb250ZW50SXRlbXMoY29udGVudEl0ZW1zKVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5ub2Rlcy5lZGl0b3IuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5pbnB1dCk7XHJcblxyXG4gICAgICAgIHRoaXMubm9kZXMubGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XHJcbiAgICAgICAgdGhpcy5ub2Rlcy5saXN0LmNsYXNzTGlzdC5hZGQoJ2xpbmstdG9vbC1lZGl0b3JfX2NvbnRlbnQtaXRlbXMnKTtcclxuICAgICAgICB0aGlzLm5vZGVzLmVkaXRvci5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLmxpc3QpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5ub2Rlcy5lZGl0b3I7XHJcbiAgICB9XHJcblxyXG4gICAgc3Vycm91bmQocmFuZ2UpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUxpbmsoKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUFjdGlvbnMoKTtcclxuICAgICAgICAgICAgdGhpcy5pbmxpbmVUb29sYmFyLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyYW5nZSkge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZFRleHQgPSByYW5nZS5leHRyYWN0Q29udGVudHMoKTtcclxuICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI2E4ZDZmZic7XHJcbiAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIuYXBwZW5kQ2hpbGQoc2VsZWN0ZWRUZXh0KTtcclxuICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZSh0aGlzLnBsYWNlaG9sZGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudG9nZ2xlQWN0aW9ucygpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrU3RhdGUoKSB7XHJcbiAgICAgICAgY29uc3QgYW5jaG9yVGFnID0gdGhpcy5hcGkuc2VsZWN0aW9uLmZpbmRQYXJlbnRUYWcoJ0EnKTtcclxuXHJcbiAgICAgICAgaWYgKGFuY2hvclRhZykge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGVzLmJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmJ1dHRvbkFjdGl2ZSk7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZXMuYnV0dG9uLmlubmVySFRNTCA9IHVubGlua0ljb247XHJcbiAgICAgICAgICAgIHRoaXMubm9kZXMuaW5wdXQudmFsdWUgPSBhbmNob3JUYWcuZ2V0QXR0cmlidXRlKCdocmVmJyk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBhbmNob3JUYWc7XHJcbiAgICAgICAgICAgIHRoaXMub3BlbkFjdGlvbnMoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGVzLmJ1dHRvbi5pbm5lckhUTUwgPSBsaW5rSWNvbjtcclxuICAgICAgICAgICAgdGhpcy5ub2Rlcy5idXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNTUy5idXR0b25BY3RpdmUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhcHBseVVybCh1cmwpIHtcclxuICAgICAgICBpZiAoIXRoaXMucGxhY2Vob2xkZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICAgICAgbGluay5pbm5lckhUTUwgPSB0aGlzLnBsYWNlaG9sZGVyLmlubmVyVGV4dDtcclxuICAgICAgICBsaW5rLmhyZWYgPSB1cmw7XHJcblxyXG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXIucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobGluaywgdGhpcy5wbGFjZWhvbGRlcik7XHJcblxyXG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlQWN0aW9ucygpIHtcclxuICAgICAgICBpZiAodGhpcy5wbGFjZWhvbGRlcikge1xyXG4gICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyLnBhcmVudE5vZGUuaW5uZXJIVE1MID0gdGhpcy5wbGFjZWhvbGRlci5wYXJlbnROb2RlLmlubmVySFRNTC5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlci5vdXRlckhUTUwsXHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyLmlubmVyVGV4dFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm5vZGVzLmVkaXRvcikge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGVzLmVkaXRvci5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLmVkaXRvckFjdGl2ZSk7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZXMuaW5wdXQudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgdGhpcy5ub2Rlcy5saXN0LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pbnB1dE9wZW5lZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3BsYXlDb250ZW50SXRlbXMoY29udGVudEl0ZW1zKSB7XHJcbiAgICAgICAgdGhpcy5ub2Rlcy5saXN0LmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgICAgICBjb250ZW50SXRlbXMuZm9yRWFjaChjb250ZW50SXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICAgICAgYnV0dG9uLmlubmVyVGV4dCA9IGNvbnRlbnRJdGVtLmRpc3BsYXlUZXh0O1xyXG4gICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLWhyZWYnLCBjb250ZW50SXRlbS51cmwpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGxpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICAgICAgICAgICAgbGlzdEl0ZW0udGl0bGUgPSBjb250ZW50SXRlbS5kaXNwbGF5VGV4dDtcclxuICAgICAgICAgICAgbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoYnV0dG9uKTtcclxuXHJcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Q29udGVudEl0ZW0oZXZlbnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubm9kZXMubGlzdC5hcHBlbmRDaGlsZChsaXN0SXRlbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZW50ZXJQcmVzc2VkKGV2ZW50KSB7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5ub2Rlcy5pbnB1dC52YWx1ZSB8fCAnJztcclxuXHJcbiAgICAgICAgaWYgKCF2YWx1ZS50cmltKCkpIHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUFjdGlvbnMoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5hcHBseVVybCh2YWx1ZSk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFByZXZlbnRpbmcgZXZlbnRzIHRoYXQgd2lsbCBiZSBhYmxlIHRvIGhhcHBlblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5pbmxpbmVUb29sYmFyLmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbkFjdGlvbnMobmVlZEZvY3VzKSB7XHJcbiAgICAgICAgdGhpcy5ub2Rlcy5lZGl0b3IuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5lZGl0b3JBY3RpdmUpO1xyXG5cclxuICAgICAgICBpZiAobmVlZEZvY3VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZXMuaW5wdXQuZm9jdXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaW5wdXRPcGVuZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUxpbmsoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUucGFyZW50Tm9kZS5pbm5lckhUTUwgPSB0aGlzLnN0YXRlLnBhcmVudE5vZGUuaW5uZXJIVE1MLnJlcGxhY2UoXHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUub3V0ZXJIVE1MLFxyXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmlubmVyVGV4dFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdENvbnRlbnRJdGVtKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgaXRlbVVybCA9IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaHJlZicpO1xyXG5cclxuICAgICAgICB0aGlzLmFwcGx5VXJsKGl0ZW1VcmwpO1xyXG4gICAgICAgIHRoaXMuY2xvc2VBY3Rpb25zKCk7XHJcbiAgICAgICAgdGhpcy5pbmxpbmVUb29sYmFyLmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlQWN0aW9ucygpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaW5wdXRPcGVuZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5vcGVuQWN0aW9ucyh0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlQWN0aW9ucyhmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJsaW5rSWNvbiIsInVubGlua0ljb24iLCJFTlRFUl9LRVkiLCJMaW5rVG9vbCIsImlzSW5saW5lIiwic2FuaXRpemUiLCJhIiwiaHJlZiIsInRhcmdldCIsInJlbCIsImNvbnN0cnVjdG9yIiwiYXBpIiwiY29uZmlnIiwic3RhdGUiLCJub2RlcyIsImJ1dHRvbiIsImVkaXRvciIsImlucHV0IiwibGlzdCIsInRhZyIsImNsYXNzIiwiaW5saW5lVG9vbGJhciIsIm5vdGlmaWVyIiwidG9vbGJhciIsIkNTUyIsImJ1dHRvbkFjdGl2ZSIsImJ1dHRvbk1vZGlmaWVyIiwiZWRpdG9yQWN0aXZlIiwiaW5wdXRTaG93ZWQiLCJjbGVhciIsImNsb3NlQWN0aW9ucyIsInJlbmRlciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJpbm5lckhUTUwiLCJyZW5kZXJBY3Rpb25zIiwicGxhY2Vob2xkZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJrZXlDb2RlIiwiZW50ZXJQcmVzc2VkIiwiX3RoaXMiLCJ2YWx1ZSIsImxlbmd0aCIsImZldGNoIiwidGVuYW50UGF0aCIsInR5cGVOYW1lIiwicGFydE5hbWUiLCJmaWVsZE5hbWUiLCJ0aGVuIiwicmVzcG9uc2UiLCJqc29uIiwiY29udGVudEl0ZW1zIiwiZGlzcGxheUNvbnRlbnRJdGVtcyIsImFwcGVuZENoaWxkIiwic3Vycm91bmQiLCJyYW5nZSIsInJlbW92ZUxpbmsiLCJjbG9zZSIsInNlbGVjdGVkVGV4dCIsImV4dHJhY3RDb250ZW50cyIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwiaW5zZXJ0Tm9kZSIsInRvZ2dsZUFjdGlvbnMiLCJjaGVja1N0YXRlIiwiYW5jaG9yVGFnIiwic2VsZWN0aW9uIiwiZmluZFBhcmVudFRhZyIsImdldEF0dHJpYnV0ZSIsIm9wZW5BY3Rpb25zIiwicmVtb3ZlIiwiYXBwbHlVcmwiLCJ1cmwiLCJsaW5rIiwiaW5uZXJUZXh0IiwicGFyZW50Tm9kZSIsInJlcGxhY2VDaGlsZCIsInJlcGxhY2UiLCJvdXRlckhUTUwiLCJpbnB1dE9wZW5lZCIsImZvckVhY2giLCJjb250ZW50SXRlbSIsImRpc3BsYXlUZXh0Iiwic2V0QXR0cmlidXRlIiwibGlzdEl0ZW0iLCJ0aXRsZSIsInNlbGVjdENvbnRlbnRJdGVtIiwidHJpbSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwibmVlZEZvY3VzIiwiZm9jdXMiLCJpdGVtVXJsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Assets/Editor.js/js/plugins/link/index.js\n");

/***/ }),

/***/ "./Assets/Editor.js/js/plugins/mediaLibrary/index.js":
/*!***********************************************************!*\
  !*** ./Assets/Editor.js/js/plugins/mediaLibrary/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MediaLibraryTool)\n/* harmony export */ });\n/* harmony import */ var bootstrap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bootstrap */ \"bootstrap\");\n/* harmony import */ var bootstrap__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bootstrap__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui */ \"./Assets/Editor.js/js/plugins/mediaLibrary/ui.js\");\n/* harmony import */ var _index_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index.css */ \"./Assets/Editor.js/js/plugins/mediaLibrary/index.css\");\n/* harmony import */ var _codexteam_icons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @codexteam/icons */ \"./node_modules/@codexteam/icons/dist/index.mjs\");\n\n\n\n\n\nconst selectors = {\n  mediaApp: '#mediaApp',\n  mediaFieldSelectButton: '.mediaFieldSelectButton',\n  modalBody: '.modal-body'\n};\nclass MediaLibraryTool {\n  static get pasteConfig() {\n    return {\n      patterns: {\n        image: /https?:\\/\\/\\S+\\.(gif|jpe?g|tiff|png)$/i\n      },\n      tags: ['IMG']\n    };\n  }\n  static get toolbox() {\n    return {\n      title: 'Image',\n      icon: '<svg width=\"17\" height=\"15\" viewBox=\"0 0 336 276\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M291 150V79c0-19-15-34-34-34H79c-19 0-34 15-34 34v42l67-44 81 72 56-29 42 30zm0 52l-43-30-56 30-81-67-66 39v23c0 19 15 34 34 34h178c17 0 31-13 34-29zM79 0h178c44 0 79 35 79 79v118c0 44-35 79-79 79H79c-44 0-79-35-79-79V79C0 35 35 0 79 0z\"/></svg>'\n    };\n  }\n  constructor({\n    data,\n    config,\n    api\n  }) {\n    this.api = api;\n    this.config = config || {};\n    this.data = {\n      url: data.url || '',\n      baseUrl: data.baseUrl || data.url,\n      caption: data.caption || '',\n      stretched: data.stretched !== undefined ? data.stretched : false,\n      profileObject: data.profileObject !== undefined ? data.profileObject : this.profiles[3],\n      profile: data.profile !== undefined ? data.profile : this.profiles[3].name\n    };\n    this.modalBodyElement = document.getElementById(`${config.id}-ModalBody`);\n    this.ui = new _ui__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.api, () => {\n      this._openMediaLibrary();\n    });\n  }\n  appendCallback() {\n    this._openMediaLibrary();\n  }\n  onPaste(event) {\n    switch (event.type) {\n      case 'pattern':\n        const src = event.detail.data;\n        this._setMedia({\n          mediaPath: src,\n          url: src\n        });\n        break;\n      case 'tag':\n        const imgTag = event.detail.data;\n        this._setMedia({\n          mediaPath: imgTag.src,\n          url: imgTag.src\n        });\n        break;\n    }\n  }\n  render() {\n    return this.ui.render(this.data);\n  }\n  renderSettings() {\n    const settings = [{\n      name: 'stretched',\n      icon: _codexteam_icons__WEBPACK_IMPORTED_MODULE_4__.IconStretch,\n      text: 'Stretch image'\n    }];\n    let profiles = this.profiles.map(profile => ({\n      icon: profile.icon,\n      label: this.api.i18n.t(`Profile: ${profile.name}`),\n      onActivate: () => this.setProfile(profile),\n      closeOnActivate: true,\n      isActive: this.currentProfile.name === profile.name\n    }));\n    let settingsActions = settings.map(setting => ({\n      icon: setting.icon,\n      label: setting.text,\n      onActivate: () => this._toggleTune(setting.name),\n      closeOnActivate: true,\n      isActive: this.data[setting.name] === true\n    }));\n    return [...profiles, ...settingsActions];\n  }\n  save() {\n    this.data.caption = this.ui.getCaption();\n    return this.data;\n  }\n\n  /**\r\n   * Opens the Orchard Core media library.\r\n   */\n  _openMediaLibrary() {\n    const self = this;\n    jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectors.mediaApp).detach().appendTo(jquery__WEBPACK_IMPORTED_MODULE_1___default()(this.modalBodyElement).find(selectors.modalBody));\n    jquery__WEBPACK_IMPORTED_MODULE_1___default()(selectors.mediaApp).show();\n    const modal = new (bootstrap__WEBPACK_IMPORTED_MODULE_0___default().Modal)(jquery__WEBPACK_IMPORTED_MODULE_1___default()(this.modalBodyElement)[0]);\n    modal.show();\n    jquery__WEBPACK_IMPORTED_MODULE_1___default()(this.modalBodyElement).find(selectors.mediaFieldSelectButton).off('click').on('click', async function () {\n      if (window.mediaApp.selectedMedias.length) {\n        self._setMedia(window.mediaApp.selectedMedias[0]);\n      }\n      window.mediaApp.selectedMedias = [];\n      modal.hide();\n      return true;\n    });\n  }\n\n  /**\r\n   * Updates block with selected media item.\r\n   */\n  _setMedia(media) {\n    // Strip any existing query parameters\n    let baseUrl = media.url.split('?')[0];\n\n    // Add new width parameter\n    let url = baseUrl + '?width=' + this.data.profileObject.width + '&height=' + this.data.profileObject.height;\n    this.data = {\n      caption: '',\n      mediaPath: media.mediaPath,\n      url: url,\n      baseUrl: media.url,\n      profileObject: this.data.profileObject,\n      profile: this.data.profileObject.name\n    };\n    this.ui.render(this.data);\n  }\n  _toggleTune(tune) {\n    this.data[tune] = !this.data[tune];\n    if (tune === 'stretched') {\n      const blockId = this.api.blocks.getCurrentBlockIndex();\n      setTimeout(() => {\n        this.api.blocks.stretchBlock(blockId, this.data[tune]);\n      }, 0);\n    }\n  }\n  get currentProfile() {\n    let profile = this.profiles.find(levelItem => levelItem.name === this.data.profile);\n    if (!profile) {\n      profile = this.profiles[2];\n    }\n    return profile;\n  }\n  setProfile(profileObject) {\n    // Strip any existing query parameters\n    let currentUrl = this.data.baseUrl !== undefined ? this.data.baseUrl : this.data.url;\n    let baseUrl = currentUrl.split('?')[0];\n    let url = baseUrl + '?width=' + profileObject.width + '&height=' + profileObject.height;\n    this.data = {\n      ...this.data,\n      caption: this.data.caption,\n      mediaPath: this.data.mediaPath,\n      baseUrl: this.data.baseUrl,\n      url: url,\n      profile: profileObject.name,\n      profileObject: profileObject\n    };\n    this.ui.render(this.data);\n  }\n  get profiles() {\n    const availableProfiles = [{\n      name: '50x50',\n      icon: _codexteam_icons__WEBPACK_IMPORTED_MODULE_4__.IconPicture,\n      width: 50,\n      height: 50\n    }, {\n      name: '75x75',\n      icon: _codexteam_icons__WEBPACK_IMPORTED_MODULE_4__.IconPicture,\n      width: 75,\n      height: 75\n    }, {\n      name: '100x100',\n      icon: _codexteam_icons__WEBPACK_IMPORTED_MODULE_4__.IconPicture,\n      width: 100,\n      height: 100\n    }, {\n      name: '160x160',\n      icon: _codexteam_icons__WEBPACK_IMPORTED_MODULE_4__.IconPicture,\n      width: 160,\n      height: 160\n    }, {\n      name: '240x240',\n      icon: _codexteam_icons__WEBPACK_IMPORTED_MODULE_4__.IconPicture,\n      width: 240,\n      height: 240\n    }, {\n      name: '480x480',\n      icon: _codexteam_icons__WEBPACK_IMPORTED_MODULE_4__.IconPicture,\n      width: 480,\n      height: 480\n    }, {\n      name: '600x600',\n      icon: _codexteam_icons__WEBPACK_IMPORTED_MODULE_4__.IconPicture,\n      width: 600,\n      height: 600\n    }, {\n      name: '1024x600',\n      icon: _codexteam_icons__WEBPACK_IMPORTED_MODULE_4__.IconPicture,\n      width: 1024,\n      height: 600\n    }, {\n      name: '1024x1024',\n      icon: _codexteam_icons__WEBPACK_IMPORTED_MODULE_4__.IconPicture,\n      width: 1024,\n      height: 1024\n    }, {\n      name: '2048x1024',\n      icon: _codexteam_icons__WEBPACK_IMPORTED_MODULE_4__.IconPicture,\n      width: 2048,\n      height: 1024\n    }, {\n      name: '2048x2048',\n      icon: _codexteam_icons__WEBPACK_IMPORTED_MODULE_4__.IconPicture,\n      width: 2048,\n      height: 2048\n    }];\n    return availableProfiles;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Assets/Editor.js/js/plugins/mediaLibrary/index.js\n");

/***/ }),

/***/ "./Assets/Editor.js/js/plugins/mediaLibrary/ui.js":
/*!********************************************************!*\
  !*** ./Assets/Editor.js/js/plugins/mediaLibrary/ui.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Ui)\n/* harmony export */ });\n/* harmony import */ var _utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/dom */ \"./Assets/Editor.js/js/plugins/utils/dom.js\");\n\nconst buttonIcon = `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d = \"M3.15 13.628A7.749 7.749 0 0 0 10 17.75a7.74 7.74 0 0 0 6.305-3.242l-2.387-2.127-2.765 2.244-4.389-4.496-3.614 3.5zm-.787-2.303l4.446-4.371 4.52 4.63 2.534-2.057 3.533 2.797c.23-.734.354-1.514.354-2.324a7.75 7.75 0 1 0-15.387 1.325zM10 20C4.477 20 0 15.523 0 10S4.477 0 10 0s10 4.477 10 10-4.477 10-10 10z\" />\n</svg >`;\nclass Ui {\n  constructor(api, onSelectFile) {\n    this.api = api;\n    this.onSelectFile = onSelectFile;\n    this.nodes = {\n      caption: (0,_utils_dom__WEBPACK_IMPORTED_MODULE_0__.make)('div', ['cdx-input', 'media-library-item__caption'], {\n        contentEditable: true\n      }),\n      fileButton: this.createFileButton(),\n      image: (0,_utils_dom__WEBPACK_IMPORTED_MODULE_0__.make)('img', ['media-library-item__image']),\n      imageWrapper: (0,_utils_dom__WEBPACK_IMPORTED_MODULE_0__.make)('div', ['media-library-item__image']),\n      item: (0,_utils_dom__WEBPACK_IMPORTED_MODULE_0__.make)('div', ['media-library-item']),\n      wrapper: (0,_utils_dom__WEBPACK_IMPORTED_MODULE_0__.make)('div', ['cdx-block', 'media-library-tool'])\n    };\n    this.nodes.caption.dataset.placeholder = 'Caption...';\n    this.nodes.imageWrapper.appendChild(this.nodes.image);\n    this.nodes.item.appendChild(this.nodes.imageWrapper);\n    this.nodes.item.appendChild(this.nodes.caption);\n    this.nodes.wrapper.appendChild(this.nodes.item);\n    this.nodes.wrapper.appendChild(this.nodes.fileButton);\n    this.blockIndex = this.api.blocks.getCurrentBlockIndex() + 1;\n  }\n  createFileButton() {\n    let button = (0,_utils_dom__WEBPACK_IMPORTED_MODULE_0__.make)('div', [this.api.styles.button, 'media-library-tool__select-file']);\n    button.innerHTML = `${buttonIcon} Select an Image`;\n    button.addEventListener('click', () => {\n      this.onSelectFile();\n    });\n    return button;\n  }\n  getCaption() {\n    return this.nodes.caption.innerHTML;\n  }\n  render(toolData) {\n    this.nodes.image.src = toolData.url;\n    this.nodes.image.onload = () => {\n      this.api.blocks.stretchBlock(this.blockIndex, !!toolData.stretched);\n    };\n    this.nodes.caption.innerHTML = toolData.caption;\n    if (!toolData.url) {\n      this.nodes.wrapper.classList.add('is-empty');\n    } else {\n      this.nodes.wrapper.classList.remove('is-empty');\n    }\n    return this.nodes.wrapper;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Bc3NldHMvRWRpdG9yLmpzL2pzL3BsdWdpbnMvbWVkaWFMaWJyYXJ5L3VpLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9DO0FBRXBDLE1BQU1DLFVBQVUsR0FBRztBQUNuQjtBQUNBLFFBQVE7QUFFTyxNQUFNQyxFQUFFLENBQUM7RUFDcEJDLFdBQVdBLENBQUNDLEdBQUcsRUFBRUMsWUFBWSxFQUFFO0lBQzNCLElBQUksQ0FBQ0QsR0FBRyxHQUFHQSxHQUFHO0lBQ2QsSUFBSSxDQUFDQyxZQUFZLEdBQUdBLFlBQVk7SUFDaEMsSUFBSSxDQUFDQyxLQUFLLEdBQUc7TUFDVEMsT0FBTyxFQUFFUCxnREFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLFdBQVcsRUFBRSw2QkFBNkIsQ0FBQyxFQUFFO1FBQy9EUSxlQUFlLEVBQUU7TUFDckIsQ0FBQyxDQUFDO01BQ0ZDLFVBQVUsRUFBRSxJQUFJLENBQUNDLGdCQUFnQixDQUFDLENBQUM7TUFDbkNDLEtBQUssRUFBRVgsZ0RBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO01BQ2pEWSxZQUFZLEVBQUVaLGdEQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsMkJBQTJCLENBQUMsQ0FBQztNQUN4RGEsSUFBSSxFQUFFYixnREFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLG9CQUFvQixDQUFDLENBQUM7TUFDekNjLE9BQU8sRUFBRWQsZ0RBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxXQUFXLEVBQUUsb0JBQW9CLENBQUM7SUFDNUQsQ0FBQztJQUVELElBQUksQ0FBQ00sS0FBSyxDQUFDQyxPQUFPLENBQUNRLE9BQU8sQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7SUFFckQsSUFBSSxDQUFDVixLQUFLLENBQUNNLFlBQVksQ0FBQ0ssV0FBVyxDQUFDLElBQUksQ0FBQ1gsS0FBSyxDQUFDSyxLQUFLLENBQUM7SUFDckQsSUFBSSxDQUFDTCxLQUFLLENBQUNPLElBQUksQ0FBQ0ksV0FBVyxDQUFDLElBQUksQ0FBQ1gsS0FBSyxDQUFDTSxZQUFZLENBQUM7SUFDcEQsSUFBSSxDQUFDTixLQUFLLENBQUNPLElBQUksQ0FBQ0ksV0FBVyxDQUFDLElBQUksQ0FBQ1gsS0FBSyxDQUFDQyxPQUFPLENBQUM7SUFDL0MsSUFBSSxDQUFDRCxLQUFLLENBQUNRLE9BQU8sQ0FBQ0csV0FBVyxDQUFDLElBQUksQ0FBQ1gsS0FBSyxDQUFDTyxJQUFJLENBQUM7SUFFL0MsSUFBSSxDQUFDUCxLQUFLLENBQUNRLE9BQU8sQ0FBQ0csV0FBVyxDQUFDLElBQUksQ0FBQ1gsS0FBSyxDQUFDRyxVQUFVLENBQUM7SUFFckQsSUFBSSxDQUFDUyxVQUFVLEdBQUcsSUFBSSxDQUFDZCxHQUFHLENBQUNlLE1BQU0sQ0FBQ0Msb0JBQW9CLENBQUMsQ0FBQyxHQUFHLENBQUM7RUFDaEU7RUFFQVYsZ0JBQWdCQSxDQUFBLEVBQUc7SUFDZixJQUFJVyxNQUFNLEdBQUdyQixnREFBSSxDQUFDLEtBQUssRUFBRSxDQUNyQixJQUFJLENBQUNJLEdBQUcsQ0FBQ2tCLE1BQU0sQ0FBQ0QsTUFBTSxFQUN0QixpQ0FBaUMsQ0FDcEMsQ0FBQztJQUVGQSxNQUFNLENBQUNFLFNBQVMsR0FBRyxHQUFHdEIsVUFBVSxrQkFBa0I7SUFFbERvQixNQUFNLENBQUNHLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxNQUFNO01BQ25DLElBQUksQ0FBQ25CLFlBQVksQ0FBQyxDQUFDO0lBQ3ZCLENBQUMsQ0FBQztJQUVGLE9BQU9nQixNQUFNO0VBQ2pCO0VBRUFJLFVBQVVBLENBQUEsRUFBRztJQUNULE9BQU8sSUFBSSxDQUFDbkIsS0FBSyxDQUFDQyxPQUFPLENBQUNnQixTQUFTO0VBQ3ZDO0VBRUFHLE1BQU1BLENBQUNDLFFBQVEsRUFBRTtJQUNiLElBQUksQ0FBQ3JCLEtBQUssQ0FBQ0ssS0FBSyxDQUFDaUIsR0FBRyxHQUFHRCxRQUFRLENBQUNFLEdBQUc7SUFDbkMsSUFBSSxDQUFDdkIsS0FBSyxDQUFDSyxLQUFLLENBQUNtQixNQUFNLEdBQUcsTUFBTTtNQUM1QixJQUFJLENBQUMxQixHQUFHLENBQUNlLE1BQU0sQ0FBQ1ksWUFBWSxDQUFDLElBQUksQ0FBQ2IsVUFBVSxFQUFFLENBQUMsQ0FBQ1MsUUFBUSxDQUFDSyxTQUFTLENBQUM7SUFDdkUsQ0FBQztJQUVELElBQUksQ0FBQzFCLEtBQUssQ0FBQ0MsT0FBTyxDQUFDZ0IsU0FBUyxHQUFHSSxRQUFRLENBQUNwQixPQUFPO0lBRS9DLElBQUksQ0FBQ29CLFFBQVEsQ0FBQ0UsR0FBRyxFQUFFO01BQ2YsSUFBSSxDQUFDdkIsS0FBSyxDQUFDUSxPQUFPLENBQUNtQixTQUFTLENBQUNDLEdBQUcsQ0FBQyxVQUFVLENBQUM7SUFDaEQsQ0FBQyxNQUFNO01BQ0gsSUFBSSxDQUFDNUIsS0FBSyxDQUFDUSxPQUFPLENBQUNtQixTQUFTLENBQUNFLE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDbkQ7SUFFQSxPQUFPLElBQUksQ0FBQzdCLEtBQUssQ0FBQ1EsT0FBTztFQUM3QjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vQXNzZXRzL0VkaXRvci5qcy9qcy9wbHVnaW5zL21lZGlhTGlicmFyeS91aS5qcz8xZTA3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1ha2UgfSBmcm9tICcuLi91dGlscy9kb20nO1xyXG5cclxuY29uc3QgYnV0dG9uSWNvbiA9IGA8c3ZnIHdpZHRoPVwiMjBcIiBoZWlnaHQ9XCIyMFwiIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XHJcbiAgICA8cGF0aCBkID0gXCJNMy4xNSAxMy42MjhBNy43NDkgNy43NDkgMCAwIDAgMTAgMTcuNzVhNy43NCA3Ljc0IDAgMCAwIDYuMzA1LTMuMjQybC0yLjM4Ny0yLjEyNy0yLjc2NSAyLjI0NC00LjM4OS00LjQ5Ni0zLjYxNCAzLjV6bS0uNzg3LTIuMzAzbDQuNDQ2LTQuMzcxIDQuNTIgNC42MyAyLjUzNC0yLjA1NyAzLjUzMyAyLjc5N2MuMjMtLjczNC4zNTQtMS41MTQuMzU0LTIuMzI0YTcuNzUgNy43NSAwIDEgMC0xNS4zODcgMS4zMjV6TTEwIDIwQzQuNDc3IDIwIDAgMTUuNTIzIDAgMTBTNC40NzcgMCAxMCAwczEwIDQuNDc3IDEwIDEwLTQuNDc3IDEwLTEwIDEwelwiIC8+XHJcbjwvc3ZnID5gO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVWkge1xyXG4gICAgY29uc3RydWN0b3IoYXBpLCBvblNlbGVjdEZpbGUpIHtcclxuICAgICAgICB0aGlzLmFwaSA9IGFwaTtcclxuICAgICAgICB0aGlzLm9uU2VsZWN0RmlsZSA9IG9uU2VsZWN0RmlsZTtcclxuICAgICAgICB0aGlzLm5vZGVzID0ge1xyXG4gICAgICAgICAgICBjYXB0aW9uOiBtYWtlKCdkaXYnLCBbJ2NkeC1pbnB1dCcsICdtZWRpYS1saWJyYXJ5LWl0ZW1fX2NhcHRpb24nXSwge1xyXG4gICAgICAgICAgICAgICAgY29udGVudEVkaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgZmlsZUJ1dHRvbjogdGhpcy5jcmVhdGVGaWxlQnV0dG9uKCksXHJcbiAgICAgICAgICAgIGltYWdlOiBtYWtlKCdpbWcnLCBbJ21lZGlhLWxpYnJhcnktaXRlbV9faW1hZ2UnXSksXHJcbiAgICAgICAgICAgIGltYWdlV3JhcHBlcjogbWFrZSgnZGl2JywgWydtZWRpYS1saWJyYXJ5LWl0ZW1fX2ltYWdlJ10pLFxyXG4gICAgICAgICAgICBpdGVtOiBtYWtlKCdkaXYnLCBbJ21lZGlhLWxpYnJhcnktaXRlbSddKSxcclxuICAgICAgICAgICAgd3JhcHBlcjogbWFrZSgnZGl2JywgWydjZHgtYmxvY2snLCAnbWVkaWEtbGlicmFyeS10b29sJ10pLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMubm9kZXMuY2FwdGlvbi5kYXRhc2V0LnBsYWNlaG9sZGVyID0gJ0NhcHRpb24uLi4nO1xyXG5cclxuICAgICAgICB0aGlzLm5vZGVzLmltYWdlV3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLmltYWdlKTtcclxuICAgICAgICB0aGlzLm5vZGVzLml0ZW0uYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5pbWFnZVdyYXBwZXIpO1xyXG4gICAgICAgIHRoaXMubm9kZXMuaXRlbS5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLmNhcHRpb24pO1xyXG4gICAgICAgIHRoaXMubm9kZXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLml0ZW0pO1xyXG5cclxuICAgICAgICB0aGlzLm5vZGVzLndyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5maWxlQnV0dG9uKTtcclxuXHJcbiAgICAgICAgdGhpcy5ibG9ja0luZGV4ID0gdGhpcy5hcGkuYmxvY2tzLmdldEN1cnJlbnRCbG9ja0luZGV4KCkgKyAxO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUZpbGVCdXR0b24oKSB7XHJcbiAgICAgICAgbGV0IGJ1dHRvbiA9IG1ha2UoJ2RpdicsIFtcclxuICAgICAgICAgICAgdGhpcy5hcGkuc3R5bGVzLmJ1dHRvbixcclxuICAgICAgICAgICAgJ21lZGlhLWxpYnJhcnktdG9vbF9fc2VsZWN0LWZpbGUnLFxyXG4gICAgICAgIF0pO1xyXG5cclxuICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gYCR7YnV0dG9uSWNvbn0gU2VsZWN0IGFuIEltYWdlYDtcclxuXHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9uU2VsZWN0RmlsZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gYnV0dG9uO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENhcHRpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZXMuY2FwdGlvbi5pbm5lckhUTUw7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKHRvb2xEYXRhKSB7XHJcbiAgICAgICAgdGhpcy5ub2Rlcy5pbWFnZS5zcmMgPSB0b29sRGF0YS51cmw7XHJcbiAgICAgICAgdGhpcy5ub2Rlcy5pbWFnZS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBpLmJsb2Nrcy5zdHJldGNoQmxvY2sodGhpcy5ibG9ja0luZGV4LCAhIXRvb2xEYXRhLnN0cmV0Y2hlZCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5ub2Rlcy5jYXB0aW9uLmlubmVySFRNTCA9IHRvb2xEYXRhLmNhcHRpb247XHJcblxyXG4gICAgICAgIGlmICghdG9vbERhdGEudXJsKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKCdpcy1lbXB0eScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKCdpcy1lbXB0eScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZXMud3JhcHBlcjtcclxuICAgIH1cclxufVxyXG4iXSwibmFtZXMiOlsibWFrZSIsImJ1dHRvbkljb24iLCJVaSIsImNvbnN0cnVjdG9yIiwiYXBpIiwib25TZWxlY3RGaWxlIiwibm9kZXMiLCJjYXB0aW9uIiwiY29udGVudEVkaXRhYmxlIiwiZmlsZUJ1dHRvbiIsImNyZWF0ZUZpbGVCdXR0b24iLCJpbWFnZSIsImltYWdlV3JhcHBlciIsIml0ZW0iLCJ3cmFwcGVyIiwiZGF0YXNldCIsInBsYWNlaG9sZGVyIiwiYXBwZW5kQ2hpbGQiLCJibG9ja0luZGV4IiwiYmxvY2tzIiwiZ2V0Q3VycmVudEJsb2NrSW5kZXgiLCJidXR0b24iLCJzdHlsZXMiLCJpbm5lckhUTUwiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0Q2FwdGlvbiIsInJlbmRlciIsInRvb2xEYXRhIiwic3JjIiwidXJsIiwib25sb2FkIiwic3RyZXRjaEJsb2NrIiwic3RyZXRjaGVkIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Assets/Editor.js/js/plugins/mediaLibrary/ui.js\n");

/***/ }),

/***/ "./Assets/Editor.js/js/plugins/text-size/index.js":
/*!********************************************************!*\
  !*** ./Assets/Editor.js/js/plugins/text-size/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\r\n * Build styles\r\n */\n(__webpack_require__(/*! ./index.css */ \"./Assets/Editor.js/js/plugins/text-size/index.css\").toString)();\n//import ToolboxIcon from './svg/icon.svg';\nvar ToolboxIcon = \"\";\n\n/**\r\n * Font size +10% Tool for the Editor.js\r\n *\r\n * Allows to wrap inline fragment and style it somehow.\r\n */\nclass ChangeFontSize {\n  /**\r\n   */\n  constructor({\n    config,\n    api\n  }) {\n    this.api = api;\n\n    /**\r\n     * Toolbar Button\r\n     *\r\n     * @type {HTMLElement|null}\r\n     */\n    this.button = null;\n\n    /**\r\n     * Tag represented the term\r\n     *\r\n     * @type {string}\r\n     */\n    this.tag = 'SPAN';\n\n    /**\r\n     * CSS classes\r\n     */\n    this.iconClasses = {\n      base: this.api.styles.inlineToolButton,\n      active: this.api.styles.inlineToolButtonActive\n    };\n    this.cssClass = config.cssClass;\n    this.buttonText = config.buttonText || \"\";\n    this.buttonIcon = config.buttonIcon || \"\";\n  }\n\n  /**\r\n   * Specifies Tool as Inline Toolbar Tool\r\n   *\r\n   * @return {boolean}\r\n   */\n  static get isInline() {\n    return true;\n  }\n\n  /**\r\n   * Create button element for Toolbar\r\n   *\r\n   * @return {HTMLElement}\r\n   */\n  render() {\n    this.button = document.createElement('button');\n    this.button.type = 'button';\n    this.button.classList.add(this.iconClasses.base);\n    if (this.buttonIcon) {\n      this.button.innerHTML = this.buttonIcon;\n    } else if (this.buttonText) {\n      this.button.textContent = this.buttonText;\n      this.button.classList.add(\"cfs-button-text\");\n    } else {\n      this.button.innerHTML = ToolboxIcon;\n    }\n    return this.button;\n  }\n\n  /**\r\n   * Wrap/Unwrap selected fragment\r\n   *\r\n   * @param {Range} range - selected fragment\r\n   */\n  surround(range) {\n    if (!range) {\n      return;\n    }\n    let termWrapper = this.api.selection.findParentTag(this.tag, this.cssClass);\n\n    /**\r\n     * If start or end of selection is in the highlighted block\r\n     */\n    if (termWrapper) {\n      this.unwrap(termWrapper);\n    } else {\n      this.wrap(range);\n    }\n  }\n\n  /**\r\n   * Wrap selection with term-tag\r\n   *\r\n   * @param {Range} range - selected fragment\r\n   */\n  wrap(range) {\n    /**\r\n     * Create a wrapper for highlighting\r\n     */\n    let span = document.createElement(this.tag);\n    span.classList.add(this.cssClass);\n\n    /**\r\n     * SurroundContent throws an error if the Range splits a non-Text node with only one of its boundary points\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Range/surroundContents}\r\n     *\r\n     * // range.surroundContents(span);\r\n     */\n    span.appendChild(range.extractContents());\n    range.insertNode(span);\n\n    /**\r\n     * Expand (add) selection to highlighted block\r\n     */\n    this.api.selection.expandToTag(span);\n  }\n\n  /**\r\n   * Unwrap term-tag\r\n   *\r\n   * @param {HTMLElement} termWrapper - term wrapper tag\r\n   */\n  unwrap(termWrapper) {\n    /**\r\n     * Expand selection to all term-tag\r\n     */\n    this.api.selection.expandToTag(termWrapper);\n    let sel = window.getSelection();\n    let range = sel.getRangeAt(0);\n    let unwrappedContent = range.extractContents();\n\n    /**\r\n     * Remove empty term-tag\r\n     */\n    termWrapper.parentNode.removeChild(termWrapper);\n\n    /**\r\n     * Insert extracted content\r\n     */\n    range.insertNode(unwrappedContent);\n\n    /**\r\n     * Restore selection\r\n     */\n    sel.removeAllRanges();\n    sel.addRange(range);\n  }\n\n  /**\r\n   * Check and change Term's state for current selection\r\n   */\n  checkState() {\n    const termTag = this.api.selection.findParentTag(this.tag, this.cssClass);\n    this.button.classList.toggle(this.iconClasses.active, !!termTag);\n  }\n\n  /**\r\n   * Sanitizer rule\r\n   * @return {{span: {class: string}}}\r\n   */\n  static get sanitize() {\n    return {\n      span: function (el) {\n        if (el.classList.length > 0) {\n          return {\n            class: true\n          };\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n} // end class\nmodule.exports = ChangeFontSize;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Assets/Editor.js/js/plugins/text-size/index.js\n");

/***/ }),

/***/ "./Assets/Editor.js/js/plugins/utils/dom.js":
/*!**************************************************!*\
  !*** ./Assets/Editor.js/js/plugins/utils/dom.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   make: () => (/* binding */ make)\n/* harmony export */ });\nconst make = function make(tagName, classNames = null, attributes = {}) {\n  let el = document.createElement(tagName);\n  if (Array.isArray(classNames)) {\n    el.classList.add(...classNames);\n  } else if (classNames) {\n    el.classList.add(classNames);\n  }\n  for (let attrName in attributes) {\n    el[attrName] = attributes[attrName];\n  }\n  return el;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Bc3NldHMvRWRpdG9yLmpzL2pzL3BsdWdpbnMvdXRpbHMvZG9tLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxJQUFJLEdBQUcsU0FBU0EsSUFBSUEsQ0FBQ0MsT0FBTyxFQUFFQyxVQUFVLEdBQUcsSUFBSSxFQUFFQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDM0UsSUFBSUMsRUFBRSxHQUFHQyxRQUFRLENBQUNDLGFBQWEsQ0FBQ0wsT0FBTyxDQUFDO0VBRXhDLElBQUlNLEtBQUssQ0FBQ0MsT0FBTyxDQUFDTixVQUFVLENBQUMsRUFBRTtJQUMzQkUsRUFBRSxDQUFDSyxTQUFTLENBQUNDLEdBQUcsQ0FBQyxHQUFHUixVQUFVLENBQUM7RUFDbkMsQ0FBQyxNQUFNLElBQUlBLFVBQVUsRUFBRTtJQUNuQkUsRUFBRSxDQUFDSyxTQUFTLENBQUNDLEdBQUcsQ0FBQ1IsVUFBVSxDQUFDO0VBQ2hDO0VBRUEsS0FBSyxJQUFJUyxRQUFRLElBQUlSLFVBQVUsRUFBRTtJQUM3QkMsRUFBRSxDQUFDTyxRQUFRLENBQUMsR0FBR1IsVUFBVSxDQUFDUSxRQUFRLENBQUM7RUFDdkM7RUFFQSxPQUFPUCxFQUFFO0FBQ2IsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL0Fzc2V0cy9FZGl0b3IuanMvanMvcGx1Z2lucy91dGlscy9kb20uanM/OTFhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgbWFrZSA9IGZ1bmN0aW9uIG1ha2UodGFnTmFtZSwgY2xhc3NOYW1lcyA9IG51bGwsIGF0dHJpYnV0ZXMgPSB7fSkge1xyXG4gICAgbGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcclxuXHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjbGFzc05hbWVzKSkge1xyXG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NOYW1lcyk7XHJcbiAgICB9IGVsc2UgaWYgKGNsYXNzTmFtZXMpIHtcclxuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGF0dHJOYW1lIGluIGF0dHJpYnV0ZXMpIHtcclxuICAgICAgICBlbFthdHRyTmFtZV0gPSBhdHRyaWJ1dGVzW2F0dHJOYW1lXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZWw7XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJtYWtlIiwidGFnTmFtZSIsImNsYXNzTmFtZXMiLCJhdHRyaWJ1dGVzIiwiZWwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJBcnJheSIsImlzQXJyYXkiLCJjbGFzc0xpc3QiLCJhZGQiLCJhdHRyTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./Assets/Editor.js/js/plugins/utils/dom.js\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./Assets/Editor.js/js/plugins/link/index.css":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./Assets/Editor.js/js/plugins/link/index.css ***!
  \*********************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ \"./node_modules/css-loader/dist/runtime/sourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.link-tool-editor {\n  display: none;\n  width: 280px;\n}\n\n.link-tool-editor--active {\n  display: block;\n}\n\n.link-tool-editor__content-items {\n  list-style: none;\n  margin-bottom: 0 !important;\n  padding: 8px;\n  width: 100%;\n  font-size: 13px;\n}\n\n.link-tool-editor__content-items:empty {\n  padding: 0;\n}\n\n.link-tool-editor__content-items li {\n  margin-bottom: 8px;\n  max-width: 100%;\n}\n\n.link-tool-editor__content-items li:last-child {\n  margin-bottom: 0;\n}\n\n.link-tool-editor__content-items li button {\n  overflow: hidden;\n  padding: 0;\n  width: 100%;\n  background-color: transparent;\n  border: 0;\n  outline: 0;\n  text-align: left;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  cursor: pointer;\n}\n\n.link-tool-editor__content-items li button:focus,\n.link-tool-editor__content-items li button:hover {\n  color: #a8d6ff;\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./Assets/Editor.js/js/plugins/link/index.css\"],\"names\":[],\"mappings\":\"AAAA;EACI,aAAA;EACA,YAAA;AACJ;;AAEA;EACI,cAAA;AACJ;;AAEI;EACI,gBAAA;EACA,2BAAA;EACA,YAAA;EACA,WAAA;EAEA,eAAA;AAAR;;AAGI;EACI,UAAA;AAAR;;AAGQ;EACI,kBAAA;EACA,eAAA;AAAZ;;AAGQ;EACI,gBAAA;AAAZ;;AAGY;EACI,gBAAA;EACA,UAAA;EACA,WAAA;EAEA,6BAAA;EACA,SAAA;EACA,UAAA;EAEA,gBAAA;EACA,uBAAA;EACA,mBAAA;EAEA,eAAA;AAHhB;;AAMY;;EAEI,cAAA;AAHhB\",\"sourcesContent\":[\".link-tool-editor {\\r\\n    display: none;\\r\\n    width: 280px;\\r\\n}\\r\\n\\r\\n.link-tool-editor--active {\\r\\n    display: block;\\r\\n}\\r\\n\\r\\n    .link-tool-editor__content-items {\\r\\n        list-style: none;\\r\\n        margin-bottom: 0!important;\\r\\n        padding: 8px;\\r\\n        width: 100%;\\r\\n\\r\\n        font-size: 13px;\\r\\n    }\\r\\n\\r\\n    .link-tool-editor__content-items:empty {\\r\\n        padding: 0;\\r\\n    }\\r\\n\\r\\n        .link-tool-editor__content-items li {\\r\\n            margin-bottom: 8px;\\r\\n            max-width: 100%;\\r\\n        }\\r\\n\\r\\n        .link-tool-editor__content-items li:last-child {\\r\\n            margin-bottom: 0;\\r\\n        }\\r\\n\\r\\n            .link-tool-editor__content-items li button {\\r\\n                overflow: hidden;\\r\\n                padding: 0;\\r\\n                width: 100%;\\r\\n\\r\\n                background-color: transparent;\\r\\n                border: 0;\\r\\n                outline: 0;\\r\\n                \\r\\n                text-align: left;\\r\\n                text-overflow: ellipsis;\\r\\n                white-space: nowrap;\\r\\n\\r\\n                cursor: pointer;\\r\\n            }\\r\\n\\r\\n            .link-tool-editor__content-items li button:focus,\\r\\n            .link-tool-editor__content-items li button:hover {\\r\\n                color: #a8d6ff;\\r\\n            }\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0Fzc2V0cy9FZGl0b3IuanMvanMvcGx1Z2lucy9saW5rL2luZGV4LmNzcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ3NIO0FBQ2pCO0FBQ3JHLDhCQUE4QixtRkFBMkIsQ0FBQyw0RkFBcUM7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxPQUFPLDZHQUE2RyxVQUFVLFVBQVUsTUFBTSxLQUFLLFVBQVUsTUFBTSxLQUFLLFdBQVcsV0FBVyxVQUFVLFVBQVUsVUFBVSxNQUFNLEtBQUssVUFBVSxNQUFNLEtBQUssV0FBVyxVQUFVLE1BQU0sS0FBSyxXQUFXLE1BQU0sS0FBSyxXQUFXLFVBQVUsVUFBVSxXQUFXLFVBQVUsVUFBVSxXQUFXLFdBQVcsV0FBVyxVQUFVLE9BQU8sTUFBTSxVQUFVLDZDQUE2QyxzQkFBc0IscUJBQXFCLEtBQUssbUNBQW1DLHVCQUF1QixLQUFLLDhDQUE4Qyw2QkFBNkIsdUNBQXVDLHlCQUF5Qix3QkFBd0IsZ0NBQWdDLFNBQVMsb0RBQW9ELHVCQUF1QixTQUFTLHFEQUFxRCxtQ0FBbUMsZ0NBQWdDLGFBQWEsZ0VBQWdFLGlDQUFpQyxhQUFhLGdFQUFnRSxxQ0FBcUMsK0JBQStCLGdDQUFnQyxzREFBc0QsOEJBQThCLCtCQUErQix5REFBeUQsNENBQTRDLHdDQUF3Qyx3Q0FBd0MsaUJBQWlCLHVJQUF1SSxtQ0FBbUMsaUJBQWlCLG1CQUFtQjtBQUM3d0Q7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL0Fzc2V0cy9FZGl0b3IuanMvanMvcGx1Z2lucy9saW5rL2luZGV4LmNzcz9lNTEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAubGluay10b29sLWVkaXRvciB7XG4gIGRpc3BsYXk6IG5vbmU7XG4gIHdpZHRoOiAyODBweDtcbn1cblxuLmxpbmstdG9vbC1lZGl0b3ItLWFjdGl2ZSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4ubGluay10b29sLWVkaXRvcl9fY29udGVudC1pdGVtcyB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG1hcmdpbi1ib3R0b206IDAgIWltcG9ydGFudDtcbiAgcGFkZGluZzogOHB4O1xuICB3aWR0aDogMTAwJTtcbiAgZm9udC1zaXplOiAxM3B4O1xufVxuXG4ubGluay10b29sLWVkaXRvcl9fY29udGVudC1pdGVtczplbXB0eSB7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi5saW5rLXRvb2wtZWRpdG9yX19jb250ZW50LWl0ZW1zIGxpIHtcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xuICBtYXgtd2lkdGg6IDEwMCU7XG59XG5cbi5saW5rLXRvb2wtZWRpdG9yX19jb250ZW50LWl0ZW1zIGxpOmxhc3QtY2hpbGQge1xuICBtYXJnaW4tYm90dG9tOiAwO1xufVxuXG4ubGluay10b29sLWVkaXRvcl9fY29udGVudC1pdGVtcyBsaSBidXR0b24ge1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBwYWRkaW5nOiAwO1xuICB3aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIGJvcmRlcjogMDtcbiAgb3V0bGluZTogMDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmxpbmstdG9vbC1lZGl0b3JfX2NvbnRlbnQtaXRlbXMgbGkgYnV0dG9uOmZvY3VzLFxuLmxpbmstdG9vbC1lZGl0b3JfX2NvbnRlbnQtaXRlbXMgbGkgYnV0dG9uOmhvdmVyIHtcbiAgY29sb3I6ICNhOGQ2ZmY7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9Bc3NldHMvRWRpdG9yLmpzL2pzL3BsdWdpbnMvbGluay9pbmRleC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDSSxhQUFBO0VBQ0EsWUFBQTtBQUNKOztBQUVBO0VBQ0ksY0FBQTtBQUNKOztBQUVJO0VBQ0ksZ0JBQUE7RUFDQSwyQkFBQTtFQUNBLFlBQUE7RUFDQSxXQUFBO0VBRUEsZUFBQTtBQUFSOztBQUdJO0VBQ0ksVUFBQTtBQUFSOztBQUdRO0VBQ0ksa0JBQUE7RUFDQSxlQUFBO0FBQVo7O0FBR1E7RUFDSSxnQkFBQTtBQUFaOztBQUdZO0VBQ0ksZ0JBQUE7RUFDQSxVQUFBO0VBQ0EsV0FBQTtFQUVBLDZCQUFBO0VBQ0EsU0FBQTtFQUNBLFVBQUE7RUFFQSxnQkFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7RUFFQSxlQUFBO0FBSGhCOztBQU1ZOztFQUVJLGNBQUE7QUFIaEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmxpbmstdG9vbC1lZGl0b3Ige1xcclxcbiAgICBkaXNwbGF5OiBub25lO1xcclxcbiAgICB3aWR0aDogMjgwcHg7XFxyXFxufVxcclxcblxcclxcbi5saW5rLXRvb2wtZWRpdG9yLS1hY3RpdmUge1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG59XFxyXFxuXFxyXFxuICAgIC5saW5rLXRvb2wtZWRpdG9yX19jb250ZW50LWl0ZW1zIHtcXHJcXG4gICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxyXFxuICAgICAgICBtYXJnaW4tYm90dG9tOiAwIWltcG9ydGFudDtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDhweDtcXHJcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcclxcblxcclxcbiAgICAgICAgZm9udC1zaXplOiAxM3B4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5saW5rLXRvb2wtZWRpdG9yX19jb250ZW50LWl0ZW1zOmVtcHR5IHtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5saW5rLXRvb2wtZWRpdG9yX19jb250ZW50LWl0ZW1zIGxpIHtcXHJcXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA4cHg7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgLmxpbmstdG9vbC1lZGl0b3JfX2NvbnRlbnQtaXRlbXMgbGk6bGFzdC1jaGlsZCB7XFxyXFxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICAubGluay10b29sLWVkaXRvcl9fY29udGVudC1pdGVtcyBsaSBidXR0b24ge1xcclxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xcclxcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuICAgICAgICAgICAgICAgIGJvcmRlcjogMDtcXHJcXG4gICAgICAgICAgICAgICAgb3V0bGluZTogMDtcXHJcXG4gICAgICAgICAgICAgICAgXFxyXFxuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxuICAgICAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcclxcbiAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcclxcblxcclxcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgICAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgICAgIC5saW5rLXRvb2wtZWRpdG9yX19jb250ZW50LWl0ZW1zIGxpIGJ1dHRvbjpmb2N1cyxcXHJcXG4gICAgICAgICAgICAubGluay10b29sLWVkaXRvcl9fY29udGVudC1pdGVtcyBsaSBidXR0b246aG92ZXIge1xcclxcbiAgICAgICAgICAgICAgICBjb2xvcjogI2E4ZDZmZjtcXHJcXG4gICAgICAgICAgICB9XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./Assets/Editor.js/js/plugins/link/index.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./Assets/Editor.js/js/plugins/mediaLibrary/index.css":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./Assets/Editor.js/js/plugins/mediaLibrary/index.css ***!
  \*****************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ \"./node_modules/css-loader/dist/runtime/sourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.media-library-tool {\n  margin-bottom: 10px;\n  max-width: 100%;\n}\n\n.media-library-tool__select-file {\n  display: none;\n}\n\n.is-empty .media-library-tool__select-file {\n  display: block;\n}\n\n.media-library-item {\n  display: block;\n}\n\n.is-empty .media-library-item {\n  display: none;\n}\n\n.media-library-item__image {\n  border-radius: 3px;\n  margin-bottom: 10px;\n  max-width: 100%;\n}\n\n.media-library-item__image img {\n  display: block;\n  max-width: 100%;\n}\n\n.media-library-item__caption[contentEditable=true][data-placeholder]::before {\n  position: absolute;\n  content: attr(data-placeholder);\n  color: #707684;\n  font-weight: normal;\n  opacity: 0;\n}\n\n.media-library-item__caption[contentEditable=true][data-placeholder]:empty::before {\n  opacity: 1;\n}\n\n.media-library-item__caption[contentEditable=true][data-placeholder]:empty:focus::before {\n  opacity: 0;\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./Assets/Editor.js/js/plugins/mediaLibrary/index.css\"],\"names\":[],\"mappings\":\"AAAA;EACI,mBAAA;EACA,eAAA;AACJ;;AAEI;EACI,aAAA;AACR;;AAEI;EACI,cAAA;AACR;;AAEA;EACI,cAAA;AACJ;;AAEA;EACI,aAAA;AACJ;;AAEI;EACI,kBAAA;EACA,mBAAA;EACA,eAAA;AACR;;AAEQ;EACI,cAAA;EACA,eAAA;AACZ;;AAGQ;EACI,kBAAA;EACA,+BAAA;EACA,cAAA;EACA,mBAAA;EACA,UAAA;AAAZ;;AAGQ;EACI,UAAA;AAAZ;;AAGQ;EACI,UAAA;AAAZ\",\"sourcesContent\":[\".media-library-tool {\\r\\n    margin-bottom: 10px;\\r\\n    max-width: 100%;\\r\\n}\\r\\n\\r\\n    .media-library-tool__select-file {\\r\\n        display: none;\\r\\n    }\\r\\n\\r\\n    .is-empty .media-library-tool__select-file {\\r\\n        display: block;\\r\\n    }\\r\\n\\r\\n.media-library-item {\\r\\n    display: block;\\r\\n}\\r\\n\\r\\n.is-empty .media-library-item {\\r\\n    display: none;\\r\\n}\\r\\n\\r\\n    .media-library-item__image {\\r\\n        border-radius: 3px;\\r\\n        margin-bottom: 10px;\\r\\n        max-width: 100%;\\r\\n    }\\r\\n\\r\\n        .media-library-item__image img {\\r\\n            display: block;\\r\\n            max-width: 100%;\\r\\n        }\\r\\n\\r\\n\\r\\n        .media-library-item__caption[contentEditable=true][data-placeholder]::before {\\r\\n            position: absolute;\\r\\n            content: attr(data-placeholder);\\r\\n            color: #707684;\\r\\n            font-weight: normal;\\r\\n            opacity: 0;\\r\\n        }\\r\\n        \\r\\n        .media-library-item__caption[contentEditable=true][data-placeholder]:empty::before {\\r\\n            opacity: 1;\\r\\n        }\\r\\n        \\r\\n        .media-library-item__caption[contentEditable=true][data-placeholder]:empty:focus::before {\\r\\n            opacity: 0;\\r\\n        }\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0Fzc2V0cy9FZGl0b3IuanMvanMvcGx1Z2lucy9tZWRpYUxpYnJhcnkvaW5kZXguY3NzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDc0g7QUFDakI7QUFDckcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQyxPQUFPLHFIQUFxSCxXQUFXLFVBQVUsTUFBTSxLQUFLLFVBQVUsTUFBTSxLQUFLLFVBQVUsTUFBTSxLQUFLLFVBQVUsTUFBTSxLQUFLLFVBQVUsTUFBTSxLQUFLLFdBQVcsV0FBVyxVQUFVLE1BQU0sS0FBSyxVQUFVLFVBQVUsTUFBTSxLQUFLLFdBQVcsV0FBVyxVQUFVLFdBQVcsVUFBVSxNQUFNLEtBQUssVUFBVSxNQUFNLEtBQUssVUFBVSw4Q0FBOEMsNEJBQTRCLHdCQUF3QixLQUFLLDhDQUE4QywwQkFBMEIsU0FBUyx3REFBd0QsMkJBQTJCLFNBQVMsNkJBQTZCLHVCQUF1QixLQUFLLHVDQUF1QyxzQkFBc0IsS0FBSyx3Q0FBd0MsK0JBQStCLGdDQUFnQyw0QkFBNEIsU0FBUyxnREFBZ0QsK0JBQStCLGdDQUFnQyxhQUFhLGtHQUFrRyxtQ0FBbUMsZ0RBQWdELCtCQUErQixvQ0FBb0MsMkJBQTJCLGFBQWEsNEdBQTRHLDJCQUEyQixhQUFhLGtIQUFrSCwyQkFBMkIsYUFBYSxtQkFBbUI7QUFDbHBEO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9Bc3NldHMvRWRpdG9yLmpzL2pzL3BsdWdpbnMvbWVkaWFMaWJyYXJ5L2luZGV4LmNzcz9jOWNiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAubWVkaWEtbGlicmFyeS10b29sIHtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgbWF4LXdpZHRoOiAxMDAlO1xufVxuXG4ubWVkaWEtbGlicmFyeS10b29sX19zZWxlY3QtZmlsZSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi5pcy1lbXB0eSAubWVkaWEtbGlicmFyeS10b29sX19zZWxlY3QtZmlsZSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4ubWVkaWEtbGlicmFyeS1pdGVtIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi5pcy1lbXB0eSAubWVkaWEtbGlicmFyeS1pdGVtIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLm1lZGlhLWxpYnJhcnktaXRlbV9faW1hZ2Uge1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gIG1heC13aWR0aDogMTAwJTtcbn1cblxuLm1lZGlhLWxpYnJhcnktaXRlbV9faW1hZ2UgaW1nIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbn1cblxuLm1lZGlhLWxpYnJhcnktaXRlbV9fY2FwdGlvbltjb250ZW50RWRpdGFibGU9dHJ1ZV1bZGF0YS1wbGFjZWhvbGRlcl06OmJlZm9yZSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgY29udGVudDogYXR0cihkYXRhLXBsYWNlaG9sZGVyKTtcbiAgY29sb3I6ICM3MDc2ODQ7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIG9wYWNpdHk6IDA7XG59XG5cbi5tZWRpYS1saWJyYXJ5LWl0ZW1fX2NhcHRpb25bY29udGVudEVkaXRhYmxlPXRydWVdW2RhdGEtcGxhY2Vob2xkZXJdOmVtcHR5OjpiZWZvcmUge1xuICBvcGFjaXR5OiAxO1xufVxuXG4ubWVkaWEtbGlicmFyeS1pdGVtX19jYXB0aW9uW2NvbnRlbnRFZGl0YWJsZT10cnVlXVtkYXRhLXBsYWNlaG9sZGVyXTplbXB0eTpmb2N1czo6YmVmb3JlIHtcbiAgb3BhY2l0eTogMDtcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0Fzc2V0cy9FZGl0b3IuanMvanMvcGx1Z2lucy9tZWRpYUxpYnJhcnkvaW5kZXguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0ksbUJBQUE7RUFDQSxlQUFBO0FBQ0o7O0FBRUk7RUFDSSxhQUFBO0FBQ1I7O0FBRUk7RUFDSSxjQUFBO0FBQ1I7O0FBRUE7RUFDSSxjQUFBO0FBQ0o7O0FBRUE7RUFDSSxhQUFBO0FBQ0o7O0FBRUk7RUFDSSxrQkFBQTtFQUNBLG1CQUFBO0VBQ0EsZUFBQTtBQUNSOztBQUVRO0VBQ0ksY0FBQTtFQUNBLGVBQUE7QUFDWjs7QUFHUTtFQUNJLGtCQUFBO0VBQ0EsK0JBQUE7RUFDQSxjQUFBO0VBQ0EsbUJBQUE7RUFDQSxVQUFBO0FBQVo7O0FBR1E7RUFDSSxVQUFBO0FBQVo7O0FBR1E7RUFDSSxVQUFBO0FBQVpcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLm1lZGlhLWxpYnJhcnktdG9vbCB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxyXFxuICAgIG1heC13aWR0aDogMTAwJTtcXHJcXG59XFxyXFxuXFxyXFxuICAgIC5tZWRpYS1saWJyYXJ5LXRvb2xfX3NlbGVjdC1maWxlIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmlzLWVtcHR5IC5tZWRpYS1saWJyYXJ5LXRvb2xfX3NlbGVjdC1maWxlIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuLm1lZGlhLWxpYnJhcnktaXRlbSB7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbn1cXHJcXG5cXHJcXG4uaXMtZW1wdHkgLm1lZGlhLWxpYnJhcnktaXRlbSB7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbiAgICAubWVkaWEtbGlicmFyeS1pdGVtX19pbWFnZSB7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxyXFxuICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcclxcbiAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgICAgICAubWVkaWEtbGlicmFyeS1pdGVtX19pbWFnZSBpbWcge1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG5cXHJcXG4gICAgICAgIC5tZWRpYS1saWJyYXJ5LWl0ZW1fX2NhcHRpb25bY29udGVudEVkaXRhYmxlPXRydWVdW2RhdGEtcGxhY2Vob2xkZXJdOjpiZWZvcmUge1xcclxcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgICAgICBjb250ZW50OiBhdHRyKGRhdGEtcGxhY2Vob2xkZXIpO1xcclxcbiAgICAgICAgICAgIGNvbG9yOiAjNzA3Njg0O1xcclxcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuICAgICAgICAgICAgb3BhY2l0eTogMDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIFxcclxcbiAgICAgICAgLm1lZGlhLWxpYnJhcnktaXRlbV9fY2FwdGlvbltjb250ZW50RWRpdGFibGU9dHJ1ZV1bZGF0YS1wbGFjZWhvbGRlcl06ZW1wdHk6OmJlZm9yZSB7XFxyXFxuICAgICAgICAgICAgb3BhY2l0eTogMTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIFxcclxcbiAgICAgICAgLm1lZGlhLWxpYnJhcnktaXRlbV9fY2FwdGlvbltjb250ZW50RWRpdGFibGU9dHJ1ZV1bZGF0YS1wbGFjZWhvbGRlcl06ZW1wdHk6Zm9jdXM6OmJlZm9yZSB7XFxyXFxuICAgICAgICAgICAgb3BhY2l0eTogMDtcXHJcXG4gICAgICAgIH1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./Assets/Editor.js/js/plugins/mediaLibrary/index.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./Assets/Editor.js/js/plugins/text-size/index.css":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./Assets/Editor.js/js/plugins/text-size/index.css ***!
  \**************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ \"./node_modules/css-loader/dist/runtime/sourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.cfs-button-text {\n  font-size: 0.9em;\n  width: auto;\n}\n\n.editor-fs-0point8 {\n  font-size: 0.8em;\n}\n\n.editor-fs-0point9 {\n  font-size: 0.9em;\n}\n\n.editor-fs-1point0 {\n  font-size: 1em;\n}\n\n.editor-fs-1point1 {\n  font-size: 1.2em;\n}\n\n.editor-fs-1point2 {\n  font-size: 1.2em;\n}\n\n.editor-fs-1point3 {\n  font-size: 1.3em;\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./Assets/Editor.js/js/plugins/text-size/index.css\"],\"names\":[],\"mappings\":\"AAAA;EACI,gBAAA;EACA,WAAA;AACJ;;AAEA;EACI,gBAAA;AACJ;;AAEA;EACI,gBAAA;AACJ;;AAEA;EACI,cAAA;AACJ;;AAEA;EACI,gBAAA;AACJ;;AAEA;EACI,gBAAA;AACJ;;AAEA;EACI,gBAAA;AACJ\",\"sourcesContent\":[\".cfs-button-text {\\r\\n    font-size: 0.9em;\\r\\n    width: auto;\\r\\n}\\r\\n\\r\\n.editor-fs-0point8 {\\r\\n    font-size: 0.8em;\\r\\n}\\r\\n\\r\\n.editor-fs-0point9 {\\r\\n    font-size: 0.9em;\\r\\n}\\r\\n\\r\\n.editor-fs-1point0 {\\r\\n    font-size: 1.0em;\\r\\n}\\r\\n\\r\\n.editor-fs-1point1 {\\r\\n    font-size: 1.2em;\\r\\n}\\r\\n\\r\\n.editor-fs-1point2 {\\r\\n    font-size: 1.2em;\\r\\n}\\r\\n\\r\\n.editor-fs-1point3 {\\r\\n    font-size: 1.3em;\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0Fzc2V0cy9FZGl0b3IuanMvanMvcGx1Z2lucy90ZXh0LXNpemUvaW5kZXguY3NzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDc0g7QUFDakI7QUFDckcsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUMsT0FBTyxrSEFBa0gsV0FBVyxVQUFVLE1BQU0sS0FBSyxXQUFXLE1BQU0sS0FBSyxXQUFXLE1BQU0sS0FBSyxVQUFVLE1BQU0sS0FBSyxXQUFXLE1BQU0sS0FBSyxXQUFXLE1BQU0sS0FBSyxXQUFXLDJDQUEyQyx5QkFBeUIsb0JBQW9CLEtBQUssNEJBQTRCLHlCQUF5QixLQUFLLDRCQUE0Qix5QkFBeUIsS0FBSyw0QkFBNEIseUJBQXlCLEtBQUssNEJBQTRCLHlCQUF5QixLQUFLLDRCQUE0Qix5QkFBeUIsS0FBSyw0QkFBNEIseUJBQXlCLEtBQUssdUJBQXVCO0FBQ2x1QjtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vQXNzZXRzL0VkaXRvci5qcy9qcy9wbHVnaW5zL3RleHQtc2l6ZS9pbmRleC5jc3M/ZmE0OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLmNmcy1idXR0b24tdGV4dCB7XG4gIGZvbnQtc2l6ZTogMC45ZW07XG4gIHdpZHRoOiBhdXRvO1xufVxuXG4uZWRpdG9yLWZzLTBwb2ludDgge1xuICBmb250LXNpemU6IDAuOGVtO1xufVxuXG4uZWRpdG9yLWZzLTBwb2ludDkge1xuICBmb250LXNpemU6IDAuOWVtO1xufVxuXG4uZWRpdG9yLWZzLTFwb2ludDAge1xuICBmb250LXNpemU6IDFlbTtcbn1cblxuLmVkaXRvci1mcy0xcG9pbnQxIHtcbiAgZm9udC1zaXplOiAxLjJlbTtcbn1cblxuLmVkaXRvci1mcy0xcG9pbnQyIHtcbiAgZm9udC1zaXplOiAxLjJlbTtcbn1cblxuLmVkaXRvci1mcy0xcG9pbnQzIHtcbiAgZm9udC1zaXplOiAxLjNlbTtcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0Fzc2V0cy9FZGl0b3IuanMvanMvcGx1Z2lucy90ZXh0LXNpemUvaW5kZXguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0ksZ0JBQUE7RUFDQSxXQUFBO0FBQ0o7O0FBRUE7RUFDSSxnQkFBQTtBQUNKOztBQUVBO0VBQ0ksZ0JBQUE7QUFDSjs7QUFFQTtFQUNJLGNBQUE7QUFDSjs7QUFFQTtFQUNJLGdCQUFBO0FBQ0o7O0FBRUE7RUFDSSxnQkFBQTtBQUNKOztBQUVBO0VBQ0ksZ0JBQUE7QUFDSlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY2ZzLWJ1dHRvbi10ZXh0IHtcXHJcXG4gICAgZm9udC1zaXplOiAwLjllbTtcXHJcXG4gICAgd2lkdGg6IGF1dG87XFxyXFxufVxcclxcblxcclxcbi5lZGl0b3ItZnMtMHBvaW50OCB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMC44ZW07XFxyXFxufVxcclxcblxcclxcbi5lZGl0b3ItZnMtMHBvaW50OSB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMC45ZW07XFxyXFxufVxcclxcblxcclxcbi5lZGl0b3ItZnMtMXBvaW50MCB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMS4wZW07XFxyXFxufVxcclxcblxcclxcbi5lZGl0b3ItZnMtMXBvaW50MSB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMS4yZW07XFxyXFxufVxcclxcblxcclxcbi5lZGl0b3ItZnMtMXBvaW50MiB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMS4yZW07XFxyXFxufVxcclxcblxcclxcbi5lZGl0b3ItZnMtMXBvaW50MyB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMS4zZW07XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./Assets/Editor.js/js/plugins/text-size/index.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGNBQWM7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzP2FmMTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/sourceMaps.js\n");

/***/ }),

/***/ "./node_modules/editorjs-anchor/dist/bundle.js":
/*!*****************************************************!*\
  !*** ./node_modules/editorjs-anchor/dist/bundle.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("!function(t,e){ true?module.exports=e():0}(self,(()=>(()=>{\"use strict\";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};function n(t){return n=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},n(t)}function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,o(r.key),r)}}function o(t){var e=function(t,e){if(\"object\"!=n(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,\"string\");if(\"object\"!=n(o))return o;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return String(t)}(t);return\"symbol\"==n(e)?e:e+\"\"}t.d(e,{default:()=>a});var a=function(){return t=function t(e){var n=e.api,r=e.data;!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.api=n,this.data={anchor:void 0},r&&r.anchor&&(this.anchor=r.anchor),this._CSS={classWrapper:\"cdx-search-field\",classIcon:\"cdx-search-field__icon\",classInput:\"cdx-search-field__input\"}},n=[{key:\"isTune\",get:function(){return!0}}],(e=[{key:\"anchor\",get:function(){return this.data.anchor||\"\"},set:function(t){(t=t.replace(/[^a-z0-9_-]/gi,\"\")).length>0?this.data.anchor=t:this.data.anchor=void 0}},{key:\"render\",value:function(){var t=this,e=document.createElement(\"div\");e.classList.add(this._CSS.classWrapper);var n=document.createElement(\"div\");n.classList.add(this._CSS.classIcon),n.innerHTML='<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20px\" viewBox=\"0 -960 960 960\" width=\"20px\" fill=\"currentColor\"><path d=\"M260.85-193.63 290.07-309h-144.2l19.63-78h144.2l40.37-162h-156.2l19.63-78h156.2l35.21-139.13h78.24L447.93-627H585.7l35.21-139.13h78.24L663.93-627h150.2l-19.63 78H644.3l-40.37 162h162.2l-19.63 78H584.3l-29.21 115.37h-78.24L506.07-309H368.3l-29.21 115.37h-78.24ZM387.93-387H525.7l40.37-162H428.3l-40.37 162Z\"/></svg>';var r=document.createElement(\"input\");return r.placeholder=this.api.i18n.t(\"Anchor\"),r.classList.add(this._CSS.classInput),r.value=this.anchor,r.addEventListener(\"input\",(function(e){t.anchor=e.target.value,e.target.value=t.anchor})),e.appendChild(n),e.appendChild(r),e}},{key:\"save\",value:function(){if(this.data.anchor)return this.data}}])&&r(t.prototype,e),n&&r(t,n),Object.defineProperty(t,\"prototype\",{writable:!1}),t;var t,e,n}();return e.default})()));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZWRpdG9yanMtYW5jaG9yL2Rpc3QvYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsS0FBaUQsb0JBQW9CLENBQW1ILENBQUMsaUJBQWlCLGFBQWEsT0FBTyxVQUFVLCtEQUErRCx1QkFBdUIsRUFBRSxvREFBb0QsTUFBTSxjQUFjLGlGQUFpRixnQkFBZ0IsYUFBYSxvR0FBb0csTUFBTSxnQkFBZ0IsWUFBWSxXQUFXLEtBQUssV0FBVyxrSEFBa0gsY0FBYyxvQkFBb0IsK0JBQStCLDRCQUE0QixlQUFlLHlCQUF5QiwyQkFBMkIsb0VBQW9FLGlCQUFpQixJQUFJLDRCQUE0QixPQUFPLGNBQWMsRUFBRSxpQkFBaUIsdUJBQXVCLHFCQUFxQixlQUFlLDhFQUE4RSwrQkFBK0IsY0FBYyxnREFBZ0QseUdBQXlHLEtBQUssNEJBQTRCLFVBQVUsT0FBTyw0QkFBNEIsNEJBQTRCLGlCQUFpQix1RkFBdUYsRUFBRSw4QkFBOEIsMkNBQTJDLHdDQUF3QyxvQ0FBb0MsdWVBQXVlLHNDQUFzQyxpSkFBaUosZ0RBQWdELHdDQUF3QyxFQUFFLDRCQUE0QixzQ0FBc0Msb0VBQW9FLFlBQVksSUFBSSxVQUFVLEdBQUcsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VkaXRvcmpzLWFuY2hvci9kaXN0L2J1bmRsZS5qcz9iMzAwIl0sInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLGUpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuQW5jaG9yVHVuZT1lKCk6dC5BbmNob3JUdW5lPWUoKX0oc2VsZiwoKCk9PigoKT0+e1widXNlIHN0cmljdFwiO3ZhciB0PXtkOihlLG4pPT57Zm9yKHZhciByIGluIG4pdC5vKG4scikmJiF0Lm8oZSxyKSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUscix7ZW51bWVyYWJsZTohMCxnZXQ6bltyXX0pfSxvOih0LGUpPT5PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKX0sZT17fTtmdW5jdGlvbiBuKHQpe3JldHVybiBuPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LG4odCl9ZnVuY3Rpb24gcih0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxvKHIua2V5KSxyKX19ZnVuY3Rpb24gbyh0KXt2YXIgZT1mdW5jdGlvbih0LGUpe2lmKFwib2JqZWN0XCIhPW4odCl8fCF0KXJldHVybiB0O3ZhciByPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1yKXt2YXIgbz1yLmNhbGwodCxcInN0cmluZ1wiKTtpZihcIm9iamVjdFwiIT1uKG8pKXJldHVybiBvO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX1yZXR1cm4gU3RyaW5nKHQpfSh0KTtyZXR1cm5cInN5bWJvbFwiPT1uKGUpP2U6ZStcIlwifXQuZChlLHtkZWZhdWx0OigpPT5hfSk7dmFyIGE9ZnVuY3Rpb24oKXtyZXR1cm4gdD1mdW5jdGlvbiB0KGUpe3ZhciBuPWUuYXBpLHI9ZS5kYXRhOyFmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsdCksdGhpcy5hcGk9bix0aGlzLmRhdGE9e2FuY2hvcjp2b2lkIDB9LHImJnIuYW5jaG9yJiYodGhpcy5hbmNob3I9ci5hbmNob3IpLHRoaXMuX0NTUz17Y2xhc3NXcmFwcGVyOlwiY2R4LXNlYXJjaC1maWVsZFwiLGNsYXNzSWNvbjpcImNkeC1zZWFyY2gtZmllbGRfX2ljb25cIixjbGFzc0lucHV0OlwiY2R4LXNlYXJjaC1maWVsZF9faW5wdXRcIn19LG49W3trZXk6XCJpc1R1bmVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH19XSwoZT1be2tleTpcImFuY2hvclwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGEuYW5jaG9yfHxcIlwifSxzZXQ6ZnVuY3Rpb24odCl7KHQ9dC5yZXBsYWNlKC9bXmEtejAtOV8tXS9naSxcIlwiKSkubGVuZ3RoPjA/dGhpcy5kYXRhLmFuY2hvcj10OnRoaXMuZGF0YS5hbmNob3I9dm9pZCAwfX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7ZS5jbGFzc0xpc3QuYWRkKHRoaXMuX0NTUy5jbGFzc1dyYXBwZXIpO3ZhciBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bi5jbGFzc0xpc3QuYWRkKHRoaXMuX0NTUy5jbGFzc0ljb24pLG4uaW5uZXJIVE1MPSc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBoZWlnaHQ9XCIyMHB4XCIgdmlld0JveD1cIjAgLTk2MCA5NjAgOTYwXCIgd2lkdGg9XCIyMHB4XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiPjxwYXRoIGQ9XCJNMjYwLjg1LTE5My42MyAyOTAuMDctMzA5aC0xNDQuMmwxOS42My03OGgxNDQuMmw0MC4zNy0xNjJoLTE1Ni4ybDE5LjYzLTc4aDE1Ni4ybDM1LjIxLTEzOS4xM2g3OC4yNEw0NDcuOTMtNjI3SDU4NS43bDM1LjIxLTEzOS4xM2g3OC4yNEw2NjMuOTMtNjI3aDE1MC4ybC0xOS42MyA3OEg2NDQuM2wtNDAuMzcgMTYyaDE2Mi4ybC0xOS42MyA3OEg1ODQuM2wtMjkuMjEgMTE1LjM3aC03OC4yNEw1MDYuMDctMzA5SDM2OC4zbC0yOS4yMSAxMTUuMzdoLTc4LjI0Wk0zODcuOTMtMzg3SDUyNS43bDQwLjM3LTE2Mkg0MjguM2wtNDAuMzcgMTYyWlwiLz48L3N2Zz4nO3ZhciByPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtyZXR1cm4gci5wbGFjZWhvbGRlcj10aGlzLmFwaS5pMThuLnQoXCJBbmNob3JcIiksci5jbGFzc0xpc3QuYWRkKHRoaXMuX0NTUy5jbGFzc0lucHV0KSxyLnZhbHVlPXRoaXMuYW5jaG9yLHIuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsKGZ1bmN0aW9uKGUpe3QuYW5jaG9yPWUudGFyZ2V0LnZhbHVlLGUudGFyZ2V0LnZhbHVlPXQuYW5jaG9yfSkpLGUuYXBwZW5kQ2hpbGQobiksZS5hcHBlbmRDaGlsZChyKSxlfX0se2tleTpcInNhdmVcIix2YWx1ZTpmdW5jdGlvbigpe2lmKHRoaXMuZGF0YS5hbmNob3IpcmV0dXJuIHRoaXMuZGF0YX19XSkmJnIodC5wcm90b3R5cGUsZSksbiYmcih0LG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdDt2YXIgdCxlLG59KCk7cmV0dXJuIGUuZGVmYXVsdH0pKCkpKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/editorjs-anchor/dist/bundle.js\n");

/***/ }),

/***/ "./node_modules/editorjs-text-alignment-blocktune/dist/bundle.js":
/*!***********************************************************************!*\
  !*** ./node_modules/editorjs-text-alignment-blocktune/dist/bundle.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("!function(t,e){ true?module.exports=e():0}(self,(function(){return function(){var t={966:function(t,e,n){function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n(548).toString();var i=n(630).make,a=function(){function t(e){var n=e.api,r=e.data,i=e.config,a=e.block;!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.api=n,this.block=a,this.settings=i,this.data=r||{alignment:this.getAlignment()},this.alignmentSettings=[{name:\"left\",icon:'<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer\" enable-background=\"new 0 0 64 64\" height=\"20\" viewBox=\"0 0 64 64\" width=\"20\"><path d=\"m54 8h-44c-1.104 0-2 .896-2 2s.896 2 2 2h44c1.104 0 2-.896 2-2s-.896-2-2-2z\"/><path d=\"m54 52h-44c-1.104 0-2 .896-2 2s.896 2 2 2h44c1.104 0 2-.896 2-2s-.896-2-2-2z\"/><path d=\"m10 23h28c1.104 0 2-.896 2-2s-.896-2-2-2h-28c-1.104 0-2 .896-2 2s.896 2 2 2z\"/><path d=\"m54 30h-44c-1.104 0-2 .896-2 2s.896 2 2 2h44c1.104 0 2-.896 2-2s-.896-2-2-2z\"/><path d=\"m10 45h28c1.104 0 2-.896 2-2s-.896-2-2-2h-28c-1.104 0-2 .896-2 2s.896 2 2 2z\"/></svg>'},{name:\"center\",icon:'<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer\" enable-background=\"new 0 0 64 64\" height=\"20\" viewBox=\"0 0 64 64\" width=\"20\"><path d=\"m54 8h-44c-1.104 0-2 .896-2 2s.896 2 2 2h44c1.104 0 2-.896 2-2s-.896-2-2-2z\"/><path d=\"m54 52h-44c-1.104 0-2 .896-2 2s.896 2 2 2h44c1.104 0 2-.896 2-2s-.896-2-2-2z\"/><path d=\"m46 23c1.104 0 2-.896 2-2s-.896-2-2-2h-28c-1.104 0-2 .896-2 2s.896 2 2 2z\"/><path d=\"m54 30h-44c-1.104 0-2 .896-2 2s.896 2 2 2h44c1.104 0 2-.896 2-2s-.896-2-2-2z\"/><path d=\"m46 45c1.104 0 2-.896 2-2s-.896-2-2-2h-28c-1.104 0-2 .896-2 2s.896 2 2 2z\"/></svg>'},{name:\"right\",icon:'<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer\" enable-background=\"new 0 0 64 64\" height=\"20\" viewBox=\"0 0 64 64\" width=\"20\"><path d=\"m54 8h-44c-1.104 0-2 .896-2 2s.896 2 2 2h44c1.104 0 2-.896 2-2s-.896-2-2-2z\"/><path d=\"m54 52h-44c-1.104 0-2 .896-2 2s.896 2 2 2h44c1.104 0 2-.896 2-2s-.896-2-2-2z\"/><path d=\"m54 19h-28c-1.104 0-2 .896-2 2s.896 2 2 2h28c1.104 0 2-.896 2-2s-.896-2-2-2z\"/><path d=\"m54 30h-44c-1.104 0-2 .896-2 2s.896 2 2 2h44c1.104 0 2-.896 2-2s-.896-2-2-2z\"/><path d=\"m54 41h-28c-1.104 0-2 .896-2 2s.896 2 2 2h28c1.104 0 2-.896 2-2s-.896-2-2-2z\"/></svg>'}],this._CSS={alignment:{left:\"ce-tune-alignment--left\",center:\"ce-tune-alignment--center\",right:\"ce-tune-alignment--right\"}}}var e,n,a;return e=t,a=[{key:\"DEFAULT_ALIGNMENT\",get:function(){return\"left\"}},{key:\"isTune\",get:function(){return!0}}],(n=[{key:\"getAlignment\",value:function(){var e,n;return null!==(e=this.settings)&&void 0!==e&&e.blocks&&this.settings.blocks.hasOwnProperty(this.block.name)?this.settings.blocks[this.block.name]:null!==(n=this.settings)&&void 0!==n&&n.default?this.settings.default:t.DEFAULT_ALIGNMENT}},{key:\"wrap\",value:function(t){return this.wrapper=i(\"div\"),this.wrapper.classList.toggle(this._CSS.alignment[this.data.alignment]),this.wrapper.append(t),this.wrapper}},{key:\"render\",value:function(){var t=this,e=i(\"div\");return this.alignmentSettings.map((function(n){var r=document.createElement(\"button\");return r.classList.add(t.api.styles.settingsButton),r.innerHTML=n.icon,r.type=\"button\",r.classList.toggle(t.api.styles.settingsButtonActive,n.name===t.data.alignment),e.appendChild(r),r})).forEach((function(e,n,r){e.addEventListener(\"click\",(function(){t.data={alignment:t.alignmentSettings[n].name},r.forEach((function(e,n){var r=t.alignmentSettings[n].name;e.classList.toggle(t.api.styles.settingsButtonActive,r===t.data.alignment),t.wrapper.classList.toggle(t._CSS.alignment[r],r===t.data.alignment)}))}))})),e}},{key:\"save\",value:function(){return this.data}}])&&r(e.prototype,n),a&&r(e,a),t}();t.exports=a},630:function(t,e,n){\"use strict\";function r(t){return function(t){if(Array.isArray(t))return i(t)}(t)||function(t){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(t){if(\"string\"==typeof t)return i(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===n&&t.constructor&&(n=t.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(t):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(t,e):void 0}}(t)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function a(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=document.createElement(t);for(var o in Array.isArray(n)?(e=a.classList).add.apply(e,r(n)):n&&a.classList.add(n),i)a[o]=i[o];return a}n.r(e),n.d(e,{make:function(){return a}})},424:function(t,e,n){\"use strict\";var r=n(645),i=n.n(r)()((function(t){return t[1]}));i.push([t.id,\".ce-tune-alignment--right {\\n    text-align: right;\\n}\\n.ce-tune-alignment--center {\\n    text-align: center;\\n}\\n.ce-tune-alignment--left {\\n    text-align: left;\\n}\",\"\"]),e.Z=i},645:function(t){\"use strict\";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?\"@media \".concat(e[2],\" {\").concat(n,\"}\"):n})).join(\"\")},e.i=function(t,n,r){\"string\"==typeof t&&(t=[[null,t,\"\"]]);var i={};if(r)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);r&&i[c[0]]||(n&&(c[2]?c[2]=\"\".concat(n,\" and \").concat(c[2]):c[2]=n),e.push(c))}},e}},548:function(t,e,n){\"use strict\";var r=n(379),i=n.n(r),a=n(424);i()(a.Z,{insert:\"head\",singleton:!1}),a.Z.locals},379:function(t,e,n){\"use strict\";var r,i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),a=[];function o(t){for(var e=-1,n=0;n<a.length;n++)if(a[n].identifier===t){e=n;break}return e}function s(t,e){for(var n={},r=[],i=0;i<t.length;i++){var s=t[i],c=e.base?s[0]+e.base:s[0],u=n[c]||0,l=\"\".concat(c,\" \").concat(u);n[c]=u+1;var f=o(l),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:l,updater:g(d,e),references:1}),r.push(l)}return r}function c(t){var e=document.createElement(\"style\"),r=t.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),\"function\"==typeof t.insert)t.insert(e);else{var o=i(t.insert||\"head\");if(!o)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");o.appendChild(e)}return e}var u,l=(u=[],function(t,e){return u[t]=e,u.filter(Boolean).join(\"\\n\")});function f(t,e,n,r){var i=n?\"\":r.media?\"@media \".concat(r.media,\" {\").concat(r.css,\"}\"):r.css;if(t.styleSheet)t.styleSheet.cssText=l(e,i);else{var a=document.createTextNode(i),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(a,o[e]):t.appendChild(a)}}function d(t,e,n){var r=n.css,i=n.media,a=n.sourceMap;if(i?t.setAttribute(\"media\",i):t.removeAttribute(\"media\"),a&&\"undefined\"!=typeof btoa&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a)))),\" */\")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var h=null,p=0;function g(t,e){var n,r,i;if(e.singleton){var a=p++;n=h||(h=c(e)),r=f.bind(null,n,a,!1),i=f.bind(null,n,a,!0)}else n=c(e),r=d.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||\"boolean\"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(t=t||[],e);return function(t){if(t=t||[],\"[object Array]\"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var i=o(n[r]);a[i].references--}for(var c=s(t,e),u=0;u<n.length;u++){var l=o(n[u]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}n=c}}}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}return n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,{a:e}),e},n.d=function(t,e){for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n(966)}()}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/editorjs-text-alignment-blocktune/dist/bundle.js\n");

/***/ }),

/***/ "./node_modules/editorjs-undo/dist/bundle.js":
/*!***************************************************!*\
  !*** ./node_modules/editorjs-undo/dist/bundle.js ***!
  \***************************************************/
/***/ ((module) => {

eval("/*! For license information please see bundle.js.LICENSE.txt */\n!function(t,e){ true?module.exports=e():0}(self,(()=>(()=>{var t={917:function(t,e){var n,r;n=function(t){\"use strict\";var e=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),n=function(){function t(e){(function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")})(this,t),this.target=e,this.isContentEditable=e&&e.contentEditable}return e(t,[{key:\"getPos\",value:function(){if(document.activeElement!==this.target)return-1;if(\"true\"===this.isContentEditable){this.target.focus();var t=document.getSelection().getRangeAt(0),e=t.cloneRange();return e.selectNodeContents(this.target),e.setEnd(t.endContainer,t.endOffset),e.toString().length}return this.target.selectionStart}},{key:\"setPos\",value:function(t){if(\"true\"===this.isContentEditable){if(t>=0){var e=window.getSelection(),n=this.createRange(this.target,{count:t});n&&(n.collapse(!1),e.removeAllRanges(),e.addRange(n))}}else this.target.setSelectionRange(t,t)}},{key:\"createRange\",value:function(t,e,n){if(n||((n=document.createRange()).selectNode(t),n.setStart(t,0)),0===e.count)n.setEnd(t,e.count);else if(t&&e.count>0)if(t.nodeType===Node.TEXT_NODE)t.textContent.length<e.count?e.count-=t.textContent.length:(n.setEnd(t,e.count),e.count=0);else for(var r=0;r<t.childNodes.length&&(n=this.createRange(t.childNodes[r],e,n),0!==e.count);r++);return n}}]),t}();t.exports=n},void 0===(r=n.apply(e,[t]))||(t.exports=r)},442:(t,e,n)=>{t.exports=n(917)},633:(t,e,n)=>{var r=n(738).default;function o(){\"use strict\";t.exports=o=function(){return n},t.exports.__esModule=!0,t.exports.default=t.exports;var e,n={},i=Object.prototype,a=i.hasOwnProperty,s=Object.defineProperty||function(t,e,n){t[e]=n.value},c=\"function\"==typeof Symbol?Symbol:{},u=c.iterator||\"@@iterator\",l=c.asyncIterator||\"@@asyncIterator\",h=c.toStringTag||\"@@toStringTag\";function f(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{f({},\"\")}catch(e){f=function(t,e,n){return t[e]=n}}function d(t,e,n,r){var o=e&&e.prototype instanceof m?e:m,i=Object.create(o.prototype),a=new D(r||[]);return s(i,\"_invoke\",{value:T(t,n,a)}),i}function p(t,e,n){try{return{type:\"normal\",arg:t.call(e,n)}}catch(t){return{type:\"throw\",arg:t}}}n.wrap=d;var y=\"suspendedStart\",v=\"suspendedYield\",b=\"executing\",g=\"completed\",k={};function m(){}function x(){}function w(){}var O={};f(O,u,(function(){return this}));var E=Object.getPrototypeOf,L=E&&E(E(I([])));L&&L!==i&&a.call(L,u)&&(O=L);var S=w.prototype=m.prototype=Object.create(O);function C(t){[\"next\",\"throw\",\"return\"].forEach((function(e){f(t,e,(function(t){return this._invoke(e,t)}))}))}function j(t,e){function n(o,i,s,c){var u=p(t[o],t,i);if(\"throw\"!==u.type){var l=u.arg,h=l.value;return h&&\"object\"==r(h)&&a.call(h,\"__await\")?e.resolve(h.__await).then((function(t){n(\"next\",t,s,c)}),(function(t){n(\"throw\",t,s,c)})):e.resolve(h).then((function(t){l.value=t,s(l)}),(function(t){return n(\"throw\",t,s,c)}))}c(u.arg)}var o;s(this,\"_invoke\",{value:function(t,r){function i(){return new e((function(e,o){n(t,r,e,o)}))}return o=o?o.then(i,i):i()}})}function T(t,n,r){var o=y;return function(i,a){if(o===b)throw Error(\"Generator is already running\");if(o===g){if(\"throw\"===i)throw a;return{value:e,done:!0}}for(r.method=i,r.arg=a;;){var s=r.delegate;if(s){var c=B(s,r);if(c){if(c===k)continue;return c}}if(\"next\"===r.method)r.sent=r._sent=r.arg;else if(\"throw\"===r.method){if(o===y)throw o=g,r.arg;r.dispatchException(r.arg)}else\"return\"===r.method&&r.abrupt(\"return\",r.arg);o=b;var u=p(t,n,r);if(\"normal\"===u.type){if(o=r.done?g:v,u.arg===k)continue;return{value:u.arg,done:r.done}}\"throw\"===u.type&&(o=g,r.method=\"throw\",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,\"throw\"===r&&t.iterator.return&&(n.method=\"return\",n.arg=e,B(t,n),\"throw\"===n.method)||\"return\"!==r&&(n.method=\"throw\",n.arg=new TypeError(\"The iterator does not provide a '\"+r+\"' method\")),k;var i=p(o,t.iterator,n.arg);if(\"throw\"===i.type)return n.method=\"throw\",n.arg=i.arg,n.delegate=null,k;var a=i.arg;return a?a.done?(n[t.resultName]=a.value,n.next=t.nextLoc,\"return\"!==n.method&&(n.method=\"next\",n.arg=e),n.delegate=null,k):a:(n.method=\"throw\",n.arg=new TypeError(\"iterator result is not an object\"),n.delegate=null,k)}function _(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function P(t){var e=t.completion||{};e.type=\"normal\",delete e.arg,t.completion=e}function D(t){this.tryEntries=[{tryLoc:\"root\"}],t.forEach(_,this),this.reset(!0)}function I(t){if(t||\"\"===t){var n=t[u];if(n)return n.call(t);if(\"function\"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function n(){for(;++o<t.length;)if(a.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return i.next=i}}throw new TypeError(r(t)+\" is not iterable\")}return x.prototype=w,s(S,\"constructor\",{value:w,configurable:!0}),s(w,\"constructor\",{value:x,configurable:!0}),x.displayName=f(w,h,\"GeneratorFunction\"),n.isGeneratorFunction=function(t){var e=\"function\"==typeof t&&t.constructor;return!!e&&(e===x||\"GeneratorFunction\"===(e.displayName||e.name))},n.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,f(t,h,\"GeneratorFunction\")),t.prototype=Object.create(S),t},n.awrap=function(t){return{__await:t}},C(j.prototype),f(j.prototype,l,(function(){return this})),n.AsyncIterator=j,n.async=function(t,e,r,o,i){void 0===i&&(i=Promise);var a=new j(d(t,e,r,o),i);return n.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},C(S),f(S,h,\"Generator\"),f(S,u,(function(){return this})),f(S,\"toString\",(function(){return\"[object Generator]\"})),n.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},n.values=I,D.prototype={constructor:D,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=e,this.tryEntries.forEach(P),!t)for(var n in this)\"t\"===n.charAt(0)&&a.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if(\"throw\"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(r,o){return s.type=\"throw\",s.arg=t,n.next=r,o&&(n.method=\"next\",n.arg=e),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],s=i.completion;if(\"root\"===i.tryLoc)return r(\"end\");if(i.tryLoc<=this.prev){var c=a.call(i,\"catchLoc\"),u=a.call(i,\"finallyLoc\");if(c&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&a.call(r,\"finallyLoc\")&&this.prev<r.finallyLoc){var o=r;break}}o&&(\"break\"===t||\"continue\"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=t,i.arg=e,o?(this.method=\"next\",this.next=o.finallyLoc,k):this.complete(i)},complete:function(t,e){if(\"throw\"===t.type)throw t.arg;return\"break\"===t.type||\"continue\"===t.type?this.next=t.arg:\"return\"===t.type?(this.rval=this.arg=t.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===t.type&&e&&(this.next=e),k},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),P(n),k}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if(\"throw\"===r.type){var o=r.arg;P(n)}return o}}throw Error(\"illegal catch attempt\")},delegateYield:function(t,n,r){return this.delegate={iterator:I(t),resultName:n,nextLoc:r},\"next\"===this.method&&(this.arg=e),k}},n}t.exports=o,t.exports.__esModule=!0,t.exports.default=t.exports},738:t=>{function e(n){return t.exports=e=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},t.exports.__esModule=!0,t.exports.default=t.exports,e(n)}t.exports=e,t.exports.__esModule=!0,t.exports.default=t.exports},756:(t,e,n)=>{var r=n(633)();t.exports=r;try{regeneratorRuntime=r}catch(t){\"object\"==typeof globalThis?globalThis.regeneratorRuntime=r:Function(\"r\",\"regeneratorRuntime = r\")(r)}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var r={};return(()=>{\"use strict\";function t(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(r,o)}function e(e){return function(){var n=this,r=arguments;return new Promise((function(o,i){var a=e.apply(n,r);function s(e){t(a,o,i,s,c,\"next\",e)}function c(e){t(a,o,i,s,c,\"throw\",e)}s(void 0)}))}}function o(t){return o=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},o(t)}function i(t){var e=function(t,e){if(\"object\"!=o(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,\"string\");if(\"object\"!=o(r))return r;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return String(t)}(t);return\"symbol\"==o(e)?e:e+\"\"}function a(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,i(r.key),r)}}function c(t,e,n){return e&&s(t.prototype,e),n&&s(t,n),Object.defineProperty(t,\"prototype\",{writable:!1}),t}n.d(r,{default:()=>v});var u=n(756),l=n.n(u),h=n(442),f=n.n(h),d=function(){return c((function t(e,n,r){a(this,t),this.holder=n,this.observer=null,this.debounceTimer=r,this.mutationDebouncer=this.debounce((function(){e()}),this.debounceTimer)}),[{key:\"setMutationObserver\",value:function(){var t=this,e=this.holder.querySelector(\".codex-editor__redactor\");this.observer=new MutationObserver((function(e){t.mutationHandler(e)})),this.observer.observe(e,{childList:!0,attributes:!0,subtree:!0,characterData:!0,characterDataOldValue:!0})}},{key:\"mutationHandler\",value:function(t){var e=this,n=!1;t.forEach((function(t){switch(t.type){case\"childList\":t.target===e.holder?e.onDestroy():n=!0;break;case\"characterData\":n=!0;break;case\"attributes\":t.target.classList.contains(\"ce-block\")||t.target.classList.contains(\"tc-toolbox\")||(n=!0)}})),n&&this.mutationDebouncer()}},{key:\"debounce\",value:function(t,e){var n,r=this;return function(){for(var o=arguments.length,i=new Array(o),a=0;a<o;a++)i[a]=arguments[a];var s=r;clearTimeout(n),n=setTimeout((function(){return t.apply(s,i)}),e)}}},{key:\"onDestroy\",value:function(){var t=new CustomEvent(\"destroy\");document.dispatchEvent(t),this.observer.disconnect()}}])}();function p(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function y(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?p(Object(n),!0).forEach((function(e){var r,o,a;r=t,o=e,a=n[e],(o=i(o))in r?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var v=function(){return c((function t(e){var n=this,r=e.editor,o=e.config,i=void 0===o?{}:o,s=e.onUpdate,c=e.maxLength;a(this,t);var u={maxLength:30,onUpdate:function(){},config:{debounceTimer:200,shortcuts:{undo:[\"CMD+Z\"],redo:[\"CMD+Y\",\"CMD+SHIFT+Z\"]}}},l=r.blocks,h=r.caret,f=r.configuration,p=f.holder,v=f.defaultBlock,b=u.config.shortcuts,g=i.shortcuts,k=y(y({},b),g),m=Array.isArray(k.undo)?k.undo:[k.undo],x=Array.isArray(k.redo)?k.redo:[k.redo],w=u.config.debounceTimer,O=i.debounceTimer,E=void 0===O?w:O;this.holder=\"string\"==typeof p?document.getElementById(p):p,this.editor=r,this.defaultBlock=v,this.blocks=l,this.caret=h,this.shouldSaveHistory=!0,this.readOnly=f.readOnly,this.maxLength=c||u.maxLength,this.onUpdate=s||u.onUpdate,this.config={debounceTimer:E,shortcuts:{undo:m,redo:x}},new d((function(){return n.registerChange()}),this.holder,this.config.debounceTimer).setMutationObserver(),this.setEventListeners(),this.initialItem=null,this.clear()}),[{key:\"truncate\",value:function(t,e){for(;t.length>e;)t.shift()}},{key:\"initialize\",value:function(t){var e=\"blocks\"in t?t.blocks:t,n={index:e.length-1,state:e};this.stack[0]=n,this.initialItem=n}},{key:\"clear\",value:function(){this.stack=this.initialItem?[this.initialItem]:[{index:0,state:[{type:this.defaultBlock,data:{}}]}],this.position=0,this.onUpdate()}},{key:\"setReadOnly\",value:function(){var t=this.holder.querySelector(\".ce-toolbox\");this.readOnly=!t}},{key:\"registerChange\",value:function(){var t=this;this.setReadOnly(),this.readOnly||(this.editor&&this.editor.save&&this.shouldSaveHistory&&this.editor.save().then((function(e){t.editorDidUpdate(e.blocks)&&t.save(e.blocks)})),this.shouldSaveHistory=!0)}},{key:\"editorDidUpdate\",value:function(t){var e=this.stack[this.position].state;return!!t.length&&(t.length!==e.length||JSON.stringify(e)!==JSON.stringify(t))}},{key:\"save\",value:function(t){this.position>=this.maxLength&&this.truncate(this.stack,this.maxLength),this.position=Math.min(this.position,this.stack.length-1),this.stack=this.stack.slice(0,this.position+1);var e=this.blocks.getCurrentBlockIndex(),n=this.blocks.getBlocksCount(),r=e;t[e]||(r-=n-t.length);var o=!t[r]||\"paragraph\"!==t[r].type&&\"header\"!==t[r].type?null:this.getCaretIndex(e);this.stack.push({index:r,state:t,caretIndex:o}),this.position+=1,this.onUpdate()}},{key:\"getCaretIndex\",value:function(t){var e=this.holder.getElementsByClassName(\"ce-block__content\");return new(f())(e[t].firstChild).getPos()}},{key:\"insertDeletedBlock\",value:function(t,e,n){for(var r=0;r<t.length;r+=1)if(!e[r]||t[r].id!==e[r].id){this.blocks.insert(t[r].type,t[r].data,{},r,!0),this.caret.setToBlock(n,\"end\");break}}},{key:\"blockWasDropped\",value:function(t,e){return t.length===e.length&&t.some((function(t,n){return t.id!==e[n].id}))}},{key:\"blockWasSkipped\",value:function(t,e){return t.length!==e.length}},{key:\"contentChangedInNoFocusBlock\",value:function(t,e){return t!==e}},{key:\"blockWasDeleted\",value:function(t,e){return t.length>e.length}},{key:\"contentWasCopied\",value:function(t,e,n){return 0===Object.keys(t[n].data).length&&JSON.stringify(e[n+1])!==JSON.stringify(t[n+1])}},{key:\"undo\",value:(i=e(l().mark((function t(){var e,n,r,o,i,a,s,c,u,h,f;return l().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!this.canUndo()){t.next=47;break}if(e=this.stack[this.position],n=e.index,r=e.state,this.position-=1,this.shouldSaveHistory=!1,o=this.stack[this.position].index,i=this.stack[this.position],a=i.state,s=i.caretIndex,this.onUpdate(),c=this.blocks.getBlocksCount(),a[o]||(o-=1,this.stack[this.position].index=o),!this.blockWasDeleted(a,r)){t.next=13;break}this.insertDeletedBlock(a,r,o),t.next=42;break;case 13:if(!this.contentWasCopied(a,r,o)){t.next=19;break}return t.next=16,this.blocks.render({blocks:a});case 16:this.caret.setToBlock(o,\"end\"),t.next=42;break;case 19:if(!(o<n&&this.blockWasSkipped(a,r))){t.next=25;break}return t.next=22,this.blocks.delete(n);case 22:this.caret.setToBlock(o,\"end\"),t.next=42;break;case 25:if(!(c>a.length)){t.next=31;break}return t.next=28,this.blocks.render({blocks:a});case 28:this.setCaretIndex(o,s),t.next=42;break;case 31:if(!this.blockWasDropped(a,r)){t.next=37;break}return t.next=34,this.blocks.render({blocks:a});case 34:this.caret.setToBlock(o,\"end\"),t.next=42;break;case 37:if(!this.contentChangedInNoFocusBlock(o,n)){t.next=42;break}return u=this.blocks.getBlockByIndex(n),h=u.id,t.next=41,this.blocks.update(h,a[n].data);case 41:this.setCaretIndex(o,s);case 42:if(!(f=this.blocks.getBlockByIndex(o))){t.next=47;break}return t.next=46,this.blocks.update(f.id,a[o].data);case 46:this.setCaretIndex(o,s);case 47:case\"end\":return t.stop()}}),t,this)}))),function(){return i.apply(this,arguments)})},{key:\"setCaretIndex\",value:function(t,e){if(e&&-1!==e){var n=this.holder.getElementsByClassName(\"ce-block__content\"),r=new(f())(n[t].firstChild);setTimeout((function(){return r.setPos(e)}),50)}else this.caret.setToBlock(t,\"end\")}},{key:\"insertBlock\",value:(o=e(l().mark((function t(e,n){return l().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.blocks.insert(e[n].type,e[n].data,{},n,!0);case 2:case\"end\":return t.stop()}}),t,this)}))),function(t,e){return o.apply(this,arguments)})},{key:\"insertSkippedBlocks\",value:(r=e(l().mark((function t(e,n,r){var o;return l().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:for(o=e.length;o<n.length;o+=1)this.insertBlock(n,o);if(JSON.stringify(e[r-1])===JSON.stringify(n[r-1])){t.next=4;break}return t.next=4,this.updateModifiedBlock(n,r);case 4:case\"end\":return t.stop()}}),t,this)}))),function(t,e,n){return r.apply(this,arguments)})},{key:\"updateModifiedBlock\",value:(n=e(l().mark((function t(e,n){var r;return l().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e[n-1],!this.editor.blocks.getById(r.id)){t.next=3;break}return t.abrupt(\"return\",this.blocks.update(r.id,r.data));case 3:return t.abrupt(\"return\",this.blocks.render({blocks:e}));case 4:case\"end\":return t.stop()}}),t,this)}))),function(t,e){return n.apply(this,arguments)})},{key:\"redo\",value:(t=e(l().mark((function t(){var e,n,r,o,i,a,s;return l().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!this.canRedo()){t.next=27;break}if(this.position+=1,this.shouldSaveHistory=!1,e=this.stack[this.position],n=e.index,r=e.state,o=e.caretIndex,(i=this.stack[this.position-1]).index,a=i.state,!this.blockWasDeleted(a,r)){t.next=11;break}return t.next=8,this.blocks.delete();case 8:this.caret.setToBlock(n,\"end\"),t.next=21;break;case 11:if(!this.blockWasSkipped(r,a)){t.next=17;break}return t.next=14,this.insertSkippedBlocks(a,r,n);case 14:this.caret.setToBlock(n,\"end\"),t.next=21;break;case 17:if(!this.blockWasDropped(r,a)||1===this.position){t.next=21;break}return t.next=20,this.blocks.render({blocks:r});case 20:this.caret.setToBlock(n,\"end\");case 21:if(this.onUpdate(),!(s=this.blocks.getBlockByIndex(n))){t.next=27;break}return t.next=26,this.blocks.update(s.id,r[n].data);case 26:this.setCaretIndex(n,o);case 27:case\"end\":return t.stop()}}),t,this)}))),function(){return t.apply(this,arguments)})},{key:\"canUndo\",value:function(){return!this.readOnly&&this.position>0}},{key:\"canRedo\",value:function(){return!this.readOnly&&this.position<this.count()}},{key:\"count\",value:function(){return this.stack.length-1}},{key:\"parseKeys\",value:function(t){var e={CMD:/(Mac)/i.test(navigator.platform)?\"metaKey\":\"ctrlKey\",ALT:\"altKey\",SHIFT:\"shiftKey\"},n=t.slice(0,-1).map((function(t){return e[t]})),r=n.includes(\"shiftKey\")&&2===t.length?t[t.length-1].toUpperCase():t[t.length-1].toLowerCase();return n.push(r),n}},{key:\"setEventListeners\",value:function(){var t=this,e=this.holder,n=this.config.shortcuts,r=n.undo,o=n.redo,i=r.map((function(t){return t.replace(/ /g,\"\").split(\"+\")})),a=o.map((function(t){return t.replace(/ /g,\"\").split(\"+\")})),s=i.map((function(e){return t.parseKeys(e)})),c=a.map((function(e){return t.parseKeys(e)})),u=function(t,e){return e.reduce((function(e,n){return e||function(t,e){return 3===e.length&&t[e[0]]&&t[e[1]]&&t.key.toLowerCase()===e[2]}(t,n)}),!1)},l=function(t,e,n){return!(!function(t,e){return e.reduce((function(e,n){return e||function(t,e){return 2===e.length&&t[e[0]]&&t.key.toLowerCase()===e[1]}(t,n)}),!1)}(t,e)||u(t,n))||!!u(t,e)},h=function(e){l(e,s,c)&&(e.preventDefault(),t.undo())},f=function(e){l(e,c,s)&&(e.preventDefault(),t.redo())};e.addEventListener(\"keydown\",h),e.addEventListener(\"keydown\",f),e.addEventListener(\"destroy\",(function(){e.removeEventListener(\"keydown\",h),e.removeEventListener(\"keydown\",f)}))}}],[{key:\"isReadOnlySupported\",get:function(){return!0}}]);var t,n,r,o,i}()})(),r.default})()));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/editorjs-undo/dist/bundle.js\n");

/***/ }),

/***/ "./Assets/Editor.js/js/plugins/link/index.css":
/*!****************************************************!*\
  !*** ./Assets/Editor.js/js/plugins/link/index.css ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/sass-loader/dist/cjs.js!./index.css */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./Assets/Editor.js/js/plugins/link/index.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\noptions.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Bc3NldHMvRWRpdG9yLmpzL2pzL3BsdWdpbnMvbGluay9pbmRleC5jc3MiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsTUFBMkc7QUFDM0csTUFBaUc7QUFDakcsTUFBd0c7QUFDeEcsTUFBMkg7QUFDM0gsTUFBb0g7QUFDcEgsTUFBb0g7QUFDcEgsTUFBbUs7QUFDbks7QUFDQTs7QUFFQTs7QUFFQSw0QkFBNEIscUdBQW1CO0FBQy9DLHdCQUF3QixrSEFBYTtBQUNyQyxpQkFBaUIsdUdBQWE7QUFDOUIsaUJBQWlCLCtGQUFNO0FBQ3ZCLDZCQUE2QixzR0FBa0I7O0FBRS9DLGFBQWEsMEdBQUcsQ0FBQywySEFBTzs7OztBQUk2RztBQUNySSxPQUFPLGlFQUFlLDJIQUFPLElBQUksMkhBQU8sVUFBVSwySEFBTyxtQkFBbUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL0Fzc2V0cy9FZGl0b3IuanMvanMvcGx1Z2lucy9saW5rL2luZGV4LmNzcz9mOTFlIl0sInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Assets/Editor.js/js/plugins/link/index.css\n");

/***/ }),

/***/ "./Assets/Editor.js/js/plugins/mediaLibrary/index.css":
/*!************************************************************!*\
  !*** ./Assets/Editor.js/js/plugins/mediaLibrary/index.css ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/sass-loader/dist/cjs.js!./index.css */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./Assets/Editor.js/js/plugins/mediaLibrary/index.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\noptions.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Bc3NldHMvRWRpdG9yLmpzL2pzL3BsdWdpbnMvbWVkaWFMaWJyYXJ5L2luZGV4LmNzcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxNQUEyRztBQUMzRyxNQUFpRztBQUNqRyxNQUF3RztBQUN4RyxNQUEySDtBQUMzSCxNQUFvSDtBQUNwSCxNQUFvSDtBQUNwSCxNQUFtSztBQUNuSztBQUNBOztBQUVBOztBQUVBLDRCQUE0QixxR0FBbUI7QUFDL0Msd0JBQXdCLGtIQUFhO0FBQ3JDLGlCQUFpQix1R0FBYTtBQUM5QixpQkFBaUIsK0ZBQU07QUFDdkIsNkJBQTZCLHNHQUFrQjs7QUFFL0MsYUFBYSwwR0FBRyxDQUFDLDJIQUFPOzs7O0FBSTZHO0FBQ3JJLE9BQU8saUVBQWUsMkhBQU8sSUFBSSwySEFBTyxVQUFVLDJIQUFPLG1CQUFtQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vQXNzZXRzL0VkaXRvci5qcy9qcy9wbHVnaW5zL21lZGlhTGlicmFyeS9pbmRleC5jc3M/OTg3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./Assets/Editor.js/js/plugins/mediaLibrary/index.css\n");

/***/ }),

/***/ "./Assets/Editor.js/js/plugins/text-size/index.css":
/*!*********************************************************!*\
  !*** ./Assets/Editor.js/js/plugins/text-size/index.css ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/sass-loader/dist/cjs.js!./index.css */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./Assets/Editor.js/js/plugins/text-size/index.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\noptions.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Bc3NldHMvRWRpdG9yLmpzL2pzL3BsdWdpbnMvdGV4dC1zaXplL2luZGV4LmNzcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxNQUEyRztBQUMzRyxNQUFpRztBQUNqRyxNQUF3RztBQUN4RyxNQUEySDtBQUMzSCxNQUFvSDtBQUNwSCxNQUFvSDtBQUNwSCxNQUFtSztBQUNuSztBQUNBOztBQUVBOztBQUVBLDRCQUE0QixxR0FBbUI7QUFDL0Msd0JBQXdCLGtIQUFhO0FBQ3JDLGlCQUFpQix1R0FBYTtBQUM5QixpQkFBaUIsK0ZBQU07QUFDdkIsNkJBQTZCLHNHQUFrQjs7QUFFL0MsYUFBYSwwR0FBRyxDQUFDLDJIQUFPOzs7O0FBSTZHO0FBQ3JJLE9BQU8saUVBQWUsMkhBQU8sSUFBSSwySEFBTyxVQUFVLDJIQUFPLG1CQUFtQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vQXNzZXRzL0VkaXRvci5qcy9qcy9wbHVnaW5zL3RleHQtc2l6ZS9pbmRleC5jc3M/MmNhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./Assets/Editor.js/js/plugins/text-size/index.css\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanM/MmRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanM/YjIxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/insertBySelector.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcz9kZTZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/insertStyleElement.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanM/ZGRjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRjtBQUNqRjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzP2U0NzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/styleDomAPI.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzPzFkZGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/styleTagTransform.js\n");

/***/ }),

/***/ "bootstrap":
/*!****************************!*\
  !*** external "bootstrap" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = bootstrap;

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = jQuery;

/***/ }),

/***/ "./node_modules/@codexteam/icons/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@codexteam/icons/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IconAddBackground: () => (/* binding */ i),\n/* harmony export */   IconAddBorder: () => (/* binding */ l),\n/* harmony export */   IconAlignCenter: () => (/* binding */ h),\n/* harmony export */   IconAlignJustify: () => (/* binding */ d),\n/* harmony export */   IconAlignLeft: () => (/* binding */ w),\n/* harmony export */   IconAlignRight: () => (/* binding */ k),\n/* harmony export */   IconBold: () => (/* binding */ C),\n/* harmony export */   IconBrackets: () => (/* binding */ c),\n/* harmony export */   IconChecklist: () => (/* binding */ u),\n/* harmony export */   IconChevronDown: () => (/* binding */ g),\n/* harmony export */   IconChevronLeft: () => (/* binding */ p),\n/* harmony export */   IconChevronRight: () => (/* binding */ a),\n/* harmony export */   IconChevronUp: () => (/* binding */ v),\n/* harmony export */   IconClipboard: () => (/* binding */ M),\n/* harmony export */   IconCode: () => (/* binding */ L),\n/* harmony export */   IconCollapse: () => (/* binding */ x),\n/* harmony export */   IconColor: () => (/* binding */ H),\n/* harmony export */   IconCopy: () => (/* binding */ V),\n/* harmony export */   IconCross: () => (/* binding */ f),\n/* harmony export */   IconCurlyBrackets: () => (/* binding */ m),\n/* harmony export */   IconDelimiter: () => (/* binding */ B),\n/* harmony export */   IconDirectionDownRight: () => (/* binding */ I),\n/* harmony export */   IconDirectionLeftDown: () => (/* binding */ j),\n/* harmony export */   IconDirectionRightDown: () => (/* binding */ Z),\n/* harmony export */   IconDirectionUpRight: () => (/* binding */ y),\n/* harmony export */   IconEtcHorisontal: () => (/* binding */ D),\n/* harmony export */   IconEtcVertical: () => (/* binding */ R),\n/* harmony export */   IconFile: () => (/* binding */ A),\n/* harmony export */   IconGift: () => (/* binding */ U),\n/* harmony export */   IconH1: () => (/* binding */ o),\n/* harmony export */   IconH2: () => (/* binding */ t),\n/* harmony export */   IconH3: () => (/* binding */ r),\n/* harmony export */   IconH4: () => (/* binding */ e),\n/* harmony export */   IconH5: () => (/* binding */ n),\n/* harmony export */   IconH6: () => (/* binding */ s),\n/* harmony export */   IconHeading: () => (/* binding */ b),\n/* harmony export */   IconHeart: () => (/* binding */ T),\n/* harmony export */   IconHidden: () => (/* binding */ P),\n/* harmony export */   IconHtml: () => (/* binding */ S),\n/* harmony export */   IconInlineCode: () => (/* binding */ W),\n/* harmony export */   IconItalic: () => (/* binding */ E),\n/* harmony export */   IconLink: () => (/* binding */ G),\n/* harmony export */   IconListBulleted: () => (/* binding */ F),\n/* harmony export */   IconListNumbered: () => (/* binding */ J),\n/* harmony export */   IconMarker: () => (/* binding */ N),\n/* harmony export */   IconMenu: () => (/* binding */ Q),\n/* harmony export */   IconPicture: () => (/* binding */ q),\n/* harmony export */   IconPlay: () => (/* binding */ z),\n/* harmony export */   IconPlus: () => (/* binding */ K),\n/* harmony export */   IconQuote: () => (/* binding */ O),\n/* harmony export */   IconRedo: () => (/* binding */ X),\n/* harmony export */   IconRemoveBackground: () => (/* binding */ Y),\n/* harmony export */   IconReplace: () => (/* binding */ _),\n/* harmony export */   IconSearch: () => (/* binding */ $),\n/* harmony export */   IconStar: () => (/* binding */ o1),\n/* harmony export */   IconStretch: () => (/* binding */ t1),\n/* harmony export */   IconTable: () => (/* binding */ n1),\n/* harmony export */   IconTableWithHeadings: () => (/* binding */ r1),\n/* harmony export */   IconTableWithoutHeadings: () => (/* binding */ e1),\n/* harmony export */   IconText: () => (/* binding */ s1),\n/* harmony export */   IconTrash: () => (/* binding */ i1),\n/* harmony export */   IconUndo: () => (/* binding */ l1),\n/* harmony export */   IconUnlink: () => (/* binding */ h1),\n/* harmony export */   IconUser: () => (/* binding */ d1),\n/* harmony export */   IconUsersGroup: () => (/* binding */ w1),\n/* harmony export */   IconWarning: () => (/* binding */ k1)\n/* harmony export */ });\nconst o = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M19 17V10.2135C19 10.1287 18.9011 10.0824 18.836 10.1367L16 12.5\"/></svg>', t = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 11C16 10 19 9.5 19 12C19 13.9771 16.0684 13.9997 16.0012 16.8981C15.9999 16.9533 16.0448 17 16.1 17L19.3 17\"/></svg>', r = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 11C16 10.5 16.8323 10 17.6 10C18.3677 10 19.5 10.311 19.5 11.5C19.5 12.5315 18.7474 12.9022 18.548 12.9823C18.5378 12.9864 18.5395 13.0047 18.5503 13.0063C18.8115 13.0456 20 13.3065 20 14.8C20 16 19.5 17 17.8 17C17.8 17 16 17 16 16.3\"/></svg>', e = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M18 10L15.2834 14.8511C15.246 14.9178 15.294 15 15.3704 15C16.8489 15 18.7561 15 20.2 15M19 17C19 15.7187 19 14.8813 19 13.6\"/></svg>', n = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 15.9C16 15.9 16.3768 17 17.8 17C19.5 17 20 15.6199 20 14.7C20 12.7323 17.6745 12.0486 16.1635 12.9894C16.094 13.0327 16 12.9846 16 12.9027V10.1C16 10.0448 16.0448 10 16.1 10H19.8\"/></svg>', s = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M19.5 10C16.5 10.5 16 13.3285 16 15M16 15V15C16 16.1046 16.8954 17 18 17H18.3246C19.3251 17 20.3191 16.3492 20.2522 15.3509C20.0612 12.4958 16 12.6611 16 15Z\"/></svg>', i = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 19V19C9.13623 19 8.20435 19 7.46927 18.6955C6.48915 18.2895 5.71046 17.5108 5.30448 16.5307C5 15.7956 5 14.8638 5 13V12C5 9.19108 5 7.78661 5.67412 6.77772C5.96596 6.34096 6.34096 5.96596 6.77772 5.67412C7.78661 5 9.19108 5 12 5H13.5C14.8956 5 15.5933 5 16.1611 5.17224C17.4395 5.56004 18.44 6.56046 18.8278 7.83886C19 8.40666 19 9.10444 19 10.5V10.5\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 13V16M16 19V16M19 16H16M16 16H13\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6.5 17.5L17.5 6.5\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M18.9919 10.5H19.0015\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.9919 19H11.0015\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13L13 5\"/></svg>', l = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M14.625 4C14.0727 4 13.625 4.44772 13.625 5C13.625 5.55228 14.0727 6 14.625 6V4ZM18 9.375C18 9.92728 18.4477 10.375 19 10.375C19.5523 10.375 20 9.92728 20 9.375H18ZM9 6H9.375V4H9V6ZM14.625 6H15V4H14.625V6ZM9.375 18H9V20H9.375V18ZM6 9.375V9H4V9.375H6ZM6 15V14.625H4V15H6ZM18 9V9.375H20V9H18ZM9 18C7.34315 18 6 16.6569 6 15H4C4 17.7614 6.23858 20 9 20V18ZM15 6C16.6569 6 18 7.34315 18 9H20C20 6.23858 17.7614 4 15 4V6ZM9 4C6.23858 4 4 6.23858 4 9H6C6 7.34315 7.34315 6 9 6V4Z\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M18.9919 9.5H19.0015\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.3725 5H9.38207\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.5 5H14.5096\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.3725 19H9.38207\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 9.5H5.00957\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 14.55H5.00957\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 13V16M16 19V16M19 16H16M16 16H13\"/></svg>', h = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M18 7L6 7\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M18 17H6\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 12L8 12\"/></svg>', d = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M18 7L6 7\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M18 17H6\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M18 12L6 12\"/></svg>', w = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M17 7L5 7\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M17 17H5\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M13 12L5 12\"/></svg>', k = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M19 7L7 7\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M19 17H7\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M19 12L11 12\"/></svg>', C = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9 12L9 7.1C9 7.04477 9.04477 7 9.1 7H10.4C11.5 7 14 7.1 14 9.5C14 9.5 14 12 11 12M9 12V16.8C9 16.9105 9.08954 17 9.2 17H12.5C14 17 15 16 15 14.5C15 11.7046 11 12 11 12M9 12H11\"/></svg>', c = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 8L5 12L9 16\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 8L19 12L15 16\"/></svg>', u = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9.2 12L11.0586 13.8586C11.1367 13.9367 11.2633 13.9367 11.3414 13.8586L14.7 10.5\"/><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/></svg>', g = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7 10L11.8586 14.8586C11.9367 14.9367 12.0633 14.9367 12.1414 14.8586L17 10\"/></svg>', p = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M14.5 17.5L9.64142 12.6414C9.56331 12.5633 9.56331 12.4367 9.64142 12.3586L14.5 7.5\"/></svg>', a = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9.58284 17.5L14.4414 12.6414C14.5195 12.5633 14.5195 12.4367 14.4414 12.3586L9.58284 7.5\"/></svg>', v = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7 15L11.8586 10.1414C11.9367 10.0633 12.0633 10.0633 12.1414 10.1414L17 15\"/></svg>', M = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.42857 7H7.71429C7.25963 7 6.82359 7.15804 6.5021 7.43934C6.18061 7.72064 6 8.10218 6 8.5V17.5C6 17.8978 6.18061 18.2794 6.5021 18.5607C6.82359 18.842 7.25963 19 7.71429 19H16.2857C16.7404 19 17.1764 18.842 17.4979 18.5607C17.8194 18.2794 18 17.8978 18 17.5V8.5C18 8.10218 17.8194 7.72064 17.4979 7.43934C17.1764 7.15804 16.7404 7 16.2857 7H14.5714\"/><rect width=\"5.15789\" height=\"3.36842\" x=\"9.42105\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"1.5\"/></svg>', L = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M15.078 5.62637L15.6153 4.78296L15.078 5.62637C15.4261 5.84808 15.7393 6.15354 16.5711 6.98528L17.2782 6.27817L16.5711 6.98528L17.5251 7.93934C17.8347 8.2489 17.9496 8.36494 18.0489 8.48177C18.5907 9.11982 18.9188 9.91178 18.9868 10.7461C18.9992 10.8989 19 11.0622 19 11.5V12C19 13.4166 18.9992 14.419 18.9352 15.2026C18.8721 15.9745 18.7527 16.4457 18.564 16.816C18.1805 17.5686 17.5686 18.1805 16.816 18.564C16.4457 18.7527 15.9745 18.8721 15.2026 18.9352C14.419 18.9992 13.4166 19 12 19C10.5834 19 9.58104 18.9992 8.79744 18.9352C8.02552 18.8721 7.55435 18.7527 7.18404 18.564C6.43139 18.1805 5.81947 17.5686 5.43597 16.816C5.24729 16.4457 5.12787 15.9745 5.0648 15.2026C5.00078 14.419 5 13.4166 5 12V11.7782C5 10.4673 5.00067 9.53987 5.05572 8.81299C5.10998 8.09655 5.21284 7.65673 5.37487 7.3093C5.77229 6.45718 6.45718 5.77229 7.3093 5.37487C7.65673 5.21284 8.09655 5.10998 8.81299 5.05572C9.53986 5.00067 10.4673 5 11.7782 5C12.9544 5 13.3919 5.00552 13.7948 5.09484C14.2503 5.19583 14.6846 5.37572 15.078 5.62637Z\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 15C13.1046 15 14 14.1046 14 13C14 11.8954 13.1046 11 12 11C10.8954 11 10 11.8954 10 13C10 14.1046 10.8954 15 12 15Z\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14 5.5V7C14 7.55228 13.5523 8 13 8H11C10.4477 8 10 7.55228 10 7V5.2\"/></svg>', x = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 9L10 12M10 12L7 15M10 12H4\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 9L14 12M14 12L17 15M14 12H20\"/></svg>', H = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.36396 11.364H15.364\"/><path fill=\"currentColor\" d=\"M12.7071 12.2071C13.0976 11.8166 13.0976 11.1834 12.7071 10.7929C12.3166 10.4024 11.6834 10.4024 11.2929 10.7929L12.7071 12.2071ZM9.20711 15.7071L12.7071 12.2071L11.2929 10.7929L7.79289 14.2929L9.20711 15.7071Z\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M6.12132 13.4853C4.94975 12.3137 4.94975 10.4142 6.12132 9.24264L9.65685 5.70711C10.0474 5.31658 10.6809 5.31693 11.0714 5.70745C12.909 7.54503 14.1829 8.81893 16.0205 10.6565C16.411 11.047 16.4113 11.6805 16.0208 12.0711L12.4853 15.6066C11.3137 16.7782 9.41421 16.7782 8.24264 15.6066L6.12132 13.4853Z\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M20 17C20 17.8284 19.3284 18.5 18.5 18.5C17.6716 18.5 17 17.8284 17 17C17 16.634 17.218 16.0998 17.6897 15.4372C17.9337 15.0943 18.2151 14.7588 18.5 14.4449C18.7849 14.7588 19.0663 15.0943 19.3103 15.4372C19.782 16.0998 20 16.634 20 17Z\"/></svg>', V = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17.25 8.5H10.25C9.2835 8.5 8.5 9.2835 8.5 10.25V17.25C8.5 18.2165 9.2835 19 10.25 19H17.25C18.2165 19 19 18.2165 19 17.25V10.25C19 9.2835 18.2165 8.5 17.25 8.5Z\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15.5 8.5V6.75C15.5 6.28587 15.3156 5.84075 14.9874 5.51256C14.6592 5.18437 14.2141 5 13.75 5H6.75C6.28587 5 5.84075 5.18437 5.51256 5.51256C5.18437 5.84075 5 6.28587 5 6.75V13.75C5 14.2141 5.18437 14.6592 5.51256 14.9874C5.84075 15.3156 6.28587 15.5 6.75 15.5H8.5\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 12L15.5 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 15.5L15.5 15.5\"/></svg>', f = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8 8L12 12M12 12L16 16M12 12L16 8M12 12L8 16\"/></svg>', m = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 17C7 17 7 15.2536 7 13.5L5.5 12L7 10.5C7 8.74644 7 7 9 7\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 17C17 17 17 15.2536 17 13.5L18.5 12L17 10.5C17 8.74644 17 7 15 7\"/></svg>', B = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><line x1=\"6\" x2=\"10\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"14\" x2=\"18\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>', I = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.8833 9.16666L18.2167 12.5M18.2167 12.5L14.8833 15.8333M18.2167 12.5H10.05C9.16594 12.5 8.31809 12.1488 7.69297 11.5237C7.06785 10.8986 6.71666 10.0507 6.71666 9.16666\"/></svg>', j = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.9167 14.9167L11.5833 18.25M11.5833 18.25L8.25 14.9167M11.5833 18.25L11.5833 10.0833C11.5833 9.19928 11.9345 8.35143 12.5596 7.72631C13.1848 7.10119 14.0326 6.75 14.9167 6.75\"/></svg>', Z = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.13333 14.9167L12.4667 18.25M12.4667 18.25L15.8 14.9167M12.4667 18.25L12.4667 10.0833C12.4667 9.19928 12.1155 8.35143 11.4904 7.72631C10.8652 7.10119 10.0174 6.75 9.13333 6.75\"/></svg>', y = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.8833 15.8333L18.2167 12.5M18.2167 12.5L14.8833 9.16667M18.2167 12.5L10.05 12.5C9.16595 12.5 8.31811 12.8512 7.69299 13.4763C7.06787 14.1014 6.71667 14.9493 6.71667 15.8333\"/></svg>', D = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M7.30499 11.995L7.30499 12.005M12.005 11.995V12.005M16.705 11.995L16.705 12.005\"/></svg>', R = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M12.01 7.29999H12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M12.01 12H12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M12.01 16.7H12\"/></svg>', A = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13.3236 8.43554L9.49533 12.1908C9.13119 12.5505 8.93118 13.043 8.9393 13.5598C8.94741 14.0767 9.163 14.5757 9.53862 14.947C9.91424 15.3182 10.4191 15.5314 10.9422 15.5397C11.4653 15.5479 11.9637 15.3504 12.3279 14.9908L16.1562 11.2355C16.8845 10.5161 17.2845 9.53123 17.2682 8.4975C17.252 7.46376 16.8208 6.46583 16.0696 5.72324C15.3184 4.98066 14.3086 4.55425 13.2624 4.53782C12.2162 4.52138 11.2193 4.91627 10.4911 5.63562L6.66277 9.39093C5.57035 10.4699 4.97032 11.9473 4.99467 13.4979C5.01903 15.0485 5.66578 16.5454 6.79264 17.6592C7.9195 18.7731 9.43417 19.4127 11.0034 19.4374C12.5727 19.462 14.068 18.8697 15.1604 17.7907L18.9887 14.0354\"/></svg>', U = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M13 18H16C16.5523 18 17 17.5523 17 17V15C17 14.4477 16.5523 14 16 14H13V18ZM11 12H8C6.34315 12 5 13.3431 5 15V17C5 18.6569 6.34315 20 8 20H16C17.6569 20 19 18.6569 19 17V15C19 13.3431 17.6569 12 16 12H13V9H11V12ZM11 14V18H8C7.44772 18 7 17.5523 7 17V15C7 14.4477 7.44772 14 8 14H11Z\" clip-rule=\"evenodd\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M5 11C5 9.89543 5.89543 9 7 9H17C18.1046 9 19 9.89543 19 11V11C19 12.1046 18.1046 13 17 13H7C5.89543 13 5 12.1046 5 11V11Z\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M16 9C16 7.89543 16 6 14 6C12 6 12 7.89543 12 9C12 7.89543 12 6 10 6C8 6 8 7.89543 8 9\"/></svg>', b = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9 7L9 12M9 17V12M9 12L15 12M15 7V12M15 17L15 12\"/></svg>', T = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-miterlimit=\"2.9238\" stroke-width=\"2\" d=\"M5.4694 7.85715C8.08167 3.67856 12 7.85716 12 7.85716C12 7.85716 15.9185 3.67859 18.5306 7.85715C21.1428 12.0357 12 19 12 19C12 19 2.85712 12.0357 5.4694 7.85715Z\"/></svg>', P = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6.77778 6L18.5 17.7222\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.687 10C10.2473 10.4392 10.0002 11.035 10 11.6564C9.99978 12.2777 10.2465 12.8737 10.6858 13.3132C11.1251 13.7527 11.7211 13.9998 12.3427 14C12.9642 14.0002 13.5604 13.7536 14 13.3144\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7C17 11.1666 20 11.17 20 11.67C20 12.17 19 13.17 19 13.17M8.2424 8.80936C7.59317 9.22876 6.97961 9.76732 6.4017 10.4251C5.70398 11.2193 5.35512 11.6164 5.35513 12.3702C5.35514 13.124 5.70406 13.5211 6.40191 14.3154C7.99587 16.1297 9.8618 17.0367 12 17.0367C13.1102 17.0367 14.1466 16.7917 15.1111 16.3024\"/></svg>', S = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16.6954 5C17.912 5 18.8468 6.07716 18.6755 7.28165L17.426 16.0659C17.3183 16.8229 16.7885 17.4522 16.061 17.6873L12.6151 18.8012C12.2152 18.9304 11.7848 18.9304 11.3849 18.8012L7.93898 17.6873C7.21148 17.4522 6.6817 16.8229 6.57403 16.0659L5.32454 7.28165C5.15322 6.07716 6.088 5 7.30461 5H16.6954Z\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 8.4H9L9.42857 11.7939H14.5714L14.3571 13.2788L14.1429 14.7636L12 15.4L9.85714 14.7636L9.77143 14.3394\"/></svg>', W = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9.5 8L6.11524 11.8683C6.04926 11.9437 6.04926 12.0563 6.11524 12.1317L9.5 16\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M15 8L18.3848 11.8683C18.4507 11.9437 18.4507 12.0563 18.3848 12.1317L15 16\"/></svg>', E = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M13.34 10C12.4223 12.7337 11 17 11 17\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M14.21 7H14.2\"/></svg>', G = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7.69998 12.6L7.67896 12.62C6.53993 13.7048 6.52012 15.5155 7.63516 16.625V16.625C8.72293 17.7073 10.4799 17.7102 11.5712 16.6314L13.0263 15.193C14.0703 14.1609 14.2141 12.525 13.3662 11.3266L13.22 11.12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16.22 11.12L16.3564 10.9805C17.2895 10.0265 17.3478 8.5207 16.4914 7.49733V7.49733C15.569 6.39509 13.9269 6.25143 12.8271 7.17675L11.39 8.38588C10.0935 9.47674 9.95704 11.4241 11.0887 12.6852L11.12 12.72\"/></svg>', F = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><line x1=\"9\" x2=\"19\" y1=\"7\" y2=\"7\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"9\" x2=\"19\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"9\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 17H4.99002\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 12H4.99002\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 7H4.99002\"/></svg>', J = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><line x1=\"12\" x2=\"19\" y1=\"7\" y2=\"7\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"12\" x2=\"19\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"12\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7.79999 14L7.79999 7.2135C7.79999 7.12872 7.7011 7.0824 7.63597 7.13668L4.79999 9.5\"/></svg>', N = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M11.3536 9.31802L12.7678 7.90381C13.5488 7.12276 14.8151 7.12276 15.5962 7.90381C16.3772 8.68486 16.3772 9.95119 15.5962 10.7322L14.182 12.1464M11.3536 9.31802L7.96729 12.7043C7.40889 13.2627 7.02827 13.9739 6.8734 14.7482L6.69798 15.6253C6.55804 16.325 7.17496 16.942 7.87468 16.802L8.75176 16.6266C9.52612 16.4717 10.2373 16.0911 10.7957 15.5327L14.182 12.1464M11.3536 9.31802L14.182 12.1464\"/><line x1=\"15\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>', Q = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.40999 7.29999H9.4\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 7.29999H14.59\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.30999 12H9.3\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 12H14.59\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.40999 16.7H9.4\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 16.7H14.59\"/></svg>', q = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5.13968 15.32L8.69058 11.5661C9.02934 11.2036 9.48873 11 9.96774 11C10.4467 11 10.9061 11.2036 11.2449 11.5661L15.3871 16M13.5806 14.0664L15.0132 12.533C15.3519 12.1705 15.8113 11.9668 16.2903 11.9668C16.7693 11.9668 17.2287 12.1705 17.5675 12.533L18.841 13.9634\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13.7778 9.33331H13.7867\"/></svg>', z = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M10 10.5606V13.4394C10 14.4777 11.1572 15.0971 12.0211 14.5211L14.1803 13.0817C14.9536 12.5661 14.9503 11.4317 14.18 10.9181L12.0214 9.47907C11.1591 8.9042 10 9.5203 10 10.5606Z\"/><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/></svg>', K = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M12 7V12M12 17V12M17 12H12M12 12H7\"/></svg>', O = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 10.8182L9 10.8182C8.80222 10.8182 8.60888 10.7649 8.44443 10.665C8.27998 10.5651 8.15181 10.4231 8.07612 10.257C8.00043 10.0909 7.98063 9.90808 8.01922 9.73174C8.0578 9.55539 8.15304 9.39341 8.29289 9.26627C8.43275 9.13913 8.61093 9.05255 8.80491 9.01747C8.99889 8.98239 9.19996 9.00039 9.38268 9.0692C9.56541 9.13801 9.72159 9.25453 9.83147 9.40403C9.94135 9.55353 10 9.72929 10 9.90909L10 12.1818C10 12.664 9.78929 13.1265 9.41421 13.4675C9.03914 13.8084 8.53043 14 8 14\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 10.8182L15 10.8182C14.8022 10.8182 14.6089 10.7649 14.4444 10.665C14.28 10.5651 14.1518 10.4231 14.0761 10.257C14.0004 10.0909 13.9806 9.90808 14.0192 9.73174C14.0578 9.55539 14.153 9.39341 14.2929 9.26627C14.4327 9.13913 14.6109 9.05255 14.8049 9.01747C14.9989 8.98239 15.2 9.00039 15.3827 9.0692C15.5654 9.13801 15.7216 9.25453 15.8315 9.40403C15.9414 9.55353 16 9.72929 16 9.90909L16 12.1818C16 12.664 15.7893 13.1265 15.4142 13.4675C15.0391 13.8084 14.5304 14 14 14\"/></svg>', X = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.6667 13.6667L18 10.3333L14.6667 7M18 10.3333H8.83333C7.94928 10.3333 7.10143 10.6845 6.47631 11.3096C5.85119 11.9348 5.5 12.7826 5.5 13.6667C5.5 14.5507 5.85119 15.3986 6.47631 16.0237C7.10143 16.6488 7.94928 17 8.83333 17H9.66667\"/></svg>', Y = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 19V19C9.13623 19 8.20435 19 7.46927 18.6955C6.48915 18.2895 5.71046 17.5108 5.30448 16.5307C5 15.7956 5 14.8638 5 13V12C5 9.19108 5 7.78661 5.67412 6.77772C5.96596 6.34096 6.34096 5.96596 6.77772 5.67412C7.78661 5 9.19108 5 12 5H13.5C14.8956 5 15.5933 5 16.1611 5.17224C17.4395 5.56004 18.44 6.56046 18.8278 7.83886C19 8.40666 19 9.10444 19 10.5V10.5\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M19.1187 14.8787L16.9974 17M14.876 19.1213L16.9974 17M19.1187 19.1213L16.9974 17M16.9974 17L14.876 14.8787\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6.5 17.5L17.5 6.5\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M18.9919 10.5H19.0015\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.9919 19H11.0015\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13L13 5\"/></svg>', _ = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M10.7929 18.2071C11.1834 18.5976 11.8166 18.5976 12.2071 18.2071C12.5976 17.8166 12.5976 17.1834 12.2071 16.7929L10.7929 18.2071ZM5 11V10C4.44772 10 4 10.4477 4 11H5ZM4 15.5C4 16.0523 4.44772 16.5 5 16.5C5.55228 16.5 6 16.0523 6 15.5H4ZM9.5 12C10.0523 12 10.5 11.5523 10.5 11C10.5 10.4477 10.0523 10 9.5 10V12ZM12.2071 16.7929L5.70711 10.2929L4.29289 11.7071L10.7929 18.2071L12.2071 16.7929ZM4 11V15.5H6V11H4ZM5 12H9.5V10H5V12Z\"/><path fill=\"currentColor\" d=\"M13.2071 5.79289C12.8166 5.40237 12.1834 5.40237 11.7929 5.79289C11.4024 6.18342 11.4024 6.81658 11.7929 7.20711L13.2071 5.79289ZM19 13V14C19.5523 14 20 13.5523 20 13H19ZM20 8.5C20 7.94772 19.5523 7.5 19 7.5C18.4477 7.5 18 7.94772 18 8.5H20ZM14.5 12C13.9477 12 13.5 12.4477 13.5 13C13.5 13.5523 13.9477 14 14.5 14V12ZM11.7929 7.20711L18.2929 13.7071L19.7071 12.2929L13.2071 5.79289L11.7929 7.20711ZM20 13V8.5H18V13H20ZM19 12H14.5V14H19V12Z\"/></svg>', $ = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><circle cx=\"10.5\" cy=\"10.5\" r=\"5.5\" stroke=\"currentColor\" stroke-width=\"2\"/><line x1=\"15.4142\" x2=\"19\" y1=\"15\" y2=\"18.5858\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>', o1 = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M11.8197 6.04369C11.8924 5.8925 12.1076 5.8925 12.1803 6.04369L13.9776 9.78496C14.0068 9.84564 14.0645 9.88759 14.1312 9.89657L18.2448 10.4498C18.411 10.4722 18.4776 10.6769 18.3562 10.7927L15.3535 13.6582C15.3048 13.7047 15.2827 13.7726 15.2948 13.8388L16.0398 17.922C16.0699 18.087 15.8957 18.2136 15.7481 18.1339L12 16.1124L8.25192 18.1339C8.10429 18.2136 7.93012 18.087 7.96023 17.922L8.7052 13.8388C8.71729 13.7726 8.69523 13.7047 8.64653 13.6582L5.64378 10.7927C5.52244 10.6769 5.58896 10.4722 5.7552 10.4498L9.86876 9.89657C9.93549 9.88759 9.99322 9.84564 10.0224 9.78496L11.8197 6.04369Z\"/></svg>', t1 = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 9L20 12L17 15\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14 12H20\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 9L4 12L7 15\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 12H10\"/></svg>', r1 = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M5 10H19\"/><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/></svg>', e1 = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M10 5V18.5\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M14 5V18.5\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M5 10H19\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M5 14H19\"/><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/></svg>', n1 = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M10 5V18.5\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M5 10H19\"/><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/></svg>', s1 = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8 9V7.2C8 7.08954 8.08954 7 8.2 7L12 7M16 9V7.2C16 7.08954 15.9105 7 15.8 7L12 7M12 7L12 17M12 17H10M12 17H14\"/></svg>', i1 = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M18.1328 7.7234C18.423 7.7634 18.7115 7.80571 19 7.85109M18.1328 7.7234L17.2267 17.4023C17.1897 17.8371 16.973 18.2432 16.62 18.5394C16.267 18.8356 15.8037 19.0001 15.3227 19H8.67733C8.19632 19.0001 7.73299 18.8356 7.37998 18.5394C7.02698 18.2432 6.81032 17.8371 6.77333 17.4023L5.86715 7.7234M18.1328 7.7234C17.1536 7.58919 16.1693 7.48733 15.1818 7.41803M5.86715 7.7234C5.57697 7.76263 5.28848 7.80494 5 7.85032M5.86715 7.7234C6.84642 7.58919 7.83074 7.48733 8.81818 7.41803M15.1818 7.41803C13.0638 7.26963 10.9362 7.26963 8.81818 7.41803M15.1818 7.41803C15.1818 5.30368 13.7266 4.34834 12 4.34834C10.2734 4.34834 8.81818 5.43945 8.81818 7.41803\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.5 15.5L10 11\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14 11L13.5 15.5\"/></svg>', l1 = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.33333 13.6667L6 10.3333L9.33333 7M6 10.3333H15.1667C16.0507 10.3333 16.8986 10.6845 17.5237 11.3096C18.1488 11.9348 18.5 12.7826 18.5 13.6667C18.5 14.5507 18.1488 15.3986 17.5237 16.0237C16.8986 16.6488 16.0507 17 15.1667 17H14.3333\"/></svg>', h1 = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M15.7795 11.5C15.7795 11.5 16.053 11.1962 16.5497 10.6722C17.4442 9.72856 17.47 8.2475 16.578 7.30145V7.30145C15.6482 6.31522 14.0873 6.29227 13.1288 7.25073L11.8795 8.49999\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8.24516 12.3883C8.24516 12.3883 7.9717 12.6922 7.47503 13.2161C6.5805 14.1598 6.55465 15.6408 7.44665 16.5869V16.5869C8.37652 17.5731 9.93743 17.5961 10.8959 16.6376L12.1452 15.3883\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M17.7802 15.1032L16.597 14.9422C16.0109 14.8624 15.4841 15.3059 15.4627 15.8969L15.4199 17.0818\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6.39063 9.03238L7.58431 9.06668C8.17549 9.08366 8.65218 8.58665 8.61055 7.99669L8.52708 6.81397\"/><line x1=\"12.1142\" x2=\"11.7\" y1=\"12.2\" y2=\"11.7858\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>', d1 = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M12 10C12.7145 10 13.239 9.56559 13.5392 9.11536C13.844 8.65814 14 8.0841 14 7.5C14 6.9159 13.844 6.34186 13.5392 5.88464C13.239 5.43441 12.7145 5 12 5C11.2855 5 10.761 5.43441 10.4608 5.88464C10.156 6.34186 10 6.9159 10 7.5C10 8.0841 10.156 8.65814 10.4608 9.11536C10.761 9.56559 11.2855 10 12 10Z\"/><ellipse cx=\"12\" cy=\"16\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"3\" ry=\"5\" transform=\"rotate(-90 12 16)\"/></svg>', w1 = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M10 10C10.7145 10 11.239 9.56559 11.5392 9.11536C11.844 8.65814 12 8.0841 12 7.5C12 6.9159 11.844 6.34186 11.5392 5.88464C11.239 5.43441 10.7145 5 10 5C9.28547 5 8.761 5.43441 8.46084 5.88464C8.15603 6.34186 8 6.9159 8 7.5C8 8.0841 8.15603 8.65814 8.46084 9.11536C8.761 9.56559 9.28547 10 10 10Z\"/><ellipse cx=\"10\" cy=\"16\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"3\" ry=\"5\" transform=\"rotate(-90 10 16)\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M15.5555 10.2222C16.5374 10.2222 17.3333 9.42629 17.3333 8.44445C17.3333 7.46261 16.5374 6.66667 15.5555 6.66667\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M17.5 13C21 14.5 20.5 18 18 18.5\"/></svg>', k1 = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/><line x1=\"12\" x2=\"12\" y1=\"9\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M12 15.02V15.01\"/></svg>';\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@codexteam/icons/dist/index.mjs\n");

/***/ }),

/***/ "./node_modules/@editorjs/delimiter/dist/delimiter.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@editorjs/delimiter/dist/delimiter.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ n)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode('.ce-delimiter{line-height:1.6em;width:100%;text-align:center}.ce-delimiter:before{display:inline-block;content:\"***\";font-size:30px;line-height:65px;height:30px;letter-spacing:.2em}')),document.head.appendChild(e)}}catch(t){console.error(\"vite-plugin-css-injected-by-js\",t)}})();\nconst r = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><line x1=\"6\" x2=\"10\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"14\" x2=\"18\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>';\n/**\n * Delimiter Block for the Editor.js.\n *\n * @author CodeX (team@ifmo.su)\n * @copyright CodeX 2018\n * @license The MIT License (MIT)\n * @version 2.0.0\n */\nclass n {\n  /**\n   * Notify core that read-only mode is supported\n   * @return {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Allow Tool to have no content\n   * @return {boolean}\n   */\n  static get contentless() {\n    return !0;\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {{data: DelimiterData, config: object, api: object}}\n   *   data — previously saved data\n   *   config - user config for Tool\n   *   api - Editor.js API\n   */\n  constructor({ data: t, config: s, api: e }) {\n    this.api = e, this._CSS = {\n      block: this.api.styles.block,\n      wrapper: \"ce-delimiter\"\n    }, this._element = this.drawView(), this.data = t;\n  }\n  /**\n   * Create Tool's view\n   * @return {HTMLDivElement}\n   * @private\n   */\n  drawView() {\n    let t = document.createElement(\"div\");\n    return t.classList.add(this._CSS.wrapper, this._CSS.block), t;\n  }\n  /**\n   * Return Tool's view\n   * @returns {HTMLDivElement}\n   * @public\n   */\n  render() {\n    return this._element;\n  }\n  /**\n   * Extract Tool's data from the view\n   * @param {HTMLDivElement} toolsContent - Paragraph tools rendered view\n   * @returns {DelimiterData} - saved data\n   * @public\n   */\n  save(t) {\n    return {};\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @return {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: r,\n      title: \"Delimiter\"\n    };\n  }\n  /**\n   * Delimiter onPaste configuration\n   *\n   * @public\n   */\n  static get pasteConfig() {\n    return { tags: [\"HR\"] };\n  }\n  /**\n   * On paste callback that is fired from Editor\n   *\n   * @param {PasteEvent} event - event with pasted data\n   */\n  onPaste(t) {\n    this.data = {};\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGVkaXRvcmpzL2RlbGltaXRlci9kaXN0L2RlbGltaXRlci5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFlBQVksYUFBYSxJQUFJLHdCQUF3QixzQ0FBc0MscURBQXFELGtCQUFrQixXQUFXLGtCQUFrQixxQkFBcUIscUJBQXFCLGNBQWMsZUFBZSxpQkFBaUIsWUFBWSxvQkFBb0Isa0NBQWtDLFNBQVMsbURBQW1EO0FBQ3JaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsNEJBQTRCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0JBQWdCO0FBQzdCLGVBQWUsZUFBZTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVkaXRvcmpzL2RlbGltaXRlci9kaXN0L2RlbGltaXRlci5tanM/NTk3NSJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt0cnl7aWYodHlwZW9mIGRvY3VtZW50PFwidVwiKXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnLmNlLWRlbGltaXRlcntsaW5lLWhlaWdodDoxLjZlbTt3aWR0aDoxMDAlO3RleHQtYWxpZ246Y2VudGVyfS5jZS1kZWxpbWl0ZXI6YmVmb3Jle2Rpc3BsYXk6aW5saW5lLWJsb2NrO2NvbnRlbnQ6XCIqKipcIjtmb250LXNpemU6MzBweDtsaW5lLWhlaWdodDo2NXB4O2hlaWdodDozMHB4O2xldHRlci1zcGFjaW5nOi4yZW19JykpLGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoZSl9fWNhdGNoKHQpe2NvbnNvbGUuZXJyb3IoXCJ2aXRlLXBsdWdpbi1jc3MtaW5qZWN0ZWQtYnktanNcIix0KX19KSgpO1xuY29uc3QgciA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48bGluZSB4MT1cIjZcIiB4Mj1cIjEwXCIgeTE9XCIxMlwiIHkyPVwiMTJcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz48bGluZSB4MT1cIjE0XCIgeDI9XCIxOFwiIHkxPVwiMTJcIiB5Mj1cIjEyXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIi8+PC9zdmc+Jztcbi8qKlxuICogRGVsaW1pdGVyIEJsb2NrIGZvciB0aGUgRWRpdG9yLmpzLlxuICpcbiAqIEBhdXRob3IgQ29kZVggKHRlYW1AaWZtby5zdSlcbiAqIEBjb3B5cmlnaHQgQ29kZVggMjAxOFxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKiBAdmVyc2lvbiAyLjAuMFxuICovXG5jbGFzcyBuIHtcbiAgLyoqXG4gICAqIE5vdGlmeSBjb3JlIHRoYXQgcmVhZC1vbmx5IG1vZGUgaXMgc3VwcG9ydGVkXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgZ2V0IGlzUmVhZE9ubHlTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIC8qKlxuICAgKiBBbGxvdyBUb29sIHRvIGhhdmUgbm8gY29udGVudFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGdldCBjb250ZW50bGVzcygpIHtcbiAgICByZXR1cm4gITA7XG4gIH1cbiAgLyoqXG4gICAqIFJlbmRlciBwbHVnaW5gcyBtYWluIEVsZW1lbnQgYW5kIGZpbGwgaXQgd2l0aCBzYXZlZCBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSB7e2RhdGE6IERlbGltaXRlckRhdGEsIGNvbmZpZzogb2JqZWN0LCBhcGk6IG9iamVjdH19XG4gICAqICAgZGF0YSDigJQgcHJldmlvdXNseSBzYXZlZCBkYXRhXG4gICAqICAgY29uZmlnIC0gdXNlciBjb25maWcgZm9yIFRvb2xcbiAgICogICBhcGkgLSBFZGl0b3IuanMgQVBJXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGRhdGE6IHQsIGNvbmZpZzogcywgYXBpOiBlIH0pIHtcbiAgICB0aGlzLmFwaSA9IGUsIHRoaXMuX0NTUyA9IHtcbiAgICAgIGJsb2NrOiB0aGlzLmFwaS5zdHlsZXMuYmxvY2ssXG4gICAgICB3cmFwcGVyOiBcImNlLWRlbGltaXRlclwiXG4gICAgfSwgdGhpcy5fZWxlbWVudCA9IHRoaXMuZHJhd1ZpZXcoKSwgdGhpcy5kYXRhID0gdDtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIFRvb2wncyB2aWV3XG4gICAqIEByZXR1cm4ge0hUTUxEaXZFbGVtZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZHJhd1ZpZXcoKSB7XG4gICAgbGV0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHJldHVybiB0LmNsYXNzTGlzdC5hZGQodGhpcy5fQ1NTLndyYXBwZXIsIHRoaXMuX0NTUy5ibG9jayksIHQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBUb29sJ3Mgdmlld1xuICAgKiBAcmV0dXJucyB7SFRNTERpdkVsZW1lbnR9XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgfVxuICAvKipcbiAgICogRXh0cmFjdCBUb29sJ3MgZGF0YSBmcm9tIHRoZSB2aWV3XG4gICAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHRvb2xzQ29udGVudCAtIFBhcmFncmFwaCB0b29scyByZW5kZXJlZCB2aWV3XG4gICAqIEByZXR1cm5zIHtEZWxpbWl0ZXJEYXRhfSAtIHNhdmVkIGRhdGFcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc2F2ZSh0KSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIC8qKlxuICAgKiBHZXQgVG9vbCB0b29sYm94IHNldHRpbmdzXG4gICAqIGljb24gLSBUb29sIGljb24ncyBTVkdcbiAgICogdGl0bGUgLSB0aXRsZSB0byBzaG93IGluIHRvb2xib3hcbiAgICpcbiAgICogQHJldHVybiB7e2ljb246IHN0cmluZywgdGl0bGU6IHN0cmluZ319XG4gICAqL1xuICBzdGF0aWMgZ2V0IHRvb2xib3goKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGljb246IHIsXG4gICAgICB0aXRsZTogXCJEZWxpbWl0ZXJcIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERlbGltaXRlciBvblBhc3RlIGNvbmZpZ3VyYXRpb25cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc3RhdGljIGdldCBwYXN0ZUNvbmZpZygpIHtcbiAgICByZXR1cm4geyB0YWdzOiBbXCJIUlwiXSB9O1xuICB9XG4gIC8qKlxuICAgKiBPbiBwYXN0ZSBjYWxsYmFjayB0aGF0IGlzIGZpcmVkIGZyb20gRWRpdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7UGFzdGVFdmVudH0gZXZlbnQgLSBldmVudCB3aXRoIHBhc3RlZCBkYXRhXG4gICAqL1xuICBvblBhc3RlKHQpIHtcbiAgICB0aGlzLmRhdGEgPSB7fTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgbiBhcyBkZWZhdWx0XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@editorjs/delimiter/dist/delimiter.mjs\n");

/***/ }),

/***/ "./node_modules/@editorjs/editorjs/dist/editorjs.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@editorjs/editorjs/dist/editorjs.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Ts)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".ce-hint--align-start{text-align:left}.ce-hint--align-center{text-align:center}.ce-hint__description{opacity:.6;margin-top:3px}\")),document.head.appendChild(e)}}catch(t){console.error(\"vite-plugin-css-injected-by-js\",t)}})();\nvar ko = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction Fe(n) {\n  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, \"default\") ? n.default : n;\n}\nfunction ze() {\n}\nObject.assign(ze, {\n  default: ze,\n  register: ze,\n  revert: function() {\n  },\n  __esModule: !0\n});\nElement.prototype.matches || (Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function(n) {\n  const e = (this.document || this.ownerDocument).querySelectorAll(n);\n  let t = e.length;\n  for (; --t >= 0 && e.item(t) !== this; )\n    ;\n  return t > -1;\n});\nElement.prototype.closest || (Element.prototype.closest = function(n) {\n  let e = this;\n  if (!document.documentElement.contains(e))\n    return null;\n  do {\n    if (e.matches(n))\n      return e;\n    e = e.parentElement || e.parentNode;\n  } while (e !== null);\n  return null;\n});\nElement.prototype.prepend || (Element.prototype.prepend = function(e) {\n  const t = document.createDocumentFragment();\n  Array.isArray(e) || (e = [e]), e.forEach((o) => {\n    const i = o instanceof Node;\n    t.appendChild(i ? o : document.createTextNode(o));\n  }), this.insertBefore(t, this.firstChild);\n});\nElement.prototype.scrollIntoViewIfNeeded || (Element.prototype.scrollIntoViewIfNeeded = function(n) {\n  n = arguments.length === 0 ? !0 : !!n;\n  const e = this.parentNode, t = window.getComputedStyle(e, null), o = parseInt(t.getPropertyValue(\"border-top-width\")), i = parseInt(t.getPropertyValue(\"border-left-width\")), s = this.offsetTop - e.offsetTop < e.scrollTop, r = this.offsetTop - e.offsetTop + this.clientHeight - o > e.scrollTop + e.clientHeight, l = this.offsetLeft - e.offsetLeft < e.scrollLeft, a = this.offsetLeft - e.offsetLeft + this.clientWidth - i > e.scrollLeft + e.clientWidth, c = s && !r;\n  (s || r) && n && (e.scrollTop = this.offsetTop - e.offsetTop - e.clientHeight / 2 - o + this.clientHeight / 2), (l || a) && n && (e.scrollLeft = this.offsetLeft - e.offsetLeft - e.clientWidth / 2 - i + this.clientWidth / 2), (s || r || l || a) && !n && this.scrollIntoView(c);\n});\nwindow.requestIdleCallback = window.requestIdleCallback || function(n) {\n  const e = Date.now();\n  return setTimeout(function() {\n    n({\n      didTimeout: !1,\n      timeRemaining: function() {\n        return Math.max(0, 50 - (Date.now() - e));\n      }\n    });\n  }, 1);\n};\nwindow.cancelIdleCallback = window.cancelIdleCallback || function(n) {\n  clearTimeout(n);\n};\nlet vo = (n = 21) => crypto.getRandomValues(new Uint8Array(n)).reduce((e, t) => (t &= 63, t < 36 ? e += t.toString(36) : t < 62 ? e += (t - 26).toString(36).toUpperCase() : t > 62 ? e += \"-\" : e += \"_\", e), \"\");\nvar It = /* @__PURE__ */ ((n) => (n.VERBOSE = \"VERBOSE\", n.INFO = \"INFO\", n.WARN = \"WARN\", n.ERROR = \"ERROR\", n))(It || {});\nconst w = {\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  ESC: 27,\n  SPACE: 32,\n  LEFT: 37,\n  UP: 38,\n  DOWN: 40,\n  RIGHT: 39,\n  DELETE: 46,\n  META: 91,\n  SLASH: 191\n}, wo = {\n  LEFT: 0,\n  WHEEL: 1,\n  RIGHT: 2,\n  BACKWARD: 3,\n  FORWARD: 4\n};\nfunction Be(n, e, t = \"log\", o, i = \"color: inherit\") {\n  if (!(\"console\" in window) || !window.console[t])\n    return;\n  const s = [\"info\", \"log\", \"warn\", \"error\"].includes(t), r = [];\n  switch (Be.logLevel) {\n    case \"ERROR\":\n      if (t !== \"error\")\n        return;\n      break;\n    case \"WARN\":\n      if (![\"error\", \"warn\"].includes(t))\n        return;\n      break;\n    case \"INFO\":\n      if (!s || n)\n        return;\n      break;\n  }\n  o && r.push(o);\n  const l = \"Editor.js 2.30.6\", a = `line-height: 1em;\n            color: #006FEA;\n            display: inline-block;\n            font-size: 11px;\n            line-height: 1em;\n            background-color: #fff;\n            padding: 4px 9px;\n            border-radius: 30px;\n            border: 1px solid rgba(56, 138, 229, 0.16);\n            margin: 4px 5px 4px 0;`;\n  n && (s ? (r.unshift(a, i), e = `%c${l}%c ${e}`) : e = `( ${l} )${e}`);\n  try {\n    s ? o ? console[t](`${e} %o`, ...r) : console[t](e, ...r) : console[t](e);\n  } catch {\n  }\n}\nBe.logLevel = \"VERBOSE\";\nfunction xo(n) {\n  Be.logLevel = n;\n}\nconst I = Be.bind(window, !1), X = Be.bind(window, !0);\nfunction re(n) {\n  return Object.prototype.toString.call(n).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n}\nfunction O(n) {\n  return re(n) === \"function\" || re(n) === \"asyncfunction\";\n}\nfunction R(n) {\n  return re(n) === \"object\";\n}\nfunction Q(n) {\n  return re(n) === \"string\";\n}\nfunction yo(n) {\n  return re(n) === \"boolean\";\n}\nfunction bt(n) {\n  return re(n) === \"number\";\n}\nfunction kt(n) {\n  return re(n) === \"undefined\";\n}\nfunction V(n) {\n  return n ? Object.keys(n).length === 0 && n.constructor === Object : !0;\n}\nfunction Mt(n) {\n  return n > 47 && n < 58 || // number keys\n  n === 32 || n === 13 || // Space bar & return key(s)\n  n === 229 || // processing key input for certain languages — Chinese, Japanese, etc.\n  n > 64 && n < 91 || // letter keys\n  n > 95 && n < 112 || // Numpad keys\n  n > 185 && n < 193 || // ;=,-./` (in order)\n  n > 218 && n < 223;\n}\nasync function Eo(n, e = () => {\n}, t = () => {\n}) {\n  async function o(i, s, r) {\n    try {\n      await i.function(i.data), await s(kt(i.data) ? {} : i.data);\n    } catch {\n      r(kt(i.data) ? {} : i.data);\n    }\n  }\n  return n.reduce(async (i, s) => (await i, o(s, e, t)), Promise.resolve());\n}\nfunction At(n) {\n  return Array.prototype.slice.call(n);\n}\nfunction Oe(n, e) {\n  return function() {\n    const t = this, o = arguments;\n    window.setTimeout(() => n.apply(t, o), e);\n  };\n}\nfunction Bo(n) {\n  return n.name.split(\".\").pop();\n}\nfunction To(n) {\n  return /^[-\\w]+\\/([-+\\w]+|\\*)$/.test(n);\n}\nfunction vt(n, e, t) {\n  let o;\n  return (...i) => {\n    const s = this, r = () => {\n      o = null, t || n.apply(s, i);\n    }, l = t && !o;\n    window.clearTimeout(o), o = window.setTimeout(r, e), l && n.apply(s, i);\n  };\n}\nfunction Ve(n, e, t = void 0) {\n  let o, i, s, r = null, l = 0;\n  t || (t = {});\n  const a = function() {\n    l = t.leading === !1 ? 0 : Date.now(), r = null, s = n.apply(o, i), r || (o = i = null);\n  };\n  return function() {\n    const c = Date.now();\n    !l && t.leading === !1 && (l = c);\n    const u = e - (c - l);\n    return o = this, i = arguments, u <= 0 || u > e ? (r && (clearTimeout(r), r = null), l = c, s = n.apply(o, i), r || (o = i = null)) : !r && t.trailing !== !1 && (r = setTimeout(a, u)), s;\n  };\n}\nfunction Co() {\n  const n = {\n    win: !1,\n    mac: !1,\n    x11: !1,\n    linux: !1\n  }, e = Object.keys(n).find((t) => window.navigator.appVersion.toLowerCase().indexOf(t) !== -1);\n  return e && (n[e] = !0), n;\n}\nfunction Le(n) {\n  return n[0].toUpperCase() + n.slice(1);\n}\nfunction qe(n, ...e) {\n  if (!e.length)\n    return n;\n  const t = e.shift();\n  if (R(n) && R(t))\n    for (const o in t)\n      R(t[o]) ? (n[o] || Object.assign(n, { [o]: {} }), qe(n[o], t[o])) : Object.assign(n, { [o]: t[o] });\n  return qe(n, ...e);\n}\nfunction tt(n) {\n  const e = Co();\n  return n = n.replace(/shift/gi, \"⇧\").replace(/backspace/gi, \"⌫\").replace(/enter/gi, \"⏎\").replace(/up/gi, \"↑\").replace(/left/gi, \"→\").replace(/down/gi, \"↓\").replace(/right/gi, \"←\").replace(/escape/gi, \"⎋\").replace(/insert/gi, \"Ins\").replace(/delete/gi, \"␡\").replace(/\\+/gi, \" + \"), e.mac ? n = n.replace(/ctrl|cmd/gi, \"⌘\").replace(/alt/gi, \"⌥\") : n = n.replace(/cmd/gi, \"Ctrl\").replace(/windows/gi, \"WIN\"), n;\n}\nfunction So(n) {\n  try {\n    return new URL(n).href;\n  } catch {\n  }\n  return n.substring(0, 2) === \"//\" ? window.location.protocol + n : window.location.origin + n;\n}\nfunction Io() {\n  return vo(10);\n}\nfunction Mo(n) {\n  window.open(n, \"_blank\");\n}\nfunction Ao(n = \"\") {\n  return `${n}${Math.floor(Math.random() * 1e8).toString(16)}`;\n}\nfunction Ze(n, e, t) {\n  const o = `«${e}» is deprecated and will be removed in the next major release. Please use the «${t}» instead.`;\n  n && X(o, \"warn\");\n}\nfunction ue(n, e, t) {\n  const o = t.value ? \"value\" : \"get\", i = t[o], s = `#${e}Cache`;\n  if (t[o] = function(...r) {\n    return this[s] === void 0 && (this[s] = i.apply(this, ...r)), this[s];\n  }, o === \"get\" && t.set) {\n    const r = t.set;\n    t.set = function(l) {\n      delete n[s], r.apply(this, l);\n    };\n  }\n  return t;\n}\nconst Ot = 650;\nfunction pe() {\n  return window.matchMedia(`(max-width: ${Ot}px)`).matches;\n}\nconst Ge = typeof window < \"u\" && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === \"MacIntel\" && window.navigator.maxTouchPoints > 1);\nfunction Oo(n, e) {\n  const t = Array.isArray(n) || R(n), o = Array.isArray(e) || R(e);\n  return t || o ? JSON.stringify(n) === JSON.stringify(e) : n === e;\n}\nclass d {\n  /**\n   * Check if passed tag has no closed tag\n   *\n   * @param {HTMLElement} tag - element to check\n   * @returns {boolean}\n   */\n  static isSingleTag(e) {\n    return e.tagName && [\n      \"AREA\",\n      \"BASE\",\n      \"BR\",\n      \"COL\",\n      \"COMMAND\",\n      \"EMBED\",\n      \"HR\",\n      \"IMG\",\n      \"INPUT\",\n      \"KEYGEN\",\n      \"LINK\",\n      \"META\",\n      \"PARAM\",\n      \"SOURCE\",\n      \"TRACK\",\n      \"WBR\"\n    ].includes(e.tagName);\n  }\n  /**\n   * Check if element is BR or WBR\n   *\n   * @param {HTMLElement} element - element to check\n   * @returns {boolean}\n   */\n  static isLineBreakTag(e) {\n    return e && e.tagName && [\n      \"BR\",\n      \"WBR\"\n    ].includes(e.tagName);\n  }\n  /**\n   * Helper for making Elements with class name and attributes\n   *\n   * @param  {string} tagName - new Element tag name\n   * @param  {string[]|string} [classNames] - list or name of CSS class name(s)\n   * @param  {object} [attributes] - any attributes\n   * @returns {HTMLElement}\n   */\n  static make(e, t = null, o = {}) {\n    const i = document.createElement(e);\n    if (Array.isArray(t)) {\n      const s = t.filter((r) => r !== void 0);\n      i.classList.add(...s);\n    } else\n      t && i.classList.add(t);\n    for (const s in o)\n      Object.prototype.hasOwnProperty.call(o, s) && (i[s] = o[s]);\n    return i;\n  }\n  /**\n   * Creates Text Node with the passed content\n   *\n   * @param {string} content - text content\n   * @returns {Text}\n   */\n  static text(e) {\n    return document.createTextNode(e);\n  }\n  /**\n   * Append one or several elements to the parent\n   *\n   * @param  {Element|DocumentFragment} parent - where to append\n   * @param  {Element|Element[]|DocumentFragment|Text|Text[]} elements - element or elements list\n   */\n  static append(e, t) {\n    Array.isArray(t) ? t.forEach((o) => e.appendChild(o)) : e.appendChild(t);\n  }\n  /**\n   * Append element or a couple to the beginning of the parent elements\n   *\n   * @param {Element} parent - where to append\n   * @param {Element|Element[]} elements - element or elements list\n   */\n  static prepend(e, t) {\n    Array.isArray(t) ? (t = t.reverse(), t.forEach((o) => e.prepend(o))) : e.prepend(t);\n  }\n  /**\n   * Swap two elements in parent\n   *\n   * @param {HTMLElement} el1 - from\n   * @param {HTMLElement} el2 - to\n   * @deprecated\n   */\n  static swap(e, t) {\n    const o = document.createElement(\"div\"), i = e.parentNode;\n    i.insertBefore(o, e), i.insertBefore(e, t), i.insertBefore(t, o), i.removeChild(o);\n  }\n  /**\n   * Selector Decorator\n   *\n   * Returns first match\n   *\n   * @param {Element} el - element we searching inside. Default - DOM Document\n   * @param {string} selector - searching string\n   * @returns {Element}\n   */\n  static find(e = document, t) {\n    return e.querySelector(t);\n  }\n  /**\n   * Get Element by Id\n   *\n   * @param {string} id - id to find\n   * @returns {HTMLElement | null}\n   */\n  static get(e) {\n    return document.getElementById(e);\n  }\n  /**\n   * Selector Decorator.\n   *\n   * Returns all matches\n   *\n   * @param {Element|Document} el - element we searching inside. Default - DOM Document\n   * @param {string} selector - searching string\n   * @returns {NodeList}\n   */\n  static findAll(e = document, t) {\n    return e.querySelectorAll(t);\n  }\n  /**\n   * Returns CSS selector for all text inputs\n   */\n  static get allInputsSelector() {\n    return \"[contenteditable=true], textarea, input:not([type]), \" + [\"text\", \"password\", \"email\", \"number\", \"search\", \"tel\", \"url\"].map((t) => `input[type=\"${t}\"]`).join(\", \");\n  }\n  /**\n   * Find all contenteditable, textarea and editable input elements passed holder contains\n   *\n   * @param holder - element where to find inputs\n   */\n  static findAllInputs(e) {\n    return At(e.querySelectorAll(d.allInputsSelector)).reduce((t, o) => d.isNativeInput(o) || d.containsOnlyInlineElements(o) ? [...t, o] : [...t, ...d.getDeepestBlockElements(o)], []);\n  }\n  /**\n   * Search for deepest node which is Leaf.\n   * Leaf is the vertex that doesn't have any child nodes\n   *\n   * @description Method recursively goes throw the all Node until it finds the Leaf\n   * @param {Node} node - root Node. From this vertex we start Deep-first search\n   *                      {@link https://en.wikipedia.org/wiki/Depth-first_search}\n   * @param {boolean} [atLast] - find last text node\n   * @returns - it can be text Node or Element Node, so that caret will able to work with it\n   *            Can return null if node is Document or DocumentFragment, or node is not attached to the DOM\n   */\n  static getDeepestNode(e, t = !1) {\n    const o = t ? \"lastChild\" : \"firstChild\", i = t ? \"previousSibling\" : \"nextSibling\";\n    if (e && e.nodeType === Node.ELEMENT_NODE && e[o]) {\n      let s = e[o];\n      if (d.isSingleTag(s) && !d.isNativeInput(s) && !d.isLineBreakTag(s))\n        if (s[i])\n          s = s[i];\n        else if (s.parentNode[i])\n          s = s.parentNode[i];\n        else\n          return s.parentNode;\n      return this.getDeepestNode(s, t);\n    }\n    return e;\n  }\n  /**\n   * Check if object is DOM node\n   *\n   * @param {*} node - object to check\n   * @returns {boolean}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static isElement(e) {\n    return bt(e) ? !1 : e && e.nodeType && e.nodeType === Node.ELEMENT_NODE;\n  }\n  /**\n   * Check if object is DocumentFragment node\n   *\n   * @param {object} node - object to check\n   * @returns {boolean}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static isFragment(e) {\n    return bt(e) ? !1 : e && e.nodeType && e.nodeType === Node.DOCUMENT_FRAGMENT_NODE;\n  }\n  /**\n   * Check if passed element is contenteditable\n   *\n   * @param {HTMLElement} element - html element to check\n   * @returns {boolean}\n   */\n  static isContentEditable(e) {\n    return e.contentEditable === \"true\";\n  }\n  /**\n   * Checks target if it is native input\n   *\n   * @param {*} target - HTML element or string\n   * @returns {boolean}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static isNativeInput(e) {\n    const t = [\n      \"INPUT\",\n      \"TEXTAREA\"\n    ];\n    return e && e.tagName ? t.includes(e.tagName) : !1;\n  }\n  /**\n   * Checks if we can set caret\n   *\n   * @param {HTMLElement} target - target to check\n   * @returns {boolean}\n   */\n  static canSetCaret(e) {\n    let t = !0;\n    if (d.isNativeInput(e))\n      switch (e.type) {\n        case \"file\":\n        case \"checkbox\":\n        case \"radio\":\n        case \"hidden\":\n        case \"submit\":\n        case \"button\":\n        case \"image\":\n        case \"reset\":\n          t = !1;\n          break;\n      }\n    else\n      t = d.isContentEditable(e);\n    return t;\n  }\n  /**\n   * Checks node if it is empty\n   *\n   * @description Method checks simple Node without any childs for emptiness\n   * If you have Node with 2 or more children id depth, you better use {@link Dom#isEmpty} method\n   * @param {Node} node - node to check\n   * @param {string} [ignoreChars] - char or substring to treat as empty\n   * @returns {boolean} true if it is empty\n   */\n  static isNodeEmpty(e, t) {\n    let o;\n    return this.isSingleTag(e) && !this.isLineBreakTag(e) ? !1 : (this.isElement(e) && this.isNativeInput(e) ? o = e.value : o = e.textContent.replace(\"​\", \"\"), t && (o = o.replace(new RegExp(t, \"g\"), \"\")), o.trim().length === 0);\n  }\n  /**\n   * checks node if it is doesn't have any child nodes\n   *\n   * @param {Node} node - node to check\n   * @returns {boolean}\n   */\n  static isLeaf(e) {\n    return e ? e.childNodes.length === 0 : !1;\n  }\n  /**\n   * breadth-first search (BFS)\n   * {@link https://en.wikipedia.org/wiki/Breadth-first_search}\n   *\n   * @description Pushes to stack all DOM leafs and checks for emptiness\n   * @param {Node} node - node to check\n   * @param {string} [ignoreChars] - char or substring to treat as empty\n   * @returns {boolean}\n   */\n  static isEmpty(e, t) {\n    e.normalize();\n    const o = [e];\n    for (; o.length > 0; )\n      if (e = o.shift(), !!e) {\n        if (this.isLeaf(e) && !this.isNodeEmpty(e, t))\n          return !1;\n        e.childNodes && o.push(...Array.from(e.childNodes));\n      }\n    return !0;\n  }\n  /**\n   * Check if string contains html elements\n   *\n   * @param {string} str - string to check\n   * @returns {boolean}\n   */\n  static isHTMLString(e) {\n    const t = d.make(\"div\");\n    return t.innerHTML = e, t.childElementCount > 0;\n  }\n  /**\n   * Return length of node`s text content\n   *\n   * @param {Node} node - node with content\n   * @returns {number}\n   */\n  static getContentLength(e) {\n    return d.isNativeInput(e) ? e.value.length : e.nodeType === Node.TEXT_NODE ? e.length : e.textContent.length;\n  }\n  /**\n   * Return array of names of block html elements\n   *\n   * @returns {string[]}\n   */\n  static get blockElements() {\n    return [\n      \"address\",\n      \"article\",\n      \"aside\",\n      \"blockquote\",\n      \"canvas\",\n      \"div\",\n      \"dl\",\n      \"dt\",\n      \"fieldset\",\n      \"figcaption\",\n      \"figure\",\n      \"footer\",\n      \"form\",\n      \"h1\",\n      \"h2\",\n      \"h3\",\n      \"h4\",\n      \"h5\",\n      \"h6\",\n      \"header\",\n      \"hgroup\",\n      \"hr\",\n      \"li\",\n      \"main\",\n      \"nav\",\n      \"noscript\",\n      \"ol\",\n      \"output\",\n      \"p\",\n      \"pre\",\n      \"ruby\",\n      \"section\",\n      \"table\",\n      \"tbody\",\n      \"thead\",\n      \"tr\",\n      \"tfoot\",\n      \"ul\",\n      \"video\"\n    ];\n  }\n  /**\n   * Check if passed content includes only inline elements\n   *\n   * @param {string|HTMLElement} data - element or html string\n   * @returns {boolean}\n   */\n  static containsOnlyInlineElements(e) {\n    let t;\n    Q(e) ? (t = document.createElement(\"div\"), t.innerHTML = e) : t = e;\n    const o = (i) => !d.blockElements.includes(i.tagName.toLowerCase()) && Array.from(i.children).every(o);\n    return Array.from(t.children).every(o);\n  }\n  /**\n   * Find and return all block elements in the passed parent (including subtree)\n   *\n   * @param {HTMLElement} parent - root element\n   * @returns {HTMLElement[]}\n   */\n  static getDeepestBlockElements(e) {\n    return d.containsOnlyInlineElements(e) ? [e] : Array.from(e.children).reduce((t, o) => [...t, ...d.getDeepestBlockElements(o)], []);\n  }\n  /**\n   * Helper for get holder from {string} or return HTMLElement\n   *\n   * @param {string | HTMLElement} element - holder's id or holder's HTML Element\n   * @returns {HTMLElement}\n   */\n  static getHolder(e) {\n    return Q(e) ? document.getElementById(e) : e;\n  }\n  /**\n   * Returns true if element is anchor (is A tag)\n   *\n   * @param {Element} element - element to check\n   * @returns {boolean}\n   */\n  static isAnchor(e) {\n    return e.tagName.toLowerCase() === \"a\";\n  }\n  /**\n   * Return element's offset related to the document\n   *\n   * @todo handle case when editor initialized in scrollable popup\n   * @param el - element to compute offset\n   */\n  static offset(e) {\n    const t = e.getBoundingClientRect(), o = window.pageXOffset || document.documentElement.scrollLeft, i = window.pageYOffset || document.documentElement.scrollTop, s = t.top + i, r = t.left + o;\n    return {\n      top: s,\n      left: r,\n      bottom: s + t.height,\n      right: r + t.width\n    };\n  }\n}\nfunction Lo(n) {\n  return !/[^\\t\\n\\r ]/.test(n);\n}\nfunction _o(n) {\n  const e = window.getComputedStyle(n), t = parseFloat(e.fontSize), o = parseFloat(e.lineHeight) || t * 1.2, i = parseFloat(e.paddingTop), s = parseFloat(e.borderTopWidth), r = parseFloat(e.marginTop), l = t * 0.8, a = (o - t) / 2;\n  return r + s + i + a + l;\n}\nfunction Lt(n) {\n  n.dataset.empty = d.isEmpty(n) ? \"true\" : \"false\";\n}\nconst No = {\n  blockTunes: {\n    toggler: {\n      \"Click to tune\": \"\",\n      \"or drag to move\": \"\"\n    }\n  },\n  inlineToolbar: {\n    converter: {\n      \"Convert to\": \"\"\n    }\n  },\n  toolbar: {\n    toolbox: {\n      Add: \"\"\n    }\n  },\n  popover: {\n    Filter: \"\",\n    \"Nothing found\": \"\",\n    \"Convert to\": \"\"\n  }\n}, Po = {\n  Text: \"\",\n  Link: \"\",\n  Bold: \"\",\n  Italic: \"\"\n}, Do = {\n  link: {\n    \"Add a link\": \"\"\n  },\n  stub: {\n    \"The block can not be displayed correctly.\": \"\"\n  }\n}, Ro = {\n  delete: {\n    Delete: \"\",\n    \"Click to delete\": \"\"\n  },\n  moveUp: {\n    \"Move up\": \"\"\n  },\n  moveDown: {\n    \"Move down\": \"\"\n  }\n}, _t = {\n  ui: No,\n  toolNames: Po,\n  tools: Do,\n  blockTunes: Ro\n}, Nt = class ae {\n  /**\n   * Type-safe translation for internal UI texts:\n   * Perform translation of the string by namespace and a key\n   *\n   * @example I18n.ui(I18nInternalNS.ui.blockTunes.toggler, 'Click to tune')\n   * @param internalNamespace - path to translated string in dictionary\n   * @param dictKey - dictionary key. Better to use default locale original text\n   */\n  static ui(e, t) {\n    return ae._t(e, t);\n  }\n  /**\n   * Translate for external strings that is not presented in default dictionary.\n   * For example, for user-specified tool names\n   *\n   * @param namespace - path to translated string in dictionary\n   * @param dictKey - dictionary key. Better to use default locale original text\n   */\n  static t(e, t) {\n    return ae._t(e, t);\n  }\n  /**\n   * Adjust module for using external dictionary\n   *\n   * @param dictionary - new messages list to override default\n   */\n  static setDictionary(e) {\n    ae.currentDictionary = e;\n  }\n  /**\n   * Perform translation both for internal and external namespaces\n   * If there is no translation found, returns passed key as a translated message\n   *\n   * @param namespace - path to translated string in dictionary\n   * @param dictKey - dictionary key. Better to use default locale original text\n   */\n  static _t(e, t) {\n    const o = ae.getNamespace(e);\n    return !o || !o[t] ? t : o[t];\n  }\n  /**\n   * Find messages section by namespace path\n   *\n   * @param namespace - path to section\n   */\n  static getNamespace(e) {\n    return e.split(\".\").reduce((o, i) => !o || !Object.keys(o).length ? {} : o[i], ae.currentDictionary);\n  }\n};\nNt.currentDictionary = _t;\nlet z = Nt;\nclass Pt extends Error {\n}\nclass Te {\n  constructor() {\n    this.subscribers = {};\n  }\n  /**\n   * Subscribe any event on callback\n   *\n   * @param eventName - event name\n   * @param callback - subscriber\n   */\n  on(e, t) {\n    e in this.subscribers || (this.subscribers[e] = []), this.subscribers[e].push(t);\n  }\n  /**\n   * Subscribe any event on callback. Callback will be called once and be removed from subscribers array after call.\n   *\n   * @param eventName - event name\n   * @param callback - subscriber\n   */\n  once(e, t) {\n    e in this.subscribers || (this.subscribers[e] = []);\n    const o = (i) => {\n      const s = t(i), r = this.subscribers[e].indexOf(o);\n      return r !== -1 && this.subscribers[e].splice(r, 1), s;\n    };\n    this.subscribers[e].push(o);\n  }\n  /**\n   * Emit callbacks with passed data\n   *\n   * @param eventName - event name\n   * @param data - subscribers get this data when they were fired\n   */\n  emit(e, t) {\n    V(this.subscribers) || !this.subscribers[e] || this.subscribers[e].reduce((o, i) => {\n      const s = i(o);\n      return s !== void 0 ? s : o;\n    }, t);\n  }\n  /**\n   * Unsubscribe callback from event\n   *\n   * @param eventName - event name\n   * @param callback - event handler\n   */\n  off(e, t) {\n    if (this.subscribers[e] === void 0) {\n      console.warn(`EventDispatcher .off(): there is no subscribers for event \"${e.toString()}\". Probably, .off() called before .on()`);\n      return;\n    }\n    for (let o = 0; o < this.subscribers[e].length; o++)\n      if (this.subscribers[e][o] === t) {\n        delete this.subscribers[e][o];\n        break;\n      }\n  }\n  /**\n   * Destroyer\n   * clears subscribers list\n   */\n  destroy() {\n    this.subscribers = {};\n  }\n}\nfunction G(n) {\n  Object.setPrototypeOf(this, {\n    /**\n     * Block id\n     *\n     * @returns {string}\n     */\n    get id() {\n      return n.id;\n    },\n    /**\n     * Tool name\n     *\n     * @returns {string}\n     */\n    get name() {\n      return n.name;\n    },\n    /**\n     * Tool config passed on Editor's initialization\n     *\n     * @returns {ToolConfig}\n     */\n    get config() {\n      return n.config;\n    },\n    /**\n     * .ce-block element, that wraps plugin contents\n     *\n     * @returns {HTMLElement}\n     */\n    get holder() {\n      return n.holder;\n    },\n    /**\n     * True if Block content is empty\n     *\n     * @returns {boolean}\n     */\n    get isEmpty() {\n      return n.isEmpty;\n    },\n    /**\n     * True if Block is selected with Cross-Block selection\n     *\n     * @returns {boolean}\n     */\n    get selected() {\n      return n.selected;\n    },\n    /**\n     * Set Block's stretch state\n     *\n     * @param {boolean} state — state to set\n     */\n    set stretched(t) {\n      n.stretched = t;\n    },\n    /**\n     * True if Block is stretched\n     *\n     * @returns {boolean}\n     */\n    get stretched() {\n      return n.stretched;\n    },\n    /**\n     * True if Block has inputs to be focused\n     */\n    get focusable() {\n      return n.focusable;\n    },\n    /**\n     * Call Tool method with errors handler under-the-hood\n     *\n     * @param {string} methodName - method to call\n     * @param {object} param - object with parameters\n     * @returns {unknown}\n     */\n    call(t, o) {\n      return n.call(t, o);\n    },\n    /**\n     * Save Block content\n     *\n     * @returns {Promise<void|SavedData>}\n     */\n    save() {\n      return n.save();\n    },\n    /**\n     * Validate Block data\n     *\n     * @param {BlockToolData} data - data to validate\n     * @returns {Promise<boolean>}\n     */\n    validate(t) {\n      return n.validate(t);\n    },\n    /**\n     * Allows to say Editor that Block was changed. Used to manually trigger Editor's 'onChange' callback\n     * Can be useful for block changes invisible for editor core.\n     */\n    dispatchChange() {\n      n.dispatchChange();\n    },\n    /**\n     * Tool could specify several entries to be displayed at the Toolbox (for example, \"Heading 1\", \"Heading 2\", \"Heading 3\")\n     * This method returns the entry that is related to the Block (depended on the Block data)\n     */\n    getActiveToolboxEntry() {\n      return n.getActiveToolboxEntry();\n    }\n  });\n}\nclass Ce {\n  constructor() {\n    this.allListeners = [];\n  }\n  /**\n   * Assigns event listener on element and returns unique identifier\n   *\n   * @param {EventTarget} element - DOM element that needs to be listened\n   * @param {string} eventType - event type\n   * @param {Function} handler - method that will be fired on event\n   * @param {boolean|AddEventListenerOptions} options - useCapture or {capture, passive, once}\n   */\n  on(e, t, o, i = !1) {\n    const s = Ao(\"l\"), r = {\n      id: s,\n      element: e,\n      eventType: t,\n      handler: o,\n      options: i\n    };\n    if (!this.findOne(e, t, o))\n      return this.allListeners.push(r), e.addEventListener(t, o, i), s;\n  }\n  /**\n   * Removes event listener from element\n   *\n   * @param {EventTarget} element - DOM element that we removing listener\n   * @param {string} eventType - event type\n   * @param {Function} handler - remove handler, if element listens several handlers on the same event type\n   * @param {boolean|AddEventListenerOptions} options - useCapture or {capture, passive, once}\n   */\n  off(e, t, o, i) {\n    const s = this.findAll(e, t, o);\n    s.forEach((r, l) => {\n      const a = this.allListeners.indexOf(s[l]);\n      a > -1 && (this.allListeners.splice(a, 1), r.element.removeEventListener(r.eventType, r.handler, r.options));\n    });\n  }\n  /**\n   * Removes listener by id\n   *\n   * @param {string} id - listener identifier\n   */\n  offById(e) {\n    const t = this.findById(e);\n    t && t.element.removeEventListener(t.eventType, t.handler, t.options);\n  }\n  /**\n   * Finds and returns first listener by passed params\n   *\n   * @param {EventTarget} element - event target\n   * @param {string} [eventType] - event type\n   * @param {Function} [handler] - event handler\n   * @returns {ListenerData|null}\n   */\n  findOne(e, t, o) {\n    const i = this.findAll(e, t, o);\n    return i.length > 0 ? i[0] : null;\n  }\n  /**\n   * Return all stored listeners by passed params\n   *\n   * @param {EventTarget} element - event target\n   * @param {string} eventType - event type\n   * @param {Function} handler - event handler\n   * @returns {ListenerData[]}\n   */\n  findAll(e, t, o) {\n    let i;\n    const s = e ? this.findByEventTarget(e) : [];\n    return e && t && o ? i = s.filter((r) => r.eventType === t && r.handler === o) : e && t ? i = s.filter((r) => r.eventType === t) : i = s, i;\n  }\n  /**\n   * Removes all listeners\n   */\n  removeAll() {\n    this.allListeners.map((e) => {\n      e.element.removeEventListener(e.eventType, e.handler, e.options);\n    }), this.allListeners = [];\n  }\n  /**\n   * Module cleanup on destruction\n   */\n  destroy() {\n    this.removeAll();\n  }\n  /**\n   * Search method: looks for listener by passed element\n   *\n   * @param {EventTarget} element - searching element\n   * @returns {Array} listeners that found on element\n   */\n  findByEventTarget(e) {\n    return this.allListeners.filter((t) => {\n      if (t.element === e)\n        return t;\n    });\n  }\n  /**\n   * Search method: looks for listener by passed event type\n   *\n   * @param {string} eventType - event type\n   * @returns {ListenerData[]} listeners that found on element\n   */\n  findByType(e) {\n    return this.allListeners.filter((t) => {\n      if (t.eventType === e)\n        return t;\n    });\n  }\n  /**\n   * Search method: looks for listener by passed handler\n   *\n   * @param {Function} handler - event handler\n   * @returns {ListenerData[]} listeners that found on element\n   */\n  findByHandler(e) {\n    return this.allListeners.filter((t) => {\n      if (t.handler === e)\n        return t;\n    });\n  }\n  /**\n   * Returns listener data found by id\n   *\n   * @param {string} id - listener identifier\n   * @returns {ListenerData}\n   */\n  findById(e) {\n    return this.allListeners.find((t) => t.id === e);\n  }\n}\nclass y {\n  /**\n   * @class\n   * @param options - Module options\n   * @param options.config - Module config\n   * @param options.eventsDispatcher - Common event bus\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    if (this.nodes = {}, this.listeners = new Ce(), this.readOnlyMutableListeners = {\n      /**\n       * Assigns event listener on DOM element and pushes into special array that might be removed\n       *\n       * @param {EventTarget} element - DOM Element\n       * @param {string} eventType - Event name\n       * @param {Function} handler - Event handler\n       * @param {boolean|AddEventListenerOptions} options - Listening options\n       */\n      on: (o, i, s, r = !1) => {\n        this.mutableListenerIds.push(\n          this.listeners.on(o, i, s, r)\n        );\n      },\n      /**\n       * Clears all mutable listeners\n       */\n      clearAll: () => {\n        for (const o of this.mutableListenerIds)\n          this.listeners.offById(o);\n        this.mutableListenerIds = [];\n      }\n    }, this.mutableListenerIds = [], new.target === y)\n      throw new TypeError(\"Constructors for abstract class Module are not allowed.\");\n    this.config = e, this.eventsDispatcher = t;\n  }\n  /**\n   * Editor modules setter\n   *\n   * @param {EditorModules} Editor - Editor's Modules\n   */\n  set state(e) {\n    this.Editor = e;\n  }\n  /**\n   * Remove memorized nodes\n   */\n  removeAllNodes() {\n    for (const e in this.nodes) {\n      const t = this.nodes[e];\n      t instanceof HTMLElement && t.remove();\n    }\n  }\n  /**\n   * Returns true if current direction is RTL (Right-To-Left)\n   */\n  get isRtl() {\n    return this.config.i18n.direction === \"rtl\";\n  }\n}\nclass b {\n  constructor() {\n    this.instance = null, this.selection = null, this.savedSelectionRange = null, this.isFakeBackgroundEnabled = !1, this.commandBackground = \"backColor\", this.commandRemoveFormat = \"removeFormat\";\n  }\n  /**\n   * Editor styles\n   *\n   * @returns {{editorWrapper: string, editorZone: string}}\n   */\n  static get CSS() {\n    return {\n      editorWrapper: \"codex-editor\",\n      editorZone: \"codex-editor__redactor\"\n    };\n  }\n  /**\n   * Returns selected anchor\n   * {@link https://developer.mozilla.org/ru/docs/Web/API/Selection/anchorNode}\n   *\n   * @returns {Node|null}\n   */\n  static get anchorNode() {\n    const e = window.getSelection();\n    return e ? e.anchorNode : null;\n  }\n  /**\n   * Returns selected anchor element\n   *\n   * @returns {Element|null}\n   */\n  static get anchorElement() {\n    const e = window.getSelection();\n    if (!e)\n      return null;\n    const t = e.anchorNode;\n    return t ? d.isElement(t) ? t : t.parentElement : null;\n  }\n  /**\n   * Returns selection offset according to the anchor node\n   * {@link https://developer.mozilla.org/ru/docs/Web/API/Selection/anchorOffset}\n   *\n   * @returns {number|null}\n   */\n  static get anchorOffset() {\n    const e = window.getSelection();\n    return e ? e.anchorOffset : null;\n  }\n  /**\n   * Is current selection range collapsed\n   *\n   * @returns {boolean|null}\n   */\n  static get isCollapsed() {\n    const e = window.getSelection();\n    return e ? e.isCollapsed : null;\n  }\n  /**\n   * Check current selection if it is at Editor's zone\n   *\n   * @returns {boolean}\n   */\n  static get isAtEditor() {\n    return this.isSelectionAtEditor(b.get());\n  }\n  /**\n   * Check if passed selection is at Editor's zone\n   *\n   * @param selection - Selection object to check\n   */\n  static isSelectionAtEditor(e) {\n    if (!e)\n      return !1;\n    let t = e.anchorNode || e.focusNode;\n    t && t.nodeType === Node.TEXT_NODE && (t = t.parentNode);\n    let o = null;\n    return t && t instanceof Element && (o = t.closest(`.${b.CSS.editorZone}`)), o ? o.nodeType === Node.ELEMENT_NODE : !1;\n  }\n  /**\n   * Check if passed range at Editor zone\n   *\n   * @param range - range to check\n   */\n  static isRangeAtEditor(e) {\n    if (!e)\n      return;\n    let t = e.startContainer;\n    t && t.nodeType === Node.TEXT_NODE && (t = t.parentNode);\n    let o = null;\n    return t && t instanceof Element && (o = t.closest(`.${b.CSS.editorZone}`)), o ? o.nodeType === Node.ELEMENT_NODE : !1;\n  }\n  /**\n   * Methods return boolean that true if selection exists on the page\n   */\n  static get isSelectionExists() {\n    return !!b.get().anchorNode;\n  }\n  /**\n   * Return first range\n   *\n   * @returns {Range|null}\n   */\n  static get range() {\n    return this.getRangeFromSelection(this.get());\n  }\n  /**\n   * Returns range from passed Selection object\n   *\n   * @param selection - Selection object to get Range from\n   */\n  static getRangeFromSelection(e) {\n    return e && e.rangeCount ? e.getRangeAt(0) : null;\n  }\n  /**\n   * Calculates position and size of selected text\n   *\n   * @returns {DOMRect | ClientRect}\n   */\n  static get rect() {\n    let e = document.selection, t, o = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    if (e && e.type !== \"Control\")\n      return e = e, t = e.createRange(), o.x = t.boundingLeft, o.y = t.boundingTop, o.width = t.boundingWidth, o.height = t.boundingHeight, o;\n    if (!window.getSelection)\n      return I(\"Method window.getSelection is not supported\", \"warn\"), o;\n    if (e = window.getSelection(), e.rangeCount === null || isNaN(e.rangeCount))\n      return I(\"Method SelectionUtils.rangeCount is not supported\", \"warn\"), o;\n    if (e.rangeCount === 0)\n      return o;\n    if (t = e.getRangeAt(0).cloneRange(), t.getBoundingClientRect && (o = t.getBoundingClientRect()), o.x === 0 && o.y === 0) {\n      const i = document.createElement(\"span\");\n      if (i.getBoundingClientRect) {\n        i.appendChild(document.createTextNode(\"​\")), t.insertNode(i), o = i.getBoundingClientRect();\n        const s = i.parentNode;\n        s.removeChild(i), s.normalize();\n      }\n    }\n    return o;\n  }\n  /**\n   * Returns selected text as String\n   *\n   * @returns {string}\n   */\n  static get text() {\n    return window.getSelection ? window.getSelection().toString() : \"\";\n  }\n  /**\n   * Returns window SelectionUtils\n   * {@link https://developer.mozilla.org/ru/docs/Web/API/Window/getSelection}\n   *\n   * @returns {Selection}\n   */\n  static get() {\n    return window.getSelection();\n  }\n  /**\n   * Set focus to contenteditable or native input element\n   *\n   * @param element - element where to set focus\n   * @param offset - offset of cursor\n   */\n  static setCursor(e, t = 0) {\n    const o = document.createRange(), i = window.getSelection();\n    return d.isNativeInput(e) ? d.canSetCaret(e) ? (e.focus(), e.selectionStart = e.selectionEnd = t, e.getBoundingClientRect()) : void 0 : (o.setStart(e, t), o.setEnd(e, t), i.removeAllRanges(), i.addRange(o), o.getBoundingClientRect());\n  }\n  /**\n   * Check if current range exists and belongs to container\n   *\n   * @param container - where range should be\n   */\n  static isRangeInsideContainer(e) {\n    const t = b.range;\n    return t === null ? !1 : e.contains(t.startContainer);\n  }\n  /**\n   * Adds fake cursor to the current range\n   */\n  static addFakeCursor() {\n    const e = b.range;\n    if (e === null)\n      return;\n    const t = d.make(\"span\", \"codex-editor__fake-cursor\");\n    t.dataset.mutationFree = \"true\", e.collapse(), e.insertNode(t);\n  }\n  /**\n   * Check if passed element contains a fake cursor\n   *\n   * @param el - where to check\n   */\n  static isFakeCursorInsideContainer(e) {\n    return d.find(e, \".codex-editor__fake-cursor\") !== null;\n  }\n  /**\n   * Removes fake cursor from a container\n   *\n   * @param container - container to look for\n   */\n  static removeFakeCursor(e = document.body) {\n    const t = d.find(e, \".codex-editor__fake-cursor\");\n    t && t.remove();\n  }\n  /**\n   * Removes fake background\n   */\n  removeFakeBackground() {\n    this.isFakeBackgroundEnabled && (this.isFakeBackgroundEnabled = !1, document.execCommand(this.commandRemoveFormat));\n  }\n  /**\n   * Sets fake background\n   */\n  setFakeBackground() {\n    document.execCommand(this.commandBackground, !1, \"#a8d6ff\"), this.isFakeBackgroundEnabled = !0;\n  }\n  /**\n   * Save SelectionUtils's range\n   */\n  save() {\n    this.savedSelectionRange = b.range;\n  }\n  /**\n   * Restore saved SelectionUtils's range\n   */\n  restore() {\n    if (!this.savedSelectionRange)\n      return;\n    const e = window.getSelection();\n    e.removeAllRanges(), e.addRange(this.savedSelectionRange);\n  }\n  /**\n   * Clears saved selection\n   */\n  clearSaved() {\n    this.savedSelectionRange = null;\n  }\n  /**\n   * Collapse current selection\n   */\n  collapseToEnd() {\n    const e = window.getSelection(), t = document.createRange();\n    t.selectNodeContents(e.focusNode), t.collapse(!1), e.removeAllRanges(), e.addRange(t);\n  }\n  /**\n   * Looks ahead to find passed tag from current selection\n   *\n   * @param  {string} tagName       - tag to found\n   * @param  {string} [className]   - tag's class name\n   * @param  {number} [searchDepth] - count of tags that can be included. For better performance.\n   * @returns {HTMLElement|null}\n   */\n  findParentTag(e, t, o = 10) {\n    const i = window.getSelection();\n    let s = null;\n    return !i || !i.anchorNode || !i.focusNode ? null : ([\n      /** the Node in which the selection begins */\n      i.anchorNode,\n      /** the Node in which the selection ends */\n      i.focusNode\n    ].forEach((l) => {\n      let a = o;\n      for (; a > 0 && l.parentNode && !(l.tagName === e && (s = l, t && l.classList && !l.classList.contains(t) && (s = null), s)); )\n        l = l.parentNode, a--;\n    }), s);\n  }\n  /**\n   * Expands selection range to the passed parent node\n   *\n   * @param {HTMLElement} element - element which contents should be selected\n   */\n  expandToTag(e) {\n    const t = window.getSelection();\n    t.removeAllRanges();\n    const o = document.createRange();\n    o.selectNodeContents(e), t.addRange(o);\n  }\n}\nfunction Fo(n, e) {\n  const { type: t, target: o, addedNodes: i, removedNodes: s } = n;\n  return n.type === \"attributes\" && n.attributeName === \"data-empty\" ? !1 : !!(e.contains(o) || t === \"childList\" && (Array.from(i).some((a) => a === e) || Array.from(s).some((a) => a === e)));\n}\nconst Je = \"redactor dom changed\", Dt = \"block changed\", Rt = \"fake cursor is about to be toggled\", Ft = \"fake cursor have been set\", ye = \"editor mobile layout toggled\";\nfunction Qe(n, e) {\n  if (!n.conversionConfig)\n    return !1;\n  const t = n.conversionConfig[e];\n  return O(t) || Q(t);\n}\nfunction _e(n, e) {\n  return Qe(n.tool, e);\n}\nfunction Ht(n, e) {\n  return Object.entries(n).some(([t, o]) => e[t] && Oo(e[t], o));\n}\nasync function zt(n, e) {\n  const o = (await n.save()).data, i = e.find((s) => s.name === n.name);\n  return i !== void 0 && !Qe(i, \"export\") ? [] : e.reduce((s, r) => {\n    if (!Qe(r, \"import\") || r.toolbox === void 0)\n      return s;\n    const l = r.toolbox.filter((a) => {\n      if (V(a) || a.icon === void 0)\n        return !1;\n      if (a.data !== void 0) {\n        if (Ht(a.data, o))\n          return !1;\n      } else if (r.name === n.name)\n        return !1;\n      return !0;\n    });\n    return s.push({\n      ...r,\n      toolbox: l\n    }), s;\n  }, []);\n}\nfunction wt(n, e) {\n  return n.mergeable ? n.name === e.name ? !0 : _e(e, \"export\") && _e(n, \"import\") : !1;\n}\nfunction Ho(n, e) {\n  const t = e == null ? void 0 : e.export;\n  return O(t) ? t(n) : Q(t) ? n[t] : (t !== void 0 && I(\"Conversion «export» property must be a string or function. String means key of saved data object to export. Function should export processed string to export.\"), \"\");\n}\nfunction xt(n, e) {\n  const t = e == null ? void 0 : e.import;\n  return O(t) ? t(n) : Q(t) ? {\n    [t]: n\n  } : (t !== void 0 && I(\"Conversion «import» property must be a string or function. String means key of tool data to import. Function accepts a imported string and return composed tool data.\"), {});\n}\nvar A = /* @__PURE__ */ ((n) => (n.Default = \"default\", n.Separator = \"separator\", n.Html = \"html\", n))(A || {}), J = /* @__PURE__ */ ((n) => (n.APPEND_CALLBACK = \"appendCallback\", n.RENDERED = \"rendered\", n.MOVED = \"moved\", n.UPDATED = \"updated\", n.REMOVED = \"removed\", n.ON_PASTE = \"onPaste\", n))(J || {});\nclass D extends Te {\n  /**\n   * @param options - block constructor options\n   * @param [options.id] - block's id. Will be generated if omitted.\n   * @param options.data - Tool's initial data\n   * @param options.tool — block's tool\n   * @param options.api - Editor API module for pass it to the Block Tunes\n   * @param options.readOnly - Read-Only flag\n   * @param [eventBus] - Editor common event bus. Allows to subscribe on some Editor events. Could be omitted when \"virtual\" Block is created. See BlocksAPI@composeBlockData.\n   */\n  constructor({\n    id: e = Io(),\n    data: t,\n    tool: o,\n    readOnly: i,\n    tunesData: s\n  }, r) {\n    super(), this.cachedInputs = [], this.toolRenderedElement = null, this.tunesInstances = /* @__PURE__ */ new Map(), this.defaultTunesInstances = /* @__PURE__ */ new Map(), this.unavailableTunesData = {}, this.inputIndex = 0, this.editorEventBus = null, this.handleFocus = () => {\n      this.dropInputsCache(), this.updateCurrentInput();\n    }, this.didMutated = (l = void 0) => {\n      const a = l === void 0, c = l instanceof InputEvent;\n      !a && !c && this.detectToolRootChange(l);\n      let u;\n      a || c ? u = !0 : u = !(l.length > 0 && l.every((p) => {\n        const { addedNodes: g, removedNodes: f, target: k } = p;\n        return [\n          ...Array.from(g),\n          ...Array.from(f),\n          k\n        ].some((S) => (d.isElement(S) || (S = S.parentElement), S && S.closest('[data-mutation-free=\"true\"]') !== null));\n      })), u && (this.dropInputsCache(), this.updateCurrentInput(), this.toggleInputsEmptyMark(), this.call(\n        \"updated\"\n        /* UPDATED */\n      ), this.emit(\"didMutated\", this));\n    }, this.name = o.name, this.id = e, this.settings = o.settings, this.config = o.settings.config || {}, this.editorEventBus = r || null, this.blockAPI = new G(this), this.tool = o, this.toolInstance = o.create(t, this.blockAPI, i), this.tunes = o.tunes, this.composeTunes(s), this.holder = this.compose(), window.requestIdleCallback(() => {\n      this.watchBlockMutations(), this.addInputEvents(), this.toggleInputsEmptyMark();\n    });\n  }\n  /**\n   * CSS classes for the Block\n   *\n   * @returns {{wrapper: string, content: string}}\n   */\n  static get CSS() {\n    return {\n      wrapper: \"ce-block\",\n      wrapperStretched: \"ce-block--stretched\",\n      content: \"ce-block__content\",\n      selected: \"ce-block--selected\",\n      dropTarget: \"ce-block--drop-target\"\n    };\n  }\n  /**\n   * Find and return all editable elements (contenteditable and native inputs) in the Tool HTML\n   */\n  get inputs() {\n    if (this.cachedInputs.length !== 0)\n      return this.cachedInputs;\n    const e = d.findAllInputs(this.holder);\n    return this.inputIndex > e.length - 1 && (this.inputIndex = e.length - 1), this.cachedInputs = e, e;\n  }\n  /**\n   * Return current Tool`s input\n   * If Block doesn't contain inputs, return undefined\n   */\n  get currentInput() {\n    return this.inputs[this.inputIndex];\n  }\n  /**\n   * Set input index to the passed element\n   *\n   * @param element - HTML Element to set as current input\n   */\n  set currentInput(e) {\n    const t = this.inputs.findIndex((o) => o === e || o.contains(e));\n    t !== -1 && (this.inputIndex = t);\n  }\n  /**\n   * Return first Tool`s input\n   * If Block doesn't contain inputs, return undefined\n   */\n  get firstInput() {\n    return this.inputs[0];\n  }\n  /**\n   * Return first Tool`s input\n   * If Block doesn't contain inputs, return undefined\n   */\n  get lastInput() {\n    const e = this.inputs;\n    return e[e.length - 1];\n  }\n  /**\n   * Return next Tool`s input or undefined if it doesn't exist\n   * If Block doesn't contain inputs, return undefined\n   */\n  get nextInput() {\n    return this.inputs[this.inputIndex + 1];\n  }\n  /**\n   * Return previous Tool`s input or undefined if it doesn't exist\n   * If Block doesn't contain inputs, return undefined\n   */\n  get previousInput() {\n    return this.inputs[this.inputIndex - 1];\n  }\n  /**\n   * Get Block's JSON data\n   *\n   * @returns {object}\n   */\n  get data() {\n    return this.save().then((e) => e && !V(e.data) ? e.data : {});\n  }\n  /**\n   * Returns tool's sanitizer config\n   *\n   * @returns {object}\n   */\n  get sanitize() {\n    return this.tool.sanitizeConfig;\n  }\n  /**\n   * is block mergeable\n   * We plugin have merge function then we call it mergeable\n   *\n   * @returns {boolean}\n   */\n  get mergeable() {\n    return O(this.toolInstance.merge);\n  }\n  /**\n   * If Block contains inputs, it is focusable\n   */\n  get focusable() {\n    return this.inputs.length !== 0;\n  }\n  /**\n   * Check block for emptiness\n   *\n   * @returns {boolean}\n   */\n  get isEmpty() {\n    const e = d.isEmpty(this.pluginsContent, \"/\"), t = !this.hasMedia;\n    return e && t;\n  }\n  /**\n   * Check if block has a media content such as images, iframe and other\n   *\n   * @returns {boolean}\n   */\n  get hasMedia() {\n    const e = [\n      \"img\",\n      \"iframe\",\n      \"video\",\n      \"audio\",\n      \"source\",\n      \"input\",\n      \"textarea\",\n      \"twitterwidget\"\n    ];\n    return !!this.holder.querySelector(e.join(\",\"));\n  }\n  /**\n   * Set selected state\n   * We don't need to mark Block as Selected when it is empty\n   *\n   * @param {boolean} state - 'true' to select, 'false' to remove selection\n   */\n  set selected(e) {\n    var i, s;\n    this.holder.classList.toggle(D.CSS.selected, e);\n    const t = e === !0 && b.isRangeInsideContainer(this.holder), o = e === !1 && b.isFakeCursorInsideContainer(this.holder);\n    (t || o) && ((i = this.editorEventBus) == null || i.emit(Rt, { state: e }), t ? b.addFakeCursor() : b.removeFakeCursor(this.holder), (s = this.editorEventBus) == null || s.emit(Ft, { state: e }));\n  }\n  /**\n   * Returns True if it is Selected\n   *\n   * @returns {boolean}\n   */\n  get selected() {\n    return this.holder.classList.contains(D.CSS.selected);\n  }\n  /**\n   * Set stretched state\n   *\n   * @param {boolean} state - 'true' to enable, 'false' to disable stretched state\n   */\n  set stretched(e) {\n    this.holder.classList.toggle(D.CSS.wrapperStretched, e);\n  }\n  /**\n   * Return Block's stretched state\n   *\n   * @returns {boolean}\n   */\n  get stretched() {\n    return this.holder.classList.contains(D.CSS.wrapperStretched);\n  }\n  /**\n   * Toggle drop target state\n   *\n   * @param {boolean} state - 'true' if block is drop target, false otherwise\n   */\n  set dropTarget(e) {\n    this.holder.classList.toggle(D.CSS.dropTarget, e);\n  }\n  /**\n   * Returns Plugins content\n   *\n   * @returns {HTMLElement}\n   */\n  get pluginsContent() {\n    return this.toolRenderedElement;\n  }\n  /**\n   * Calls Tool's method\n   *\n   * Method checks tool property {MethodName}. Fires method with passes params If it is instance of Function\n   *\n   * @param {string} methodName - method to call\n   * @param {object} params - method argument\n   */\n  call(e, t) {\n    if (O(this.toolInstance[e])) {\n      e === \"appendCallback\" && I(\n        \"`appendCallback` hook is deprecated and will be removed in the next major release. Use `rendered` hook instead\",\n        \"warn\"\n      );\n      try {\n        this.toolInstance[e].call(this.toolInstance, t);\n      } catch (o) {\n        I(`Error during '${e}' call: ${o.message}`, \"error\");\n      }\n    }\n  }\n  /**\n   * Call plugins merge method\n   *\n   * @param {BlockToolData} data - data to merge\n   */\n  async mergeWith(e) {\n    await this.toolInstance.merge(e);\n  }\n  /**\n   * Extracts data from Block\n   * Groups Tool's save processing time\n   *\n   * @returns {object}\n   */\n  async save() {\n    const e = await this.toolInstance.save(this.pluginsContent), t = this.unavailableTunesData;\n    [\n      ...this.tunesInstances.entries(),\n      ...this.defaultTunesInstances.entries()\n    ].forEach(([s, r]) => {\n      if (O(r.save))\n        try {\n          t[s] = r.save();\n        } catch (l) {\n          I(`Tune ${r.constructor.name} save method throws an Error %o`, \"warn\", l);\n        }\n    });\n    const o = window.performance.now();\n    let i;\n    return Promise.resolve(e).then((s) => (i = window.performance.now(), {\n      id: this.id,\n      tool: this.name,\n      data: s,\n      tunes: t,\n      time: i - o\n    })).catch((s) => {\n      I(`Saving process for ${this.name} tool failed due to the ${s}`, \"log\", \"red\");\n    });\n  }\n  /**\n   * Uses Tool's validation method to check the correctness of output data\n   * Tool's validation method is optional\n   *\n   * @description Method returns true|false whether data passed the validation or not\n   * @param {BlockToolData} data - data to validate\n   * @returns {Promise<boolean>} valid\n   */\n  async validate(e) {\n    let t = !0;\n    return this.toolInstance.validate instanceof Function && (t = await this.toolInstance.validate(e)), t;\n  }\n  /**\n   * Returns data to render in Block Tunes menu.\n   * Splits block tunes into 2 groups: block specific tunes and common tunes\n   */\n  getTunes() {\n    const e = [], t = [], o = typeof this.toolInstance.renderSettings == \"function\" ? this.toolInstance.renderSettings() : [];\n    return d.isElement(o) ? e.push({\n      type: A.Html,\n      element: o\n    }) : Array.isArray(o) ? e.push(...o) : e.push(o), [\n      ...this.tunesInstances.values(),\n      ...this.defaultTunesInstances.values()\n    ].map((s) => s.render()).forEach((s) => {\n      d.isElement(s) ? t.push({\n        type: A.Html,\n        element: s\n      }) : Array.isArray(s) ? t.push(...s) : t.push(s);\n    }), {\n      toolTunes: e,\n      commonTunes: t\n    };\n  }\n  /**\n   * Update current input index with selection anchor node\n   */\n  updateCurrentInput() {\n    this.currentInput = d.isNativeInput(document.activeElement) || !b.anchorNode ? document.activeElement : b.anchorNode;\n  }\n  /**\n   * Allows to say Editor that Block was changed. Used to manually trigger Editor's 'onChange' callback\n   * Can be useful for block changes invisible for editor core.\n   */\n  dispatchChange() {\n    this.didMutated();\n  }\n  /**\n   * Call Tool instance destroy method\n   */\n  destroy() {\n    this.unwatchBlockMutations(), this.removeInputEvents(), super.destroy(), O(this.toolInstance.destroy) && this.toolInstance.destroy();\n  }\n  /**\n   * Tool could specify several entries to be displayed at the Toolbox (for example, \"Heading 1\", \"Heading 2\", \"Heading 3\")\n   * This method returns the entry that is related to the Block (depended on the Block data)\n   */\n  async getActiveToolboxEntry() {\n    const e = this.tool.toolbox;\n    if (e.length === 1)\n      return Promise.resolve(this.tool.toolbox[0]);\n    const t = await this.data, o = e;\n    return o == null ? void 0 : o.find((i) => Ht(i.data, t));\n  }\n  /**\n   * Exports Block data as string using conversion config\n   */\n  async exportDataAsString() {\n    const e = await this.data;\n    return Ho(e, this.tool.conversionConfig);\n  }\n  /**\n   * Make default Block wrappers and put Tool`s content there\n   *\n   * @returns {HTMLDivElement}\n   */\n  compose() {\n    const e = d.make(\"div\", D.CSS.wrapper), t = d.make(\"div\", D.CSS.content), o = this.toolInstance.render();\n    e.dataset.id = this.id, this.toolRenderedElement = o, t.appendChild(this.toolRenderedElement);\n    let i = t;\n    return [...this.tunesInstances.values(), ...this.defaultTunesInstances.values()].forEach((s) => {\n      if (O(s.wrap))\n        try {\n          i = s.wrap(i);\n        } catch (r) {\n          I(`Tune ${s.constructor.name} wrap method throws an Error %o`, \"warn\", r);\n        }\n    }), e.appendChild(i), e;\n  }\n  /**\n   * Instantiate Block Tunes\n   *\n   * @param tunesData - current Block tunes data\n   * @private\n   */\n  composeTunes(e) {\n    Array.from(this.tunes.values()).forEach((t) => {\n      (t.isInternal ? this.defaultTunesInstances : this.tunesInstances).set(t.name, t.create(e[t.name], this.blockAPI));\n    }), Object.entries(e).forEach(([t, o]) => {\n      this.tunesInstances.has(t) || (this.unavailableTunesData[t] = o);\n    });\n  }\n  /**\n   * Adds focus event listeners to all inputs and contenteditable\n   */\n  addInputEvents() {\n    this.inputs.forEach((e) => {\n      e.addEventListener(\"focus\", this.handleFocus), d.isNativeInput(e) && e.addEventListener(\"input\", this.didMutated);\n    });\n  }\n  /**\n   * removes focus event listeners from all inputs and contenteditable\n   */\n  removeInputEvents() {\n    this.inputs.forEach((e) => {\n      e.removeEventListener(\"focus\", this.handleFocus), d.isNativeInput(e) && e.removeEventListener(\"input\", this.didMutated);\n    });\n  }\n  /**\n   * Listen common editor Dom Changed event and detect mutations related to the  Block\n   */\n  watchBlockMutations() {\n    var e;\n    this.redactorDomChangedCallback = (t) => {\n      const { mutations: o } = t;\n      o.some((s) => Fo(s, this.toolRenderedElement)) && this.didMutated(o);\n    }, (e = this.editorEventBus) == null || e.on(Je, this.redactorDomChangedCallback);\n  }\n  /**\n   * Remove redactor dom change event listener\n   */\n  unwatchBlockMutations() {\n    var e;\n    (e = this.editorEventBus) == null || e.off(Je, this.redactorDomChangedCallback);\n  }\n  /**\n   * Sometimes Tool can replace own main element, for example H2 -> H4 or UL -> OL\n   * We need to detect such changes and update a link to tools main element with the new one\n   *\n   * @param mutations - records of block content mutations\n   */\n  detectToolRootChange(e) {\n    e.forEach((t) => {\n      if (Array.from(t.removedNodes).includes(this.toolRenderedElement)) {\n        const i = t.addedNodes[t.addedNodes.length - 1];\n        this.toolRenderedElement = i;\n      }\n    });\n  }\n  /**\n   * Clears inputs cached value\n   */\n  dropInputsCache() {\n    this.cachedInputs = [];\n  }\n  /**\n   * Mark inputs with 'data-empty' attribute with the empty state\n   */\n  toggleInputsEmptyMark() {\n    this.inputs.forEach(Lt);\n  }\n}\nclass zo extends y {\n  constructor() {\n    super(...arguments), this.insert = (e = this.config.defaultBlock, t = {}, o = {}, i, s, r, l) => {\n      const a = this.Editor.BlockManager.insert({\n        id: l,\n        tool: e,\n        data: t,\n        index: i,\n        needToFocus: s,\n        replace: r\n      });\n      return new G(a);\n    }, this.composeBlockData = async (e) => {\n      const t = this.Editor.Tools.blockTools.get(e);\n      return new D({\n        tool: t,\n        api: this.Editor.API,\n        readOnly: !0,\n        data: {},\n        tunesData: {}\n      }).data;\n    }, this.update = async (e, t, o) => {\n      const { BlockManager: i } = this.Editor, s = i.getBlockById(e);\n      if (s === void 0)\n        throw new Error(`Block with id \"${e}\" not found`);\n      const r = await i.update(s, t, o);\n      return new G(r);\n    }, this.convert = async (e, t, o) => {\n      var h, p;\n      const { BlockManager: i, Tools: s } = this.Editor, r = i.getBlockById(e);\n      if (!r)\n        throw new Error(`Block with id \"${e}\" not found`);\n      const l = s.blockTools.get(r.name), a = s.blockTools.get(t);\n      if (!a)\n        throw new Error(`Block Tool with type \"${t}\" not found`);\n      const c = ((h = l == null ? void 0 : l.conversionConfig) == null ? void 0 : h.export) !== void 0, u = ((p = a.conversionConfig) == null ? void 0 : p.import) !== void 0;\n      if (c && u) {\n        const g = await i.convert(r, t, o);\n        return new G(g);\n      } else {\n        const g = [\n          c ? !1 : Le(r.name),\n          u ? !1 : Le(t)\n        ].filter(Boolean).join(\" and \");\n        throw new Error(`Conversion from \"${r.name}\" to \"${t}\" is not possible. ${g} tool(s) should provide a \"conversionConfig\"`);\n      }\n    }, this.insertMany = (e, t = this.Editor.BlockManager.blocks.length - 1) => {\n      this.validateIndex(t);\n      const o = e.map(({ id: i, type: s, data: r }) => this.Editor.BlockManager.composeBlock({\n        id: i,\n        tool: s || this.config.defaultBlock,\n        data: r\n      }));\n      return this.Editor.BlockManager.insertMany(o, t), o.map((i) => new G(i));\n    };\n  }\n  /**\n   * Available methods\n   *\n   * @returns {Blocks}\n   */\n  get methods() {\n    return {\n      clear: () => this.clear(),\n      render: (e) => this.render(e),\n      renderFromHTML: (e) => this.renderFromHTML(e),\n      delete: (e) => this.delete(e),\n      swap: (e, t) => this.swap(e, t),\n      move: (e, t) => this.move(e, t),\n      getBlockByIndex: (e) => this.getBlockByIndex(e),\n      getById: (e) => this.getById(e),\n      getCurrentBlockIndex: () => this.getCurrentBlockIndex(),\n      getBlockIndex: (e) => this.getBlockIndex(e),\n      getBlocksCount: () => this.getBlocksCount(),\n      getBlockByElement: (e) => this.getBlockByElement(e),\n      stretchBlock: (e, t = !0) => this.stretchBlock(e, t),\n      insertNewBlock: () => this.insertNewBlock(),\n      insert: this.insert,\n      insertMany: this.insertMany,\n      update: this.update,\n      composeBlockData: this.composeBlockData,\n      convert: this.convert\n    };\n  }\n  /**\n   * Returns Blocks count\n   *\n   * @returns {number}\n   */\n  getBlocksCount() {\n    return this.Editor.BlockManager.blocks.length;\n  }\n  /**\n   * Returns current block index\n   *\n   * @returns {number}\n   */\n  getCurrentBlockIndex() {\n    return this.Editor.BlockManager.currentBlockIndex;\n  }\n  /**\n   * Returns the index of Block by id;\n   *\n   * @param id - block id\n   */\n  getBlockIndex(e) {\n    const t = this.Editor.BlockManager.getBlockById(e);\n    if (!t) {\n      X(\"There is no block with id `\" + e + \"`\", \"warn\");\n      return;\n    }\n    return this.Editor.BlockManager.getBlockIndex(t);\n  }\n  /**\n   * Returns BlockAPI object by Block index\n   *\n   * @param {number} index - index to get\n   */\n  getBlockByIndex(e) {\n    const t = this.Editor.BlockManager.getBlockByIndex(e);\n    if (t === void 0) {\n      X(\"There is no block at index `\" + e + \"`\", \"warn\");\n      return;\n    }\n    return new G(t);\n  }\n  /**\n   * Returns BlockAPI object by Block id\n   *\n   * @param id - id of block to get\n   */\n  getById(e) {\n    const t = this.Editor.BlockManager.getBlockById(e);\n    return t === void 0 ? (X(\"There is no block with id `\" + e + \"`\", \"warn\"), null) : new G(t);\n  }\n  /**\n   * Get Block API object by any child html element\n   *\n   * @param element - html element to get Block by\n   */\n  getBlockByElement(e) {\n    const t = this.Editor.BlockManager.getBlock(e);\n    if (t === void 0) {\n      X(\"There is no block corresponding to element `\" + e + \"`\", \"warn\");\n      return;\n    }\n    return new G(t);\n  }\n  /**\n   * Call Block Manager method that swap Blocks\n   *\n   * @param {number} fromIndex - position of first Block\n   * @param {number} toIndex - position of second Block\n   * @deprecated — use 'move' instead\n   */\n  swap(e, t) {\n    I(\n      \"`blocks.swap()` method is deprecated and will be removed in the next major release. Use `block.move()` method instead\",\n      \"info\"\n    ), this.Editor.BlockManager.swap(e, t);\n  }\n  /**\n   * Move block from one index to another\n   *\n   * @param {number} toIndex - index to move to\n   * @param {number} fromIndex - index to move from\n   */\n  move(e, t) {\n    this.Editor.BlockManager.move(e, t);\n  }\n  /**\n   * Deletes Block\n   *\n   * @param {number} blockIndex - index of Block to delete\n   */\n  delete(e = this.Editor.BlockManager.currentBlockIndex) {\n    try {\n      const t = this.Editor.BlockManager.getBlockByIndex(e);\n      this.Editor.BlockManager.removeBlock(t);\n    } catch (t) {\n      X(t, \"warn\");\n      return;\n    }\n    this.Editor.BlockManager.blocks.length === 0 && this.Editor.BlockManager.insert(), this.Editor.BlockManager.currentBlock && this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock, this.Editor.Caret.positions.END), this.Editor.Toolbar.close();\n  }\n  /**\n   * Clear Editor's area\n   */\n  async clear() {\n    await this.Editor.BlockManager.clear(!0), this.Editor.InlineToolbar.close();\n  }\n  /**\n   * Fills Editor with Blocks data\n   *\n   * @param {OutputData} data — Saved Editor data\n   */\n  async render(e) {\n    if (e === void 0 || e.blocks === void 0)\n      throw new Error(\"Incorrect data passed to the render() method\");\n    this.Editor.ModificationsObserver.disable(), await this.Editor.BlockManager.clear(), await this.Editor.Renderer.render(e.blocks), this.Editor.ModificationsObserver.enable();\n  }\n  /**\n   * Render passed HTML string\n   *\n   * @param {string} data - HTML string to render\n   * @returns {Promise<void>}\n   */\n  renderFromHTML(e) {\n    return this.Editor.BlockManager.clear(), this.Editor.Paste.processText(e, !0);\n  }\n  /**\n   * Stretch Block's content\n   *\n   * @param {number} index - index of Block to stretch\n   * @param {boolean} status - true to enable, false to disable\n   * @deprecated Use BlockAPI interface to stretch Blocks\n   */\n  stretchBlock(e, t = !0) {\n    Ze(\n      !0,\n      \"blocks.stretchBlock()\",\n      \"BlockAPI\"\n    );\n    const o = this.Editor.BlockManager.getBlockByIndex(e);\n    o && (o.stretched = t);\n  }\n  /**\n   * Insert new Block\n   * After set caret to this Block\n   *\n   * @todo remove in 3.0.0\n   * @deprecated with insert() method\n   */\n  insertNewBlock() {\n    I(\"Method blocks.insertNewBlock() is deprecated and it will be removed in the next major release. Use blocks.insert() instead.\", \"warn\"), this.insert();\n  }\n  /**\n   * Validated block index and throws an error if it's invalid\n   *\n   * @param index - index to validate\n   */\n  validateIndex(e) {\n    if (typeof e != \"number\")\n      throw new Error(\"Index should be a number\");\n    if (e < 0)\n      throw new Error(\"Index should be greater than or equal to 0\");\n    if (e === null)\n      throw new Error(\"Index should be greater than or equal to 0\");\n  }\n}\nfunction Uo(n, e) {\n  return typeof n == \"number\" ? e.BlockManager.getBlockByIndex(n) : typeof n == \"string\" ? e.BlockManager.getBlockById(n) : e.BlockManager.getBlockById(n.id);\n}\nclass jo extends y {\n  constructor() {\n    super(...arguments), this.setToFirstBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.firstBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.firstBlock, e, t), !0) : !1, this.setToLastBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.lastBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.lastBlock, e, t), !0) : !1, this.setToPreviousBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.previousBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.previousBlock, e, t), !0) : !1, this.setToNextBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.nextBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.nextBlock, e, t), !0) : !1, this.setToBlock = (e, t = this.Editor.Caret.positions.DEFAULT, o = 0) => {\n      const i = Uo(e, this.Editor);\n      return i === void 0 ? !1 : (this.Editor.Caret.setToBlock(i, t, o), !0);\n    }, this.focus = (e = !1) => e ? this.setToLastBlock(this.Editor.Caret.positions.END) : this.setToFirstBlock(this.Editor.Caret.positions.START);\n  }\n  /**\n   * Available methods\n   *\n   * @returns {Caret}\n   */\n  get methods() {\n    return {\n      setToFirstBlock: this.setToFirstBlock,\n      setToLastBlock: this.setToLastBlock,\n      setToPreviousBlock: this.setToPreviousBlock,\n      setToNextBlock: this.setToNextBlock,\n      setToBlock: this.setToBlock,\n      focus: this.focus\n    };\n  }\n}\nclass $o extends y {\n  /**\n   * Available methods\n   *\n   * @returns {Events}\n   */\n  get methods() {\n    return {\n      emit: (e, t) => this.emit(e, t),\n      off: (e, t) => this.off(e, t),\n      on: (e, t) => this.on(e, t)\n    };\n  }\n  /**\n   * Subscribe on Events\n   *\n   * @param {string} eventName - event name to subscribe\n   * @param {Function} callback - event handler\n   */\n  on(e, t) {\n    this.eventsDispatcher.on(e, t);\n  }\n  /**\n   * Emit event with data\n   *\n   * @param {string} eventName - event to emit\n   * @param {object} data - event's data\n   */\n  emit(e, t) {\n    this.eventsDispatcher.emit(e, t);\n  }\n  /**\n   * Unsubscribe from Event\n   *\n   * @param {string} eventName - event to unsubscribe\n   * @param {Function} callback - event handler\n   */\n  off(e, t) {\n    this.eventsDispatcher.off(e, t);\n  }\n}\nclass ot extends y {\n  /**\n   * Return namespace section for tool or block tune\n   *\n   * @param toolName - tool name\n   * @param isTune - is tool a block tune\n   */\n  static getNamespace(e, t) {\n    return t ? `blockTunes.${e}` : `tools.${e}`;\n  }\n  /**\n   * Return I18n API methods with global dictionary access\n   */\n  get methods() {\n    return {\n      t: () => {\n        X(\"I18n.t() method can be accessed only from Tools\", \"warn\");\n      }\n    };\n  }\n  /**\n   * Return I18n API methods with tool namespaced dictionary\n   *\n   * @param toolName - tool name\n   * @param isTune - is tool a block tune\n   */\n  getMethodsForTool(e, t) {\n    return Object.assign(\n      this.methods,\n      {\n        t: (o) => z.t(ot.getNamespace(e, t), o)\n      }\n    );\n  }\n}\nclass Yo extends y {\n  /**\n   * Editor.js Core API modules\n   */\n  get methods() {\n    return {\n      blocks: this.Editor.BlocksAPI.methods,\n      caret: this.Editor.CaretAPI.methods,\n      tools: this.Editor.ToolsAPI.methods,\n      events: this.Editor.EventsAPI.methods,\n      listeners: this.Editor.ListenersAPI.methods,\n      notifier: this.Editor.NotifierAPI.methods,\n      sanitizer: this.Editor.SanitizerAPI.methods,\n      saver: this.Editor.SaverAPI.methods,\n      selection: this.Editor.SelectionAPI.methods,\n      styles: this.Editor.StylesAPI.classes,\n      toolbar: this.Editor.ToolbarAPI.methods,\n      inlineToolbar: this.Editor.InlineToolbarAPI.methods,\n      tooltip: this.Editor.TooltipAPI.methods,\n      i18n: this.Editor.I18nAPI.methods,\n      readOnly: this.Editor.ReadOnlyAPI.methods,\n      ui: this.Editor.UiAPI.methods\n    };\n  }\n  /**\n   * Returns Editor.js Core API methods for passed tool\n   *\n   * @param toolName - tool name\n   * @param isTune - is tool a block tune\n   */\n  getMethodsForTool(e, t) {\n    return Object.assign(\n      this.methods,\n      {\n        i18n: this.Editor.I18nAPI.getMethodsForTool(e, t)\n      }\n    );\n  }\n}\nclass Wo extends y {\n  /**\n   * Available methods\n   *\n   * @returns {InlineToolbar}\n   */\n  get methods() {\n    return {\n      close: () => this.close(),\n      open: () => this.open()\n    };\n  }\n  /**\n   * Open Inline Toolbar\n   */\n  open() {\n    this.Editor.InlineToolbar.tryToShow();\n  }\n  /**\n   * Close Inline Toolbar\n   */\n  close() {\n    this.Editor.InlineToolbar.close();\n  }\n}\nclass Ko extends y {\n  /**\n   * Available methods\n   *\n   * @returns {Listeners}\n   */\n  get methods() {\n    return {\n      on: (e, t, o, i) => this.on(e, t, o, i),\n      off: (e, t, o, i) => this.off(e, t, o, i),\n      offById: (e) => this.offById(e)\n    };\n  }\n  /**\n   * Ads a DOM event listener. Return it's id.\n   *\n   * @param {HTMLElement} element - Element to set handler to\n   * @param {string} eventType - event type\n   * @param {() => void} handler - event handler\n   * @param {boolean} useCapture - capture event or not\n   */\n  on(e, t, o, i) {\n    return this.listeners.on(e, t, o, i);\n  }\n  /**\n   * Removes DOM listener from element\n   *\n   * @param {Element} element - Element to remove handler from\n   * @param eventType - event type\n   * @param handler - event handler\n   * @param {boolean} useCapture - capture event or not\n   */\n  off(e, t, o, i) {\n    this.listeners.off(e, t, o, i);\n  }\n  /**\n   * Removes DOM listener by the listener id\n   *\n   * @param id - id of the listener to remove\n   */\n  offById(e) {\n    this.listeners.offById(e);\n  }\n}\nvar Ut = { exports: {} };\n(function(n, e) {\n  (function(t, o) {\n    n.exports = o();\n  })(window, function() {\n    return function(t) {\n      var o = {};\n      function i(s) {\n        if (o[s])\n          return o[s].exports;\n        var r = o[s] = { i: s, l: !1, exports: {} };\n        return t[s].call(r.exports, r, r.exports, i), r.l = !0, r.exports;\n      }\n      return i.m = t, i.c = o, i.d = function(s, r, l) {\n        i.o(s, r) || Object.defineProperty(s, r, { enumerable: !0, get: l });\n      }, i.r = function(s) {\n        typeof Symbol < \"u\" && Symbol.toStringTag && Object.defineProperty(s, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(s, \"__esModule\", { value: !0 });\n      }, i.t = function(s, r) {\n        if (1 & r && (s = i(s)), 8 & r || 4 & r && typeof s == \"object\" && s && s.__esModule)\n          return s;\n        var l = /* @__PURE__ */ Object.create(null);\n        if (i.r(l), Object.defineProperty(l, \"default\", { enumerable: !0, value: s }), 2 & r && typeof s != \"string\")\n          for (var a in s)\n            i.d(l, a, (function(c) {\n              return s[c];\n            }).bind(null, a));\n        return l;\n      }, i.n = function(s) {\n        var r = s && s.__esModule ? function() {\n          return s.default;\n        } : function() {\n          return s;\n        };\n        return i.d(r, \"a\", r), r;\n      }, i.o = function(s, r) {\n        return Object.prototype.hasOwnProperty.call(s, r);\n      }, i.p = \"/\", i(i.s = 0);\n    }([function(t, o, i) {\n      i(1), /*!\n       * Codex JavaScript Notification module\n       * https://github.com/codex-team/js-notifier\n       */\n      t.exports = function() {\n        var s = i(6), r = \"cdx-notify--bounce-in\", l = null;\n        return { show: function(a) {\n          if (a.message) {\n            (function() {\n              if (l)\n                return !0;\n              l = s.getWrapper(), document.body.appendChild(l);\n            })();\n            var c = null, u = a.time || 8e3;\n            switch (a.type) {\n              case \"confirm\":\n                c = s.confirm(a);\n                break;\n              case \"prompt\":\n                c = s.prompt(a);\n                break;\n              default:\n                c = s.alert(a), window.setTimeout(function() {\n                  c.remove();\n                }, u);\n            }\n            l.appendChild(c), c.classList.add(r);\n          }\n        } };\n      }();\n    }, function(t, o, i) {\n      var s = i(2);\n      typeof s == \"string\" && (s = [[t.i, s, \"\"]]);\n      var r = { hmr: !0, transform: void 0, insertInto: void 0 };\n      i(4)(s, r), s.locals && (t.exports = s.locals);\n    }, function(t, o, i) {\n      (t.exports = i(3)(!1)).push([t.i, `.cdx-notify--error{background:#fffbfb!important}.cdx-notify--error::before{background:#fb5d5d!important}.cdx-notify__input{max-width:130px;padding:5px 10px;background:#f7f7f7;border:0;border-radius:3px;font-size:13px;color:#656b7c;outline:0}.cdx-notify__input:-ms-input-placeholder{color:#656b7c}.cdx-notify__input::placeholder{color:#656b7c}.cdx-notify__input:focus:-ms-input-placeholder{color:rgba(101,107,124,.3)}.cdx-notify__input:focus::placeholder{color:rgba(101,107,124,.3)}.cdx-notify__button{border:none;border-radius:3px;font-size:13px;padding:5px 10px;cursor:pointer}.cdx-notify__button:last-child{margin-left:10px}.cdx-notify__button--cancel{background:#f2f5f7;box-shadow:0 2px 1px 0 rgba(16,19,29,0);color:#656b7c}.cdx-notify__button--cancel:hover{background:#eee}.cdx-notify__button--confirm{background:#34c992;box-shadow:0 1px 1px 0 rgba(18,49,35,.05);color:#fff}.cdx-notify__button--confirm:hover{background:#33b082}.cdx-notify__btns-wrapper{display:-ms-flexbox;display:flex;-ms-flex-flow:row nowrap;flex-flow:row nowrap;margin-top:5px}.cdx-notify__cross{position:absolute;top:5px;right:5px;width:10px;height:10px;padding:5px;opacity:.54;cursor:pointer}.cdx-notify__cross::after,.cdx-notify__cross::before{content:'';position:absolute;left:9px;top:5px;height:12px;width:2px;background:#575d67}.cdx-notify__cross::before{transform:rotate(-45deg)}.cdx-notify__cross::after{transform:rotate(45deg)}.cdx-notify__cross:hover{opacity:1}.cdx-notifies{position:fixed;z-index:2;bottom:20px;left:20px;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen,Ubuntu,Cantarell,\"Fira Sans\",\"Droid Sans\",\"Helvetica Neue\",sans-serif}.cdx-notify{position:relative;width:220px;margin-top:15px;padding:13px 16px;background:#fff;box-shadow:0 11px 17px 0 rgba(23,32,61,.13);border-radius:5px;font-size:14px;line-height:1.4em;word-wrap:break-word}.cdx-notify::before{content:'';position:absolute;display:block;top:0;left:0;width:3px;height:calc(100% - 6px);margin:3px;border-radius:5px;background:0 0}@keyframes bounceIn{0%{opacity:0;transform:scale(.3)}50%{opacity:1;transform:scale(1.05)}70%{transform:scale(.9)}100%{transform:scale(1)}}.cdx-notify--bounce-in{animation-name:bounceIn;animation-duration:.6s;animation-iteration-count:1}.cdx-notify--success{background:#fafffe!important}.cdx-notify--success::before{background:#41ffb1!important}`, \"\"]);\n    }, function(t, o) {\n      t.exports = function(i) {\n        var s = [];\n        return s.toString = function() {\n          return this.map(function(r) {\n            var l = function(a, c) {\n              var u = a[1] || \"\", h = a[3];\n              if (!h)\n                return u;\n              if (c && typeof btoa == \"function\") {\n                var p = (f = h, \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(f)))) + \" */\"), g = h.sources.map(function(k) {\n                  return \"/*# sourceURL=\" + h.sourceRoot + k + \" */\";\n                });\n                return [u].concat(g).concat([p]).join(`\n`);\n              }\n              var f;\n              return [u].join(`\n`);\n            }(r, i);\n            return r[2] ? \"@media \" + r[2] + \"{\" + l + \"}\" : l;\n          }).join(\"\");\n        }, s.i = function(r, l) {\n          typeof r == \"string\" && (r = [[null, r, \"\"]]);\n          for (var a = {}, c = 0; c < this.length; c++) {\n            var u = this[c][0];\n            typeof u == \"number\" && (a[u] = !0);\n          }\n          for (c = 0; c < r.length; c++) {\n            var h = r[c];\n            typeof h[0] == \"number\" && a[h[0]] || (l && !h[2] ? h[2] = l : l && (h[2] = \"(\" + h[2] + \") and (\" + l + \")\"), s.push(h));\n          }\n        }, s;\n      };\n    }, function(t, o, i) {\n      var s, r, l = {}, a = (s = function() {\n        return window && document && document.all && !window.atob;\n      }, function() {\n        return r === void 0 && (r = s.apply(this, arguments)), r;\n      }), c = function(v) {\n        var m = {};\n        return function(x) {\n          if (typeof x == \"function\")\n            return x();\n          if (m[x] === void 0) {\n            var E = (function(M) {\n              return document.querySelector(M);\n            }).call(this, x);\n            if (window.HTMLIFrameElement && E instanceof window.HTMLIFrameElement)\n              try {\n                E = E.contentDocument.head;\n              } catch {\n                E = null;\n              }\n            m[x] = E;\n          }\n          return m[x];\n        };\n      }(), u = null, h = 0, p = [], g = i(5);\n      function f(v, m) {\n        for (var x = 0; x < v.length; x++) {\n          var E = v[x], M = l[E.id];\n          if (M) {\n            M.refs++;\n            for (var T = 0; T < M.parts.length; T++)\n              M.parts[T](E.parts[T]);\n            for (; T < E.parts.length; T++)\n              M.parts.push(j(E.parts[T], m));\n          } else {\n            var P = [];\n            for (T = 0; T < E.parts.length; T++)\n              P.push(j(E.parts[T], m));\n            l[E.id] = { id: E.id, refs: 1, parts: P };\n          }\n        }\n      }\n      function k(v, m) {\n        for (var x = [], E = {}, M = 0; M < v.length; M++) {\n          var T = v[M], P = m.base ? T[0] + m.base : T[0], B = { css: T[1], media: T[2], sourceMap: T[3] };\n          E[P] ? E[P].parts.push(B) : x.push(E[P] = { id: P, parts: [B] });\n        }\n        return x;\n      }\n      function C(v, m) {\n        var x = c(v.insertInto);\n        if (!x)\n          throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n        var E = p[p.length - 1];\n        if (v.insertAt === \"top\")\n          E ? E.nextSibling ? x.insertBefore(m, E.nextSibling) : x.appendChild(m) : x.insertBefore(m, x.firstChild), p.push(m);\n        else if (v.insertAt === \"bottom\")\n          x.appendChild(m);\n        else {\n          if (typeof v.insertAt != \"object\" || !v.insertAt.before)\n            throw new Error(`[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n`);\n          var M = c(v.insertInto + \" \" + v.insertAt.before);\n          x.insertBefore(m, M);\n        }\n      }\n      function S(v) {\n        if (v.parentNode === null)\n          return !1;\n        v.parentNode.removeChild(v);\n        var m = p.indexOf(v);\n        m >= 0 && p.splice(m, 1);\n      }\n      function _(v) {\n        var m = document.createElement(\"style\");\n        return v.attrs.type === void 0 && (v.attrs.type = \"text/css\"), ee(m, v.attrs), C(v, m), m;\n      }\n      function ee(v, m) {\n        Object.keys(m).forEach(function(x) {\n          v.setAttribute(x, m[x]);\n        });\n      }\n      function j(v, m) {\n        var x, E, M, T;\n        if (m.transform && v.css) {\n          if (!(T = m.transform(v.css)))\n            return function() {\n            };\n          v.css = T;\n        }\n        if (m.singleton) {\n          var P = h++;\n          x = u || (u = _(m)), E = fe.bind(null, x, P, !1), M = fe.bind(null, x, P, !0);\n        } else\n          v.sourceMap && typeof URL == \"function\" && typeof URL.createObjectURL == \"function\" && typeof URL.revokeObjectURL == \"function\" && typeof Blob == \"function\" && typeof btoa == \"function\" ? (x = function(B) {\n            var Y = document.createElement(\"link\");\n            return B.attrs.type === void 0 && (B.attrs.type = \"text/css\"), B.attrs.rel = \"stylesheet\", ee(Y, B.attrs), C(B, Y), Y;\n          }(m), E = (function(B, Y, ge) {\n            var ie = ge.css, He = ge.sourceMap, mo = Y.convertToAbsoluteUrls === void 0 && He;\n            (Y.convertToAbsoluteUrls || mo) && (ie = g(ie)), He && (ie += `\n/*# sourceMappingURL=data:application/json;base64,` + btoa(unescape(encodeURIComponent(JSON.stringify(He)))) + \" */\");\n            var bo = new Blob([ie], { type: \"text/css\" }), mt = B.href;\n            B.href = URL.createObjectURL(bo), mt && URL.revokeObjectURL(mt);\n          }).bind(null, x, m), M = function() {\n            S(x), x.href && URL.revokeObjectURL(x.href);\n          }) : (x = _(m), E = (function(B, Y) {\n            var ge = Y.css, ie = Y.media;\n            if (ie && B.setAttribute(\"media\", ie), B.styleSheet)\n              B.styleSheet.cssText = ge;\n            else {\n              for (; B.firstChild; )\n                B.removeChild(B.firstChild);\n              B.appendChild(document.createTextNode(ge));\n            }\n          }).bind(null, x), M = function() {\n            S(x);\n          });\n        return E(v), function(B) {\n          if (B) {\n            if (B.css === v.css && B.media === v.media && B.sourceMap === v.sourceMap)\n              return;\n            E(v = B);\n          } else\n            M();\n        };\n      }\n      t.exports = function(v, m) {\n        if (typeof DEBUG < \"u\" && DEBUG && typeof document != \"object\")\n          throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n        (m = m || {}).attrs = typeof m.attrs == \"object\" ? m.attrs : {}, m.singleton || typeof m.singleton == \"boolean\" || (m.singleton = a()), m.insertInto || (m.insertInto = \"head\"), m.insertAt || (m.insertAt = \"bottom\");\n        var x = k(v, m);\n        return f(x, m), function(E) {\n          for (var M = [], T = 0; T < x.length; T++) {\n            var P = x[T];\n            (B = l[P.id]).refs--, M.push(B);\n          }\n          for (E && f(k(E, m), m), T = 0; T < M.length; T++) {\n            var B;\n            if ((B = M[T]).refs === 0) {\n              for (var Y = 0; Y < B.parts.length; Y++)\n                B.parts[Y]();\n              delete l[B.id];\n            }\n          }\n        };\n      };\n      var $, oe = ($ = [], function(v, m) {\n        return $[v] = m, $.filter(Boolean).join(`\n`);\n      });\n      function fe(v, m, x, E) {\n        var M = x ? \"\" : E.css;\n        if (v.styleSheet)\n          v.styleSheet.cssText = oe(m, M);\n        else {\n          var T = document.createTextNode(M), P = v.childNodes;\n          P[m] && v.removeChild(P[m]), P.length ? v.insertBefore(T, P[m]) : v.appendChild(T);\n        }\n      }\n    }, function(t, o) {\n      t.exports = function(i) {\n        var s = typeof window < \"u\" && window.location;\n        if (!s)\n          throw new Error(\"fixUrls requires window.location\");\n        if (!i || typeof i != \"string\")\n          return i;\n        var r = s.protocol + \"//\" + s.host, l = r + s.pathname.replace(/\\/[^\\/]*$/, \"/\");\n        return i.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(a, c) {\n          var u, h = c.trim().replace(/^\"(.*)\"$/, function(p, g) {\n            return g;\n          }).replace(/^'(.*)'$/, function(p, g) {\n            return g;\n          });\n          return /^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(h) ? a : (u = h.indexOf(\"//\") === 0 ? h : h.indexOf(\"/\") === 0 ? r + h : l + h.replace(/^\\.\\//, \"\"), \"url(\" + JSON.stringify(u) + \")\");\n        });\n      };\n    }, function(t, o, i) {\n      var s, r, l, a, c, u, h, p, g;\n      t.exports = (s = \"cdx-notifies\", r = \"cdx-notify\", l = \"cdx-notify__cross\", a = \"cdx-notify__button--confirm\", c = \"cdx-notify__button--cancel\", u = \"cdx-notify__input\", h = \"cdx-notify__button\", p = \"cdx-notify__btns-wrapper\", { alert: g = function(f) {\n        var k = document.createElement(\"DIV\"), C = document.createElement(\"DIV\"), S = f.message, _ = f.style;\n        return k.classList.add(r), _ && k.classList.add(r + \"--\" + _), k.innerHTML = S, C.classList.add(l), C.addEventListener(\"click\", k.remove.bind(k)), k.appendChild(C), k;\n      }, confirm: function(f) {\n        var k = g(f), C = document.createElement(\"div\"), S = document.createElement(\"button\"), _ = document.createElement(\"button\"), ee = k.querySelector(\".\" + l), j = f.cancelHandler, $ = f.okHandler;\n        return C.classList.add(p), S.innerHTML = f.okText || \"Confirm\", _.innerHTML = f.cancelText || \"Cancel\", S.classList.add(h), _.classList.add(h), S.classList.add(a), _.classList.add(c), j && typeof j == \"function\" && (_.addEventListener(\"click\", j), ee.addEventListener(\"click\", j)), $ && typeof $ == \"function\" && S.addEventListener(\"click\", $), S.addEventListener(\"click\", k.remove.bind(k)), _.addEventListener(\"click\", k.remove.bind(k)), C.appendChild(S), C.appendChild(_), k.appendChild(C), k;\n      }, prompt: function(f) {\n        var k = g(f), C = document.createElement(\"div\"), S = document.createElement(\"button\"), _ = document.createElement(\"input\"), ee = k.querySelector(\".\" + l), j = f.cancelHandler, $ = f.okHandler;\n        return C.classList.add(p), S.innerHTML = f.okText || \"Ok\", S.classList.add(h), S.classList.add(a), _.classList.add(u), f.placeholder && _.setAttribute(\"placeholder\", f.placeholder), f.default && (_.value = f.default), f.inputType && (_.type = f.inputType), j && typeof j == \"function\" && ee.addEventListener(\"click\", j), $ && typeof $ == \"function\" && S.addEventListener(\"click\", function() {\n          $(_.value);\n        }), S.addEventListener(\"click\", k.remove.bind(k)), C.appendChild(_), C.appendChild(S), k.appendChild(C), k;\n      }, getWrapper: function() {\n        var f = document.createElement(\"DIV\");\n        return f.classList.add(s), f;\n      } });\n    }]);\n  });\n})(Ut);\nvar Xo = Ut.exports;\nconst Vo = /* @__PURE__ */ Fe(Xo);\nclass qo {\n  /**\n   * Show web notification\n   *\n   * @param {NotifierOptions | ConfirmNotifierOptions | PromptNotifierOptions} options - notification options\n   */\n  show(e) {\n    Vo.show(e);\n  }\n}\nclass Zo extends y {\n  /**\n   * @param moduleConfiguration - Module Configuration\n   * @param moduleConfiguration.config - Editor's config\n   * @param moduleConfiguration.eventsDispatcher - Editor's event dispatcher\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    super({\n      config: e,\n      eventsDispatcher: t\n    }), this.notifier = new qo();\n  }\n  /**\n   * Available methods\n   */\n  get methods() {\n    return {\n      show: (e) => this.show(e)\n    };\n  }\n  /**\n   * Show notification\n   *\n   * @param {NotifierOptions} options - message option\n   */\n  show(e) {\n    return this.notifier.show(e);\n  }\n}\nclass Go extends y {\n  /**\n   * Available methods\n   */\n  get methods() {\n    const e = () => this.isEnabled;\n    return {\n      toggle: (t) => this.toggle(t),\n      get isEnabled() {\n        return e();\n      }\n    };\n  }\n  /**\n   * Set or toggle read-only state\n   *\n   * @param {boolean|undefined} state - set or toggle state\n   * @returns {boolean} current value\n   */\n  toggle(e) {\n    return this.Editor.ReadOnly.toggle(e);\n  }\n  /**\n   * Returns current read-only state\n   */\n  get isEnabled() {\n    return this.Editor.ReadOnly.isEnabled;\n  }\n}\nvar jt = { exports: {} };\n(function(n, e) {\n  (function(t, o) {\n    n.exports = o();\n  })(ko, function() {\n    function t(h) {\n      var p = h.tags, g = Object.keys(p), f = g.map(function(k) {\n        return typeof p[k];\n      }).every(function(k) {\n        return k === \"object\" || k === \"boolean\" || k === \"function\";\n      });\n      if (!f)\n        throw new Error(\"The configuration was invalid\");\n      this.config = h;\n    }\n    var o = [\"P\", \"LI\", \"TD\", \"TH\", \"DIV\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\", \"PRE\"];\n    function i(h) {\n      return o.indexOf(h.nodeName) !== -1;\n    }\n    var s = [\"A\", \"B\", \"STRONG\", \"I\", \"EM\", \"SUB\", \"SUP\", \"U\", \"STRIKE\"];\n    function r(h) {\n      return s.indexOf(h.nodeName) !== -1;\n    }\n    t.prototype.clean = function(h) {\n      const p = document.implementation.createHTMLDocument(), g = p.createElement(\"div\");\n      return g.innerHTML = h, this._sanitize(p, g), g.innerHTML;\n    }, t.prototype._sanitize = function(h, p) {\n      var g = l(h, p), f = g.firstChild();\n      if (f)\n        do {\n          if (f.nodeType === Node.TEXT_NODE)\n            if (f.data.trim() === \"\" && (f.previousElementSibling && i(f.previousElementSibling) || f.nextElementSibling && i(f.nextElementSibling))) {\n              p.removeChild(f), this._sanitize(h, p);\n              break;\n            } else\n              continue;\n          if (f.nodeType === Node.COMMENT_NODE) {\n            p.removeChild(f), this._sanitize(h, p);\n            break;\n          }\n          var k = r(f), C;\n          k && (C = Array.prototype.some.call(f.childNodes, i));\n          var S = !!p.parentNode, _ = i(p) && i(f) && S, ee = f.nodeName.toLowerCase(), j = a(this.config, ee, f), $ = k && C;\n          if ($ || c(f, j) || !this.config.keepNestedBlockElements && _) {\n            if (!(f.nodeName === \"SCRIPT\" || f.nodeName === \"STYLE\"))\n              for (; f.childNodes.length > 0; )\n                p.insertBefore(f.childNodes[0], f);\n            p.removeChild(f), this._sanitize(h, p);\n            break;\n          }\n          for (var oe = 0; oe < f.attributes.length; oe += 1) {\n            var fe = f.attributes[oe];\n            u(fe, j, f) && (f.removeAttribute(fe.name), oe = oe - 1);\n          }\n          this._sanitize(h, f);\n        } while (f = g.nextSibling());\n    };\n    function l(h, p) {\n      return h.createTreeWalker(\n        p,\n        NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT,\n        null,\n        !1\n      );\n    }\n    function a(h, p, g) {\n      return typeof h.tags[p] == \"function\" ? h.tags[p](g) : h.tags[p];\n    }\n    function c(h, p) {\n      return typeof p > \"u\" ? !0 : typeof p == \"boolean\" ? !p : !1;\n    }\n    function u(h, p, g) {\n      var f = h.name.toLowerCase();\n      return p === !0 ? !1 : typeof p[f] == \"function\" ? !p[f](h.value, g) : typeof p[f] > \"u\" || p[f] === !1 ? !0 : typeof p[f] == \"string\" ? p[f] !== h.value : !1;\n    }\n    return t;\n  });\n})(jt);\nvar Jo = jt.exports;\nconst Qo = /* @__PURE__ */ Fe(Jo);\nfunction it(n, e) {\n  return n.map((t) => {\n    const o = O(e) ? e(t.tool) : e;\n    return V(o) || (t.data = st(t.data, o)), t;\n  });\n}\nfunction q(n, e = {}) {\n  const t = {\n    tags: e\n  };\n  return new Qo(t).clean(n);\n}\nfunction st(n, e) {\n  return Array.isArray(n) ? ei(n, e) : R(n) ? ti(n, e) : Q(n) ? oi(n, e) : n;\n}\nfunction ei(n, e) {\n  return n.map((t) => st(t, e));\n}\nfunction ti(n, e) {\n  const t = {};\n  for (const o in n) {\n    if (!Object.prototype.hasOwnProperty.call(n, o))\n      continue;\n    const i = n[o], s = ii(e[o]) ? e[o] : e;\n    t[o] = st(i, s);\n  }\n  return t;\n}\nfunction oi(n, e) {\n  return R(e) ? q(n, e) : e === !1 ? q(n, {}) : n;\n}\nfunction ii(n) {\n  return R(n) || yo(n) || O(n);\n}\nclass si extends y {\n  /**\n   * Available methods\n   *\n   * @returns {SanitizerConfig}\n   */\n  get methods() {\n    return {\n      clean: (e, t) => this.clean(e, t)\n    };\n  }\n  /**\n   * Perform sanitizing of a string\n   *\n   * @param {string} taintString - what to sanitize\n   * @param {SanitizerConfig} config - sanitizer config\n   * @returns {string}\n   */\n  clean(e, t) {\n    return q(e, t);\n  }\n}\nclass ni extends y {\n  /**\n   * Available methods\n   *\n   * @returns {Saver}\n   */\n  get methods() {\n    return {\n      save: () => this.save()\n    };\n  }\n  /**\n   * Return Editor's data\n   *\n   * @returns {OutputData}\n   */\n  save() {\n    const e = \"Editor's content can not be saved in read-only mode\";\n    return this.Editor.ReadOnly.isEnabled ? (X(e, \"warn\"), Promise.reject(new Error(e))) : this.Editor.Saver.save();\n  }\n}\nclass ri extends y {\n  constructor() {\n    super(...arguments), this.selectionUtils = new b();\n  }\n  /**\n   * Available methods\n   *\n   * @returns {SelectionAPIInterface}\n   */\n  get methods() {\n    return {\n      findParentTag: (e, t) => this.findParentTag(e, t),\n      expandToTag: (e) => this.expandToTag(e),\n      save: () => this.selectionUtils.save(),\n      restore: () => this.selectionUtils.restore(),\n      setFakeBackground: () => this.selectionUtils.setFakeBackground(),\n      removeFakeBackground: () => this.selectionUtils.removeFakeBackground()\n    };\n  }\n  /**\n   * Looks ahead from selection and find passed tag with class name\n   *\n   * @param {string} tagName - tag to find\n   * @param {string} className - tag's class name\n   * @returns {HTMLElement|null}\n   */\n  findParentTag(e, t) {\n    return this.selectionUtils.findParentTag(e, t);\n  }\n  /**\n   * Expand selection to passed tag\n   *\n   * @param {HTMLElement} node - tag that should contain selection\n   */\n  expandToTag(e) {\n    this.selectionUtils.expandToTag(e);\n  }\n}\nclass li extends y {\n  /**\n   * Available methods\n   */\n  get methods() {\n    return {\n      getBlockTools: () => Array.from(this.Editor.Tools.blockTools.values())\n    };\n  }\n}\nclass ai extends y {\n  /**\n   * Exported classes\n   */\n  get classes() {\n    return {\n      /**\n       * Base Block styles\n       */\n      block: \"cdx-block\",\n      /**\n       * Inline Tools styles\n       */\n      inlineToolButton: \"ce-inline-tool\",\n      inlineToolButtonActive: \"ce-inline-tool--active\",\n      /**\n       * UI elements\n       */\n      input: \"cdx-input\",\n      loader: \"cdx-loader\",\n      button: \"cdx-button\",\n      /**\n       * Settings styles\n       */\n      settingsButton: \"cdx-settings-button\",\n      settingsButtonActive: \"cdx-settings-button--active\"\n    };\n  }\n}\nclass ci extends y {\n  /**\n   * Available methods\n   *\n   * @returns {Toolbar}\n   */\n  get methods() {\n    return {\n      close: () => this.close(),\n      open: () => this.open(),\n      toggleBlockSettings: (e) => this.toggleBlockSettings(e),\n      toggleToolbox: (e) => this.toggleToolbox(e)\n    };\n  }\n  /**\n   * Open toolbar\n   */\n  open() {\n    this.Editor.Toolbar.moveAndOpen();\n  }\n  /**\n   * Close toolbar and all included elements\n   */\n  close() {\n    this.Editor.Toolbar.close();\n  }\n  /**\n   * Toggles Block Setting of the current block\n   *\n   * @param {boolean} openingState —  opening state of Block Setting\n   */\n  toggleBlockSettings(e) {\n    if (this.Editor.BlockManager.currentBlockIndex === -1) {\n      X(\"Could't toggle the Toolbar because there is no block selected \", \"warn\");\n      return;\n    }\n    e ?? !this.Editor.BlockSettings.opened ? (this.Editor.Toolbar.moveAndOpen(), this.Editor.BlockSettings.open()) : this.Editor.BlockSettings.close();\n  }\n  /**\n   * Open toolbox\n   *\n   * @param {boolean} openingState - Opening state of toolbox\n   */\n  toggleToolbox(e) {\n    if (this.Editor.BlockManager.currentBlockIndex === -1) {\n      X(\"Could't toggle the Toolbox because there is no block selected \", \"warn\");\n      return;\n    }\n    e ?? !this.Editor.Toolbar.toolbox.opened ? (this.Editor.Toolbar.moveAndOpen(), this.Editor.Toolbar.toolbox.open()) : this.Editor.Toolbar.toolbox.close();\n  }\n}\nvar $t = { exports: {} };\n/*!\n * CodeX.Tooltips\n * \n * @version 1.0.5\n * \n * @licence MIT\n * @author CodeX <https://codex.so>\n * \n * \n */\n(function(n, e) {\n  (function(t, o) {\n    n.exports = o();\n  })(window, function() {\n    return function(t) {\n      var o = {};\n      function i(s) {\n        if (o[s])\n          return o[s].exports;\n        var r = o[s] = { i: s, l: !1, exports: {} };\n        return t[s].call(r.exports, r, r.exports, i), r.l = !0, r.exports;\n      }\n      return i.m = t, i.c = o, i.d = function(s, r, l) {\n        i.o(s, r) || Object.defineProperty(s, r, { enumerable: !0, get: l });\n      }, i.r = function(s) {\n        typeof Symbol < \"u\" && Symbol.toStringTag && Object.defineProperty(s, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(s, \"__esModule\", { value: !0 });\n      }, i.t = function(s, r) {\n        if (1 & r && (s = i(s)), 8 & r || 4 & r && typeof s == \"object\" && s && s.__esModule)\n          return s;\n        var l = /* @__PURE__ */ Object.create(null);\n        if (i.r(l), Object.defineProperty(l, \"default\", { enumerable: !0, value: s }), 2 & r && typeof s != \"string\")\n          for (var a in s)\n            i.d(l, a, (function(c) {\n              return s[c];\n            }).bind(null, a));\n        return l;\n      }, i.n = function(s) {\n        var r = s && s.__esModule ? function() {\n          return s.default;\n        } : function() {\n          return s;\n        };\n        return i.d(r, \"a\", r), r;\n      }, i.o = function(s, r) {\n        return Object.prototype.hasOwnProperty.call(s, r);\n      }, i.p = \"\", i(i.s = 0);\n    }([function(t, o, i) {\n      t.exports = i(1);\n    }, function(t, o, i) {\n      i.r(o), i.d(o, \"default\", function() {\n        return s;\n      });\n      class s {\n        constructor() {\n          this.nodes = { wrapper: null, content: null }, this.showed = !1, this.offsetTop = 10, this.offsetLeft = 10, this.offsetRight = 10, this.hidingDelay = 0, this.handleWindowScroll = () => {\n            this.showed && this.hide(!0);\n          }, this.loadStyles(), this.prepare(), window.addEventListener(\"scroll\", this.handleWindowScroll, { passive: !0 });\n        }\n        get CSS() {\n          return { tooltip: \"ct\", tooltipContent: \"ct__content\", tooltipShown: \"ct--shown\", placement: { left: \"ct--left\", bottom: \"ct--bottom\", right: \"ct--right\", top: \"ct--top\" } };\n        }\n        show(l, a, c) {\n          this.nodes.wrapper || this.prepare(), this.hidingTimeout && clearTimeout(this.hidingTimeout);\n          const u = Object.assign({ placement: \"bottom\", marginTop: 0, marginLeft: 0, marginRight: 0, marginBottom: 0, delay: 70, hidingDelay: 0 }, c);\n          if (u.hidingDelay && (this.hidingDelay = u.hidingDelay), this.nodes.content.innerHTML = \"\", typeof a == \"string\")\n            this.nodes.content.appendChild(document.createTextNode(a));\n          else {\n            if (!(a instanceof Node))\n              throw Error(\"[CodeX Tooltip] Wrong type of «content» passed. It should be an instance of Node or String. But \" + typeof a + \" given.\");\n            this.nodes.content.appendChild(a);\n          }\n          switch (this.nodes.wrapper.classList.remove(...Object.values(this.CSS.placement)), u.placement) {\n            case \"top\":\n              this.placeTop(l, u);\n              break;\n            case \"left\":\n              this.placeLeft(l, u);\n              break;\n            case \"right\":\n              this.placeRight(l, u);\n              break;\n            case \"bottom\":\n            default:\n              this.placeBottom(l, u);\n          }\n          u && u.delay ? this.showingTimeout = setTimeout(() => {\n            this.nodes.wrapper.classList.add(this.CSS.tooltipShown), this.showed = !0;\n          }, u.delay) : (this.nodes.wrapper.classList.add(this.CSS.tooltipShown), this.showed = !0);\n        }\n        hide(l = !1) {\n          if (this.hidingDelay && !l)\n            return this.hidingTimeout && clearTimeout(this.hidingTimeout), void (this.hidingTimeout = setTimeout(() => {\n              this.hide(!0);\n            }, this.hidingDelay));\n          this.nodes.wrapper.classList.remove(this.CSS.tooltipShown), this.showed = !1, this.showingTimeout && clearTimeout(this.showingTimeout);\n        }\n        onHover(l, a, c) {\n          l.addEventListener(\"mouseenter\", () => {\n            this.show(l, a, c);\n          }), l.addEventListener(\"mouseleave\", () => {\n            this.hide();\n          });\n        }\n        destroy() {\n          this.nodes.wrapper.remove(), window.removeEventListener(\"scroll\", this.handleWindowScroll);\n        }\n        prepare() {\n          this.nodes.wrapper = this.make(\"div\", this.CSS.tooltip), this.nodes.content = this.make(\"div\", this.CSS.tooltipContent), this.append(this.nodes.wrapper, this.nodes.content), this.append(document.body, this.nodes.wrapper);\n        }\n        loadStyles() {\n          const l = \"codex-tooltips-style\";\n          if (document.getElementById(l))\n            return;\n          const a = i(2), c = this.make(\"style\", null, { textContent: a.toString(), id: l });\n          this.prepend(document.head, c);\n        }\n        placeBottom(l, a) {\n          const c = l.getBoundingClientRect(), u = c.left + l.clientWidth / 2 - this.nodes.wrapper.offsetWidth / 2, h = c.bottom + window.pageYOffset + this.offsetTop + a.marginTop;\n          this.applyPlacement(\"bottom\", u, h);\n        }\n        placeTop(l, a) {\n          const c = l.getBoundingClientRect(), u = c.left + l.clientWidth / 2 - this.nodes.wrapper.offsetWidth / 2, h = c.top + window.pageYOffset - this.nodes.wrapper.clientHeight - this.offsetTop;\n          this.applyPlacement(\"top\", u, h);\n        }\n        placeLeft(l, a) {\n          const c = l.getBoundingClientRect(), u = c.left - this.nodes.wrapper.offsetWidth - this.offsetLeft - a.marginLeft, h = c.top + window.pageYOffset + l.clientHeight / 2 - this.nodes.wrapper.offsetHeight / 2;\n          this.applyPlacement(\"left\", u, h);\n        }\n        placeRight(l, a) {\n          const c = l.getBoundingClientRect(), u = c.right + this.offsetRight + a.marginRight, h = c.top + window.pageYOffset + l.clientHeight / 2 - this.nodes.wrapper.offsetHeight / 2;\n          this.applyPlacement(\"right\", u, h);\n        }\n        applyPlacement(l, a, c) {\n          this.nodes.wrapper.classList.add(this.CSS.placement[l]), this.nodes.wrapper.style.left = a + \"px\", this.nodes.wrapper.style.top = c + \"px\";\n        }\n        make(l, a = null, c = {}) {\n          const u = document.createElement(l);\n          Array.isArray(a) ? u.classList.add(...a) : a && u.classList.add(a);\n          for (const h in c)\n            c.hasOwnProperty(h) && (u[h] = c[h]);\n          return u;\n        }\n        append(l, a) {\n          Array.isArray(a) ? a.forEach((c) => l.appendChild(c)) : l.appendChild(a);\n        }\n        prepend(l, a) {\n          Array.isArray(a) ? (a = a.reverse()).forEach((c) => l.prepend(c)) : l.prepend(a);\n        }\n      }\n    }, function(t, o) {\n      t.exports = `.ct{z-index:999;opacity:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none;-webkit-transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1),-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);will-change:opacity,top,left;-webkit-box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);border-radius:9px}.ct,.ct:before{position:absolute;top:0;left:0}.ct:before{content:\"\";bottom:0;right:0;background-color:#1d202b;z-index:-1;border-radius:4px}@supports(-webkit-mask-box-image:url(\"\")){.ct:before{border-radius:0;-webkit-mask-box-image:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\"><path d=\"M10.71 0h2.58c3.02 0 4.64.42 6.1 1.2a8.18 8.18 0 013.4 3.4C23.6 6.07 24 7.7 24 10.71v2.58c0 3.02-.42 4.64-1.2 6.1a8.18 8.18 0 01-3.4 3.4c-1.47.8-3.1 1.21-6.11 1.21H10.7c-3.02 0-4.64-.42-6.1-1.2a8.18 8.18 0 01-3.4-3.4C.4 17.93 0 16.3 0 13.29V10.7c0-3.02.42-4.64 1.2-6.1a8.18 8.18 0 013.4-3.4C6.07.4 7.7 0 10.71 0z\"/></svg>') 48% 41% 37.9% 53.3%}}@media (--mobile){.ct{display:none}}.ct__content{padding:6px 10px;color:#cdd1e0;font-size:12px;text-align:center;letter-spacing:.02em;line-height:1em}.ct:after{content:\"\";width:8px;height:8px;position:absolute;background-color:#1d202b;z-index:-1}.ct--bottom{-webkit-transform:translateY(5px);transform:translateY(5px)}.ct--bottom:after{top:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--top{-webkit-transform:translateY(-5px);transform:translateY(-5px)}.ct--top:after{top:auto;bottom:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--left{-webkit-transform:translateX(-5px);transform:translateX(-5px)}.ct--left:after{top:50%;left:auto;right:0;-webkit-transform:translate(41.6%,-50%) rotate(-45deg);transform:translate(41.6%,-50%) rotate(-45deg)}.ct--right{-webkit-transform:translateX(5px);transform:translateX(5px)}.ct--right:after{top:50%;left:0;-webkit-transform:translate(-41.6%,-50%) rotate(-45deg);transform:translate(-41.6%,-50%) rotate(-45deg)}.ct--shown{opacity:1;-webkit-transform:none;transform:none}`;\n    }]).default;\n  });\n})($t);\nvar di = $t.exports;\nconst hi = /* @__PURE__ */ Fe(di);\nlet U = null;\nfunction nt() {\n  U || (U = new hi());\n}\nfunction ui(n, e, t) {\n  nt(), U == null || U.show(n, e, t);\n}\nfunction Ne(n = !1) {\n  nt(), U == null || U.hide(n);\n}\nfunction Pe(n, e, t) {\n  nt(), U == null || U.onHover(n, e, t);\n}\nfunction pi() {\n  U == null || U.destroy(), U = null;\n}\nclass fi extends y {\n  /**\n   * @class\n   * @param moduleConfiguration - Module Configuration\n   * @param moduleConfiguration.config - Editor's config\n   * @param moduleConfiguration.eventsDispatcher - Editor's event dispatcher\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    super({\n      config: e,\n      eventsDispatcher: t\n    });\n  }\n  /**\n   * Available methods\n   */\n  get methods() {\n    return {\n      show: (e, t, o) => this.show(e, t, o),\n      hide: () => this.hide(),\n      onHover: (e, t, o) => this.onHover(e, t, o)\n    };\n  }\n  /**\n   * Method show tooltip on element with passed HTML content\n   *\n   * @param {HTMLElement} element - element on which tooltip should be shown\n   * @param {TooltipContent} content - tooltip content\n   * @param {TooltipOptions} options - tooltip options\n   */\n  show(e, t, o) {\n    ui(e, t, o);\n  }\n  /**\n   * Method hides tooltip on HTML page\n   */\n  hide() {\n    Ne();\n  }\n  /**\n   * Decorator for showing Tooltip by mouseenter/mouseleave\n   *\n   * @param {HTMLElement} element - element on which tooltip should be shown\n   * @param {TooltipContent} content - tooltip content\n   * @param {TooltipOptions} options - tooltip options\n   */\n  onHover(e, t, o) {\n    Pe(e, t, o);\n  }\n}\nclass gi extends y {\n  /**\n   * Available methods / getters\n   */\n  get methods() {\n    return {\n      nodes: this.editorNodes\n      /**\n       * There can be added some UI methods, like toggleThinMode() etc\n       */\n    };\n  }\n  /**\n   * Exported classes\n   */\n  get editorNodes() {\n    return {\n      /**\n       * Top-level editor instance wrapper\n       */\n      wrapper: this.Editor.UI.nodes.wrapper,\n      /**\n       * Element that holds all the Blocks\n       */\n      redactor: this.Editor.UI.nodes.redactor\n    };\n  }\n}\nfunction Yt(n, e) {\n  const t = {};\n  return Object.entries(n).forEach(([o, i]) => {\n    if (R(i)) {\n      const s = e ? `${e}.${o}` : o;\n      Object.values(i).every((l) => Q(l)) ? t[o] = s : t[o] = Yt(i, s);\n      return;\n    }\n    t[o] = i;\n  }), t;\n}\nconst K = Yt(_t);\nfunction mi(n, e) {\n  const t = {};\n  return Object.keys(n).forEach((o) => {\n    const i = e[o];\n    i !== void 0 ? t[i] = n[o] : t[o] = n[o];\n  }), t;\n}\nconst Wt = class ve {\n  /**\n   * @param {HTMLElement[]} nodeList — the list of iterable HTML-items\n   * @param {string} focusedCssClass - user-provided CSS-class that will be set in flipping process\n   */\n  constructor(e, t) {\n    this.cursor = -1, this.items = [], this.items = e || [], this.focusedCssClass = t;\n  }\n  /**\n   * Returns Focused button Node\n   *\n   * @returns {HTMLElement}\n   */\n  get currentItem() {\n    return this.cursor === -1 ? null : this.items[this.cursor];\n  }\n  /**\n   * Sets cursor to specified position\n   *\n   * @param cursorPosition - new cursor position\n   */\n  setCursor(e) {\n    e < this.items.length && e >= -1 && (this.dropCursor(), this.cursor = e, this.items[this.cursor].classList.add(this.focusedCssClass));\n  }\n  /**\n   * Sets items. Can be used when iterable items changed dynamically\n   *\n   * @param {HTMLElement[]} nodeList - nodes to iterate\n   */\n  setItems(e) {\n    this.items = e;\n  }\n  /**\n   * Sets cursor next to the current\n   */\n  next() {\n    this.cursor = this.leafNodesAndReturnIndex(ve.directions.RIGHT);\n  }\n  /**\n   * Sets cursor before current\n   */\n  previous() {\n    this.cursor = this.leafNodesAndReturnIndex(ve.directions.LEFT);\n  }\n  /**\n   * Sets cursor to the default position and removes CSS-class from previously focused item\n   */\n  dropCursor() {\n    this.cursor !== -1 && (this.items[this.cursor].classList.remove(this.focusedCssClass), this.cursor = -1);\n  }\n  /**\n   * Leafs nodes inside the target list from active element\n   *\n   * @param {string} direction - leaf direction. Can be 'left' or 'right'\n   * @returns {number} index of focused node\n   */\n  leafNodesAndReturnIndex(e) {\n    if (this.items.length === 0)\n      return this.cursor;\n    let t = this.cursor;\n    return t === -1 ? t = e === ve.directions.RIGHT ? -1 : 0 : this.items[t].classList.remove(this.focusedCssClass), e === ve.directions.RIGHT ? t = (t + 1) % this.items.length : t = (this.items.length + t - 1) % this.items.length, d.canSetCaret(this.items[t]) && Oe(() => b.setCursor(this.items[t]), 50)(), this.items[t].classList.add(this.focusedCssClass), t;\n  }\n};\nWt.directions = {\n  RIGHT: \"right\",\n  LEFT: \"left\"\n};\nlet me = Wt;\nclass le {\n  /**\n   * @param options - different constructing settings\n   */\n  constructor(e) {\n    this.iterator = null, this.activated = !1, this.flipCallbacks = [], this.onKeyDown = (t) => {\n      if (this.isEventReadyForHandling(t))\n        switch (le.usedKeys.includes(t.keyCode) && t.preventDefault(), t.keyCode) {\n          case w.TAB:\n            this.handleTabPress(t);\n            break;\n          case w.LEFT:\n          case w.UP:\n            this.flipLeft();\n            break;\n          case w.RIGHT:\n          case w.DOWN:\n            this.flipRight();\n            break;\n          case w.ENTER:\n            this.handleEnterPress(t);\n            break;\n        }\n    }, this.iterator = new me(e.items, e.focusedItemClass), this.activateCallback = e.activateCallback, this.allowedKeys = e.allowedKeys || le.usedKeys;\n  }\n  /**\n   * True if flipper is currently activated\n   */\n  get isActivated() {\n    return this.activated;\n  }\n  /**\n   * Array of keys (codes) that is handled by Flipper\n   * Used to:\n   *  - preventDefault only for this keys, not all keydowns (@see constructor)\n   *  - to skip external behaviours only for these keys, when filler is activated (@see BlockEvents@arrowRightAndDown)\n   */\n  static get usedKeys() {\n    return [\n      w.TAB,\n      w.LEFT,\n      w.RIGHT,\n      w.ENTER,\n      w.UP,\n      w.DOWN\n    ];\n  }\n  /**\n   * Active tab/arrows handling by flipper\n   *\n   * @param items - Some modules (like, InlineToolbar, BlockSettings) might refresh buttons dynamically\n   * @param cursorPosition - index of the item that should be focused once flipper is activated\n   */\n  activate(e, t) {\n    this.activated = !0, e && this.iterator.setItems(e), t !== void 0 && this.iterator.setCursor(t), document.addEventListener(\"keydown\", this.onKeyDown, !0);\n  }\n  /**\n   * Disable tab/arrows handling by flipper\n   */\n  deactivate() {\n    this.activated = !1, this.dropCursor(), document.removeEventListener(\"keydown\", this.onKeyDown);\n  }\n  /**\n   * Focus first item\n   */\n  focusFirst() {\n    this.dropCursor(), this.flipRight();\n  }\n  /**\n   * Focuses previous flipper iterator item\n   */\n  flipLeft() {\n    this.iterator.previous(), this.flipCallback();\n  }\n  /**\n   * Focuses next flipper iterator item\n   */\n  flipRight() {\n    this.iterator.next(), this.flipCallback();\n  }\n  /**\n   * Return true if some button is focused\n   */\n  hasFocus() {\n    return !!this.iterator.currentItem;\n  }\n  /**\n   * Registeres function that should be executed on each navigation action\n   *\n   * @param cb - function to execute\n   */\n  onFlip(e) {\n    this.flipCallbacks.push(e);\n  }\n  /**\n   * Unregisteres function that is executed on each navigation action\n   *\n   * @param cb - function to stop executing\n   */\n  removeOnFlip(e) {\n    this.flipCallbacks = this.flipCallbacks.filter((t) => t !== e);\n  }\n  /**\n   * Drops flipper's iterator cursor\n   *\n   * @see DomIterator#dropCursor\n   */\n  dropCursor() {\n    this.iterator.dropCursor();\n  }\n  /**\n   * This function is fired before handling flipper keycodes\n   * The result of this function defines if it is need to be handled or not\n   *\n   * @param {KeyboardEvent} event - keydown keyboard event\n   * @returns {boolean}\n   */\n  isEventReadyForHandling(e) {\n    return this.activated && this.allowedKeys.includes(e.keyCode);\n  }\n  /**\n   * When flipper is activated tab press will leaf the items\n   *\n   * @param {KeyboardEvent} event - tab keydown event\n   */\n  handleTabPress(e) {\n    switch (e.shiftKey ? me.directions.LEFT : me.directions.RIGHT) {\n      case me.directions.RIGHT:\n        this.flipRight();\n        break;\n      case me.directions.LEFT:\n        this.flipLeft();\n        break;\n    }\n  }\n  /**\n   * Enter press will click current item if flipper is activated\n   *\n   * @param {KeyboardEvent} event - enter keydown event\n   */\n  handleEnterPress(e) {\n    this.activated && (this.iterator.currentItem && (e.stopPropagation(), e.preventDefault(), this.iterator.currentItem.click()), O(this.activateCallback) && this.activateCallback(this.iterator.currentItem));\n  }\n  /**\n   * Fired after flipping in any direction\n   */\n  flipCallback() {\n    this.iterator.currentItem && this.iterator.currentItem.scrollIntoViewIfNeeded(), this.flipCallbacks.forEach((e) => e());\n  }\n}\nconst bi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9 12L9 7.1C9 7.04477 9.04477 7 9.1 7H10.4C11.5 7 14 7.1 14 9.5C14 9.5 14 12 11 12M9 12V16.8C9 16.9105 9.08954 17 9.2 17H12.5C14 17 15 16 15 14.5C15 11.7046 11 12 11 12M9 12H11\"/></svg>', ki = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7 10L11.8586 14.8586C11.9367 14.9367 12.0633 14.9367 12.1414 14.8586L17 10\"/></svg>', vi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M14.5 17.5L9.64142 12.6414C9.56331 12.5633 9.56331 12.4367 9.64142 12.3586L14.5 7.5\"/></svg>', wi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9.58284 17.5L14.4414 12.6414C14.5195 12.5633 14.5195 12.4367 14.4414 12.3586L9.58284 7.5\"/></svg>', xi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7 15L11.8586 10.1414C11.9367 10.0633 12.0633 10.0633 12.1414 10.1414L17 15\"/></svg>', yi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8 8L12 12M12 12L16 16M12 12L16 8M12 12L8 16\"/></svg>', Ei = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><circle cx=\"12\" cy=\"12\" r=\"4\" stroke=\"currentColor\" stroke-width=\"2\"/></svg>', Bi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M13.34 10C12.4223 12.7337 11 17 11 17\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M14.21 7H14.2\"/></svg>', yt = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7.69998 12.6L7.67896 12.62C6.53993 13.7048 6.52012 15.5155 7.63516 16.625V16.625C8.72293 17.7073 10.4799 17.7102 11.5712 16.6314L13.0263 15.193C14.0703 14.1609 14.2141 12.525 13.3662 11.3266L13.22 11.12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16.22 11.12L16.3564 10.9805C17.2895 10.0265 17.3478 8.5207 16.4914 7.49733V7.49733C15.5691 6.39509 13.9269 6.25143 12.8271 7.17675L11.3901 8.38588C10.0935 9.47674 9.95706 11.4241 11.0888 12.6852L11.12 12.72\"/></svg>', Ti = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.40999 7.29999H9.4\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 7.29999H14.59\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.30999 12H9.3\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 12H14.59\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.40999 16.7H9.4\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 16.7H14.59\"/></svg>', Ci = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M12 7V12M12 17V12M17 12H12M12 12H7\"/></svg>', Kt = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M11.5 17.5L5 11M5 11V15.5M5 11H9.5\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M12.5 6.5L19 13M19 13V8.5M19 13H14.5\"/></svg>', Si = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><circle cx=\"10.5\" cy=\"10.5\" r=\"5.5\" stroke=\"currentColor\" stroke-width=\"2\"/><line x1=\"15.4142\" x2=\"19\" y1=\"15\" y2=\"18.5858\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>', Ii = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M15.7795 11.5C15.7795 11.5 16.053 11.1962 16.5497 10.6722C17.4442 9.72856 17.4701 8.2475 16.5781 7.30145V7.30145C15.6482 6.31522 14.0873 6.29227 13.1288 7.25073L11.8796 8.49999\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8.24517 12.3883C8.24517 12.3883 7.97171 12.6922 7.47504 13.2161C6.58051 14.1598 6.55467 15.6408 7.44666 16.5869V16.5869C8.37653 17.5731 9.93744 17.5961 10.8959 16.6376L12.1452 15.3883\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M17.7802 15.1032L16.597 14.9422C16.0109 14.8624 15.4841 15.3059 15.4627 15.8969L15.4199 17.0818\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6.39064 9.03238L7.58432 9.06668C8.17551 9.08366 8.6522 8.58665 8.61056 7.99669L8.5271 6.81397\"/><line x1=\"12.1142\" x2=\"11.7\" y1=\"12.2\" y2=\"11.7858\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>', Mi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/><line x1=\"12\" x2=\"12\" y1=\"9\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M12 15.02V15.01\"/></svg>', Ai = \"__\", Oi = \"--\";\nfunction te(n) {\n  return (e, t) => [[n, e].filter((i) => !!i).join(Ai), t].filter((i) => !!i).join(Oi);\n}\nconst be = te(\"ce-hint\"), ke = {\n  root: be(),\n  alignedStart: be(null, \"align-left\"),\n  alignedCenter: be(null, \"align-center\"),\n  title: be(\"title\"),\n  description: be(\"description\")\n};\nclass Li {\n  /**\n   * Constructs the hint content instance\n   *\n   * @param params - hint content parameters\n   */\n  constructor(e) {\n    this.nodes = {\n      root: d.make(\"div\", [ke.root, e.alignment === \"center\" ? ke.alignedCenter : ke.alignedStart]),\n      title: d.make(\"div\", ke.title, { textContent: e.title })\n    }, this.nodes.root.appendChild(this.nodes.title), e.description !== void 0 && (this.nodes.description = d.make(\"div\", ke.description, { textContent: e.description }), this.nodes.root.appendChild(this.nodes.description));\n  }\n  /**\n   * Returns the root element of the hint content\n   */\n  getElement() {\n    return this.nodes.root;\n  }\n}\nclass rt {\n  /**\n   * Constructs the instance\n   *\n   * @param params - instance parameters\n   */\n  constructor(e) {\n    this.params = e;\n  }\n  /**\n   * Item name if exists\n   */\n  get name() {\n    if (this.params !== void 0 && \"name\" in this.params)\n      return this.params.name;\n  }\n  /**\n   * Destroys the instance\n   */\n  destroy() {\n    Ne();\n  }\n  /**\n   * Called when children popover is opened (if exists)\n   */\n  onChildrenOpen() {\n    var e;\n    this.params !== void 0 && \"children\" in this.params && typeof ((e = this.params.children) == null ? void 0 : e.onOpen) == \"function\" && this.params.children.onOpen();\n  }\n  /**\n   * Called when children popover is closed (if exists)\n   */\n  onChildrenClose() {\n    var e;\n    this.params !== void 0 && \"children\" in this.params && typeof ((e = this.params.children) == null ? void 0 : e.onClose) == \"function\" && this.params.children.onClose();\n  }\n  /**\n   * Called on popover item click\n   */\n  handleClick() {\n    var e, t;\n    this.params !== void 0 && \"onActivate\" in this.params && ((t = (e = this.params).onActivate) == null || t.call(e, this.params));\n  }\n  /**\n   * Adds hint to the item element if hint data is provided\n   *\n   * @param itemElement - popover item root element to add hint to\n   * @param hintData - hint data\n   */\n  addHint(e, t) {\n    const o = new Li(t);\n    Pe(e, o.getElement(), {\n      placement: t.position,\n      hidingDelay: 100\n    });\n  }\n  /**\n   * Returns item children that are represented as popover items\n   */\n  get children() {\n    var e;\n    return this.params !== void 0 && \"children\" in this.params && ((e = this.params.children) == null ? void 0 : e.items) !== void 0 ? this.params.children.items : [];\n  }\n  /**\n   * Returns true if item has any type of children\n   */\n  get hasChildren() {\n    return this.children.length > 0;\n  }\n  /**\n   * Returns true if item children should be open instantly after popover is opened and not on item click/hover\n   */\n  get isChildrenOpen() {\n    var e;\n    return this.params !== void 0 && \"children\" in this.params && ((e = this.params.children) == null ? void 0 : e.isOpen) === !0;\n  }\n  /**\n   * True if item children items should be navigatable via keyboard\n   */\n  get isChildrenFlippable() {\n    var e;\n    return !(this.params === void 0 || !(\"children\" in this.params) || ((e = this.params.children) == null ? void 0 : e.isFlippable) === !1);\n  }\n  /**\n   * Returns true if item has children that should be searchable\n   */\n  get isChildrenSearchable() {\n    var e;\n    return this.params !== void 0 && \"children\" in this.params && ((e = this.params.children) == null ? void 0 : e.searchable) === !0;\n  }\n  /**\n   * True if popover should close once item is activated\n   */\n  get closeOnActivate() {\n    return this.params !== void 0 && \"closeOnActivate\" in this.params && this.params.closeOnActivate;\n  }\n  /**\n   * True if item is active\n   */\n  get isActive() {\n    return this.params === void 0 || !(\"isActive\" in this.params) ? !1 : typeof this.params.isActive == \"function\" ? this.params.isActive() : this.params.isActive === !0;\n  }\n}\nconst W = te(\"ce-popover-item\"), L = {\n  container: W(),\n  active: W(null, \"active\"),\n  disabled: W(null, \"disabled\"),\n  focused: W(null, \"focused\"),\n  hidden: W(null, \"hidden\"),\n  confirmationState: W(null, \"confirmation\"),\n  noHover: W(null, \"no-hover\"),\n  noFocus: W(null, \"no-focus\"),\n  title: W(\"title\"),\n  secondaryTitle: W(\"secondary-title\"),\n  icon: W(\"icon\"),\n  iconTool: W(\"icon\", \"tool\"),\n  iconChevronRight: W(\"icon\", \"chevron-right\"),\n  wobbleAnimation: te(\"wobble\")()\n};\nclass se extends rt {\n  /**\n   * Constructs popover item instance\n   *\n   * @param params - popover item construction params\n   * @param renderParams - popover item render params.\n   * The parameters that are not set by user via popover api but rather depend on technical implementation\n   */\n  constructor(e, t) {\n    super(e), this.params = e, this.nodes = {\n      root: null,\n      icon: null\n    }, this.confirmationState = null, this.removeSpecialFocusBehavior = () => {\n      var o;\n      (o = this.nodes.root) == null || o.classList.remove(L.noFocus);\n    }, this.removeSpecialHoverBehavior = () => {\n      var o;\n      (o = this.nodes.root) == null || o.classList.remove(L.noHover);\n    }, this.onErrorAnimationEnd = () => {\n      var o, i;\n      (o = this.nodes.icon) == null || o.classList.remove(L.wobbleAnimation), (i = this.nodes.icon) == null || i.removeEventListener(\"animationend\", this.onErrorAnimationEnd);\n    }, this.nodes.root = this.make(e, t);\n  }\n  /**\n   * True if item is disabled and hence not clickable\n   */\n  get isDisabled() {\n    return this.params.isDisabled === !0;\n  }\n  /**\n   * Exposes popover item toggle parameter\n   */\n  get toggle() {\n    return this.params.toggle;\n  }\n  /**\n   * Item title\n   */\n  get title() {\n    return this.params.title;\n  }\n  /**\n   * True if confirmation state is enabled for popover item\n   */\n  get isConfirmationStateEnabled() {\n    return this.confirmationState !== null;\n  }\n  /**\n   * True if item is focused in keyboard navigation process\n   */\n  get isFocused() {\n    return this.nodes.root === null ? !1 : this.nodes.root.classList.contains(L.focused);\n  }\n  /**\n   * Returns popover item root element\n   */\n  getElement() {\n    return this.nodes.root;\n  }\n  /**\n   * Called on popover item click\n   */\n  handleClick() {\n    if (this.isConfirmationStateEnabled && this.confirmationState !== null) {\n      this.activateOrEnableConfirmationMode(this.confirmationState);\n      return;\n    }\n    this.activateOrEnableConfirmationMode(this.params);\n  }\n  /**\n   * Toggles item active state\n   *\n   * @param isActive - true if item should strictly should become active\n   */\n  toggleActive(e) {\n    var t;\n    (t = this.nodes.root) == null || t.classList.toggle(L.active, e);\n  }\n  /**\n   * Toggles item hidden state\n   *\n   * @param isHidden - true if item should be hidden\n   */\n  toggleHidden(e) {\n    var t;\n    (t = this.nodes.root) == null || t.classList.toggle(L.hidden, e);\n  }\n  /**\n   * Resets popover item to its original state\n   */\n  reset() {\n    this.isConfirmationStateEnabled && this.disableConfirmationMode();\n  }\n  /**\n   * Method called once item becomes focused during keyboard navigation\n   */\n  onFocus() {\n    this.disableSpecialHoverAndFocusBehavior();\n  }\n  /**\n   * Constructs HTML element corresponding to popover item params\n   *\n   * @param params - item construction params\n   * @param renderParams - popover item render params\n   */\n  make(e, t) {\n    var s, r;\n    const o = (t == null ? void 0 : t.wrapperTag) || \"div\", i = d.make(o, L.container, {\n      type: o === \"button\" ? \"button\" : void 0\n    });\n    return e.name && (i.dataset.itemName = e.name), this.nodes.icon = d.make(\"div\", [L.icon, L.iconTool], {\n      innerHTML: e.icon || Ei\n    }), i.appendChild(this.nodes.icon), e.title !== void 0 && i.appendChild(d.make(\"div\", L.title, {\n      innerHTML: e.title || \"\"\n    })), e.secondaryLabel && i.appendChild(d.make(\"div\", L.secondaryTitle, {\n      textContent: e.secondaryLabel\n    })), this.hasChildren && i.appendChild(d.make(\"div\", [L.icon, L.iconChevronRight], {\n      innerHTML: wi\n    })), this.isActive && i.classList.add(L.active), e.isDisabled && i.classList.add(L.disabled), e.hint !== void 0 && ((s = t == null ? void 0 : t.hint) == null ? void 0 : s.enabled) !== !1 && this.addHint(i, {\n      ...e.hint,\n      position: ((r = t == null ? void 0 : t.hint) == null ? void 0 : r.position) || \"right\"\n    }), i;\n  }\n  /**\n   * Activates confirmation mode for the item.\n   *\n   * @param newState - new popover item params that should be applied\n   */\n  enableConfirmationMode(e) {\n    if (this.nodes.root === null)\n      return;\n    const t = {\n      ...this.params,\n      ...e,\n      confirmation: \"confirmation\" in e ? e.confirmation : void 0\n    }, o = this.make(t);\n    this.nodes.root.innerHTML = o.innerHTML, this.nodes.root.classList.add(L.confirmationState), this.confirmationState = e, this.enableSpecialHoverAndFocusBehavior();\n  }\n  /**\n   * Returns item to its original state\n   */\n  disableConfirmationMode() {\n    if (this.nodes.root === null)\n      return;\n    const e = this.make(this.params);\n    this.nodes.root.innerHTML = e.innerHTML, this.nodes.root.classList.remove(L.confirmationState), this.confirmationState = null, this.disableSpecialHoverAndFocusBehavior();\n  }\n  /**\n   * Enables special focus and hover behavior for item in confirmation state.\n   * This is needed to prevent item from being highlighted as hovered/focused just after click.\n   */\n  enableSpecialHoverAndFocusBehavior() {\n    var e, t, o;\n    (e = this.nodes.root) == null || e.classList.add(L.noHover), (t = this.nodes.root) == null || t.classList.add(L.noFocus), (o = this.nodes.root) == null || o.addEventListener(\"mouseleave\", this.removeSpecialHoverBehavior, { once: !0 });\n  }\n  /**\n   * Disables special focus and hover behavior\n   */\n  disableSpecialHoverAndFocusBehavior() {\n    var e;\n    this.removeSpecialFocusBehavior(), this.removeSpecialHoverBehavior(), (e = this.nodes.root) == null || e.removeEventListener(\"mouseleave\", this.removeSpecialHoverBehavior);\n  }\n  /**\n   * Executes item's onActivate callback if the item has no confirmation configured\n   *\n   * @param item - item to activate or bring to confirmation mode\n   */\n  activateOrEnableConfirmationMode(e) {\n    var t;\n    if (!(\"confirmation\" in e) || e.confirmation === void 0)\n      try {\n        (t = e.onActivate) == null || t.call(e, e), this.disableConfirmationMode();\n      } catch {\n        this.animateError();\n      }\n    else\n      this.enableConfirmationMode(e.confirmation);\n  }\n  /**\n   * Animates item which symbolizes that error occured while executing 'onActivate()' callback\n   */\n  animateError() {\n    var e, t, o;\n    (e = this.nodes.icon) != null && e.classList.contains(L.wobbleAnimation) || ((t = this.nodes.icon) == null || t.classList.add(L.wobbleAnimation), (o = this.nodes.icon) == null || o.addEventListener(\"animationend\", this.onErrorAnimationEnd));\n  }\n}\nconst Ue = te(\"ce-popover-item-separator\"), je = {\n  container: Ue(),\n  line: Ue(\"line\"),\n  hidden: Ue(null, \"hidden\")\n};\nclass Xt extends rt {\n  /**\n   * Constructs the instance\n   */\n  constructor() {\n    super(), this.nodes = {\n      root: d.make(\"div\", je.container),\n      line: d.make(\"div\", je.line)\n    }, this.nodes.root.appendChild(this.nodes.line);\n  }\n  /**\n   * Returns popover separator root element\n   */\n  getElement() {\n    return this.nodes.root;\n  }\n  /**\n   * Toggles item hidden state\n   *\n   * @param isHidden - true if item should be hidden\n   */\n  toggleHidden(e) {\n    var t;\n    (t = this.nodes.root) == null || t.classList.toggle(je.hidden, e);\n  }\n}\nvar Z = /* @__PURE__ */ ((n) => (n.Closed = \"closed\", n.ClosedOnActivate = \"closed-on-activate\", n))(Z || {});\nconst H = te(\"ce-popover\"), N = {\n  popover: H(),\n  popoverContainer: H(\"container\"),\n  popoverOpenTop: H(null, \"open-top\"),\n  popoverOpenLeft: H(null, \"open-left\"),\n  popoverOpened: H(null, \"opened\"),\n  search: H(\"search\"),\n  nothingFoundMessage: H(\"nothing-found-message\"),\n  nothingFoundMessageDisplayed: H(\"nothing-found-message\", \"displayed\"),\n  items: H(\"items\"),\n  overlay: H(\"overlay\"),\n  overlayHidden: H(\"overlay\", \"hidden\"),\n  popoverNested: H(null, \"nested\"),\n  getPopoverNestedClass: (n) => H(null, `nested-level-${n.toString()}`),\n  popoverInline: H(null, \"inline\"),\n  popoverHeader: H(\"header\")\n};\nvar de = /* @__PURE__ */ ((n) => (n.NestingLevel = \"--nesting-level\", n.PopoverHeight = \"--popover-height\", n.InlinePopoverWidth = \"--inline-popover-width\", n.TriggerItemLeft = \"--trigger-item-left\", n.TriggerItemTop = \"--trigger-item-top\", n))(de || {});\nconst Et = te(\"ce-popover-item-html\"), Bt = {\n  root: Et(),\n  hidden: Et(null, \"hidden\")\n};\nclass Ee extends rt {\n  /**\n   * Constructs the instance\n   *\n   * @param params – instance parameters\n   * @param renderParams – popover item render params.\n   * The parameters that are not set by user via popover api but rather depend on technical implementation\n   */\n  constructor(e, t) {\n    var o, i;\n    super(e), this.nodes = {\n      root: d.make(\"div\", Bt.root)\n    }, this.nodes.root.appendChild(e.element), e.name && (this.nodes.root.dataset.itemName = e.name), e.hint !== void 0 && ((o = t == null ? void 0 : t.hint) == null ? void 0 : o.enabled) !== !1 && this.addHint(this.nodes.root, {\n      ...e.hint,\n      position: ((i = t == null ? void 0 : t.hint) == null ? void 0 : i.position) || \"right\"\n    });\n  }\n  /**\n   * Returns popover item root element\n   */\n  getElement() {\n    return this.nodes.root;\n  }\n  /**\n   * Toggles item hidden state\n   *\n   * @param isHidden - true if item should be hidden\n   */\n  toggleHidden(e) {\n    var t;\n    (t = this.nodes.root) == null || t.classList.toggle(Bt.hidden, e);\n  }\n  /**\n   * Returns list of buttons and inputs inside custom content\n   */\n  getControls() {\n    const e = this.nodes.root.querySelectorAll(\n      `button, ${d.allInputsSelector}`\n    );\n    return Array.from(e);\n  }\n}\nclass Vt extends Te {\n  /**\n   * Constructs the instance\n   *\n   * @param params - popover construction params\n   * @param itemsRenderParams - popover item render params.\n   * The parameters that are not set by user via popover api but rather depend on technical implementation\n   */\n  constructor(e, t = {}) {\n    super(), this.params = e, this.itemsRenderParams = t, this.listeners = new Ce(), this.messages = {\n      nothingFound: \"Nothing found\",\n      search: \"Search\"\n    }, this.items = this.buildItems(e.items), e.messages && (this.messages = {\n      ...this.messages,\n      ...e.messages\n    }), this.nodes = {}, this.nodes.popoverContainer = d.make(\"div\", [N.popoverContainer]), this.nodes.nothingFoundMessage = d.make(\"div\", [N.nothingFoundMessage], {\n      textContent: this.messages.nothingFound\n    }), this.nodes.popoverContainer.appendChild(this.nodes.nothingFoundMessage), this.nodes.items = d.make(\"div\", [N.items]), this.items.forEach((o) => {\n      const i = o.getElement();\n      i !== null && this.nodes.items.appendChild(i);\n    }), this.nodes.popoverContainer.appendChild(this.nodes.items), this.listeners.on(this.nodes.popoverContainer, \"click\", (o) => this.handleClick(o)), this.nodes.popover = d.make(\"div\", [\n      N.popover,\n      this.params.class\n    ]), this.nodes.popover.appendChild(this.nodes.popoverContainer);\n  }\n  /**\n   * List of default popover items that are searchable and may have confirmation state\n   */\n  get itemsDefault() {\n    return this.items.filter((e) => e instanceof se);\n  }\n  /**\n   * Returns HTML element corresponding to the popover\n   */\n  getElement() {\n    return this.nodes.popover;\n  }\n  /**\n   * Open popover\n   */\n  show() {\n    this.nodes.popover.classList.add(N.popoverOpened), this.search !== void 0 && this.search.focus();\n  }\n  /**\n   * Closes popover\n   */\n  hide() {\n    this.nodes.popover.classList.remove(N.popoverOpened), this.nodes.popover.classList.remove(N.popoverOpenTop), this.itemsDefault.forEach((e) => e.reset()), this.search !== void 0 && this.search.clear(), this.emit(Z.Closed);\n  }\n  /**\n   * Clears memory\n   */\n  destroy() {\n    var e;\n    this.items.forEach((t) => t.destroy()), this.nodes.popover.remove(), this.listeners.removeAll(), (e = this.search) == null || e.destroy();\n  }\n  /**\n   * Looks for the item by name and imitates click on it\n   *\n   * @param name - name of the item to activate\n   */\n  activateItemByName(e) {\n    const t = this.items.find((o) => o.name === e);\n    this.handleItemClick(t);\n  }\n  /**\n   * Factory method for creating popover items\n   *\n   * @param items - list of items params\n   */\n  buildItems(e) {\n    return e.map((t) => {\n      switch (t.type) {\n        case A.Separator:\n          return new Xt();\n        case A.Html:\n          return new Ee(t, this.itemsRenderParams[A.Html]);\n        default:\n          return new se(t, this.itemsRenderParams[A.Default]);\n      }\n    });\n  }\n  /**\n   * Retrieves popover item that is the target of the specified event\n   *\n   * @param event - event to retrieve popover item from\n   */\n  getTargetItem(e) {\n    return this.items.filter((t) => t instanceof se || t instanceof Ee).find((t) => {\n      const o = t.getElement();\n      return o === null ? !1 : e.composedPath().includes(o);\n    });\n  }\n  /**\n   * Handles popover item click\n   *\n   * @param item - item to handle click of\n   */\n  handleItemClick(e) {\n    if (!(\"isDisabled\" in e && e.isDisabled)) {\n      if (e.hasChildren) {\n        this.showNestedItems(e), \"handleClick\" in e && typeof e.handleClick == \"function\" && e.handleClick();\n        return;\n      }\n      this.itemsDefault.filter((t) => t !== e).forEach((t) => t.reset()), \"handleClick\" in e && typeof e.handleClick == \"function\" && e.handleClick(), this.toggleItemActivenessIfNeeded(e), e.closeOnActivate && (this.hide(), this.emit(Z.ClosedOnActivate));\n    }\n  }\n  /**\n   * Handles clicks inside popover\n   *\n   * @param event - item to handle click of\n   */\n  handleClick(e) {\n    const t = this.getTargetItem(e);\n    t !== void 0 && this.handleItemClick(t);\n  }\n  /**\n   * - Toggles item active state, if clicked popover item has property 'toggle' set to true.\n   *\n   * - Performs radiobutton-like behavior if the item has property 'toggle' set to string key.\n   * (All the other items with the same key get inactive, and the item gets active)\n   *\n   * @param clickedItem - popover item that was clicked\n   */\n  toggleItemActivenessIfNeeded(e) {\n    if (e instanceof se && (e.toggle === !0 && e.toggleActive(), typeof e.toggle == \"string\")) {\n      const t = this.itemsDefault.filter((o) => o.toggle === e.toggle);\n      if (t.length === 1) {\n        e.toggleActive();\n        return;\n      }\n      t.forEach((o) => {\n        o.toggleActive(o === e);\n      });\n    }\n  }\n}\nvar De = /* @__PURE__ */ ((n) => (n.Search = \"search\", n))(De || {});\nconst $e = te(\"cdx-search-field\"), Ye = {\n  wrapper: $e(),\n  icon: $e(\"icon\"),\n  input: $e(\"input\")\n};\nclass _i extends Te {\n  /**\n   * @param options - available config\n   * @param options.items - searchable items list\n   * @param options.placeholder - input placeholder\n   */\n  constructor({ items: e, placeholder: t }) {\n    super(), this.listeners = new Ce(), this.items = e, this.wrapper = d.make(\"div\", Ye.wrapper);\n    const o = d.make(\"div\", Ye.icon, {\n      innerHTML: Si\n    });\n    this.input = d.make(\"input\", Ye.input, {\n      placeholder: t,\n      /**\n       * Used to prevent focusing on the input by Tab key\n       * (Popover in the Toolbar lays below the blocks,\n       * so Tab in the last block will focus this hidden input if this property is not set)\n       */\n      tabIndex: -1\n    }), this.wrapper.appendChild(o), this.wrapper.appendChild(this.input), this.listeners.on(this.input, \"input\", () => {\n      this.searchQuery = this.input.value, this.emit(De.Search, {\n        query: this.searchQuery,\n        items: this.foundItems\n      });\n    });\n  }\n  /**\n   * Returns search field element\n   */\n  getElement() {\n    return this.wrapper;\n  }\n  /**\n   * Sets focus to the input\n   */\n  focus() {\n    this.input.focus();\n  }\n  /**\n   * Clears search query and results\n   */\n  clear() {\n    this.input.value = \"\", this.searchQuery = \"\", this.emit(De.Search, {\n      query: \"\",\n      items: this.foundItems\n    });\n  }\n  /**\n   * Clears memory\n   */\n  destroy() {\n    this.listeners.removeAll();\n  }\n  /**\n   * Returns list of found items for the current search query\n   */\n  get foundItems() {\n    return this.items.filter((e) => this.checkItem(e));\n  }\n  /**\n   * Contains logic for checking whether passed item conforms the search query\n   *\n   * @param item - item to be checked\n   */\n  checkItem(e) {\n    var i, s;\n    const t = ((i = e.title) == null ? void 0 : i.toLowerCase()) || \"\", o = (s = this.searchQuery) == null ? void 0 : s.toLowerCase();\n    return o !== void 0 ? t.includes(o) : !1;\n  }\n}\nvar Ni = Object.defineProperty, Pi = Object.getOwnPropertyDescriptor, Di = (n, e, t, o) => {\n  for (var i = o > 1 ? void 0 : o ? Pi(e, t) : e, s = n.length - 1, r; s >= 0; s--)\n    (r = n[s]) && (i = (o ? r(e, t, i) : r(i)) || i);\n  return o && i && Ni(e, t, i), i;\n};\nconst qt = class Zt extends Vt {\n  /**\n   * Construct the instance\n   *\n   * @param params - popover params\n   * @param itemsRenderParams – popover item render params.\n   * The parameters that are not set by user via popover api but rather depend on technical implementation\n   */\n  constructor(e, t) {\n    super(e, t), this.nestingLevel = 0, this.nestedPopoverTriggerItem = null, this.previouslyHoveredItem = null, this.scopeElement = document.body, this.hide = () => {\n      var o;\n      super.hide(), this.destroyNestedPopoverIfExists(), (o = this.flipper) == null || o.deactivate(), this.previouslyHoveredItem = null;\n    }, this.onFlip = () => {\n      const o = this.itemsDefault.find((i) => i.isFocused);\n      o == null || o.onFocus();\n    }, this.onSearch = (o) => {\n      var l;\n      const i = o.query === \"\", s = o.items.length === 0;\n      this.items.forEach((a) => {\n        let c = !1;\n        a instanceof se ? c = !o.items.includes(a) : (a instanceof Xt || a instanceof Ee) && (c = s || !i), a.toggleHidden(c);\n      }), this.toggleNothingFoundMessage(s);\n      const r = o.query === \"\" ? this.flippableElements : o.items.map((a) => a.getElement());\n      (l = this.flipper) != null && l.isActivated && (this.flipper.deactivate(), this.flipper.activate(r));\n    }, e.nestingLevel !== void 0 && (this.nestingLevel = e.nestingLevel), this.nestingLevel > 0 && this.nodes.popover.classList.add(N.popoverNested), e.scopeElement !== void 0 && (this.scopeElement = e.scopeElement), this.nodes.popoverContainer !== null && this.listeners.on(this.nodes.popoverContainer, \"mouseover\", (o) => this.handleHover(o)), e.searchable && this.addSearch(), e.flippable !== !1 && (this.flipper = new le({\n      items: this.flippableElements,\n      focusedItemClass: L.focused,\n      allowedKeys: [\n        w.TAB,\n        w.UP,\n        w.DOWN,\n        w.ENTER\n      ]\n    }), this.flipper.onFlip(this.onFlip));\n  }\n  /**\n   * Returns true if some item inside popover is focused\n   */\n  hasFocus() {\n    return this.flipper === void 0 ? !1 : this.flipper.hasFocus();\n  }\n  /**\n   * Scroll position inside items container of the popover\n   */\n  get scrollTop() {\n    return this.nodes.items === null ? 0 : this.nodes.items.scrollTop;\n  }\n  /**\n   * Returns visible element offset top\n   */\n  get offsetTop() {\n    return this.nodes.popoverContainer === null ? 0 : this.nodes.popoverContainer.offsetTop;\n  }\n  /**\n   * Open popover\n   */\n  show() {\n    var e;\n    this.nodes.popover.style.setProperty(de.PopoverHeight, this.size.height + \"px\"), this.shouldOpenBottom || this.nodes.popover.classList.add(N.popoverOpenTop), this.shouldOpenRight || this.nodes.popover.classList.add(N.popoverOpenLeft), super.show(), (e = this.flipper) == null || e.activate(this.flippableElements);\n  }\n  /**\n   * Clears memory\n   */\n  destroy() {\n    this.hide(), super.destroy();\n  }\n  /**\n   * Handles displaying nested items for the item.\n   *\n   * @param item – item to show nested popover for\n   */\n  showNestedItems(e) {\n    this.nestedPopover !== null && this.nestedPopover !== void 0 || (this.nestedPopoverTriggerItem = e, this.showNestedPopoverForItem(e));\n  }\n  /**\n   * Handles hover events inside popover items container\n   *\n   * @param event - hover event data\n   */\n  handleHover(e) {\n    const t = this.getTargetItem(e);\n    t !== void 0 && this.previouslyHoveredItem !== t && (this.destroyNestedPopoverIfExists(), this.previouslyHoveredItem = t, t.hasChildren && this.showNestedPopoverForItem(t));\n  }\n  /**\n   * Sets CSS variable with position of item near which nested popover should be displayed.\n   * Is used for correct positioning of the nested popover\n   *\n   * @param nestedPopoverEl - nested popover element\n   * @param item – item near which nested popover should be displayed\n   */\n  setTriggerItemPosition(e, t) {\n    const o = t.getElement(), i = (o ? o.offsetTop : 0) - this.scrollTop, s = this.offsetTop + i;\n    e.style.setProperty(de.TriggerItemTop, s + \"px\");\n  }\n  /**\n   * Destroys existing nested popover\n   */\n  destroyNestedPopoverIfExists() {\n    var e, t;\n    this.nestedPopover === void 0 || this.nestedPopover === null || (this.nestedPopover.off(Z.ClosedOnActivate, this.hide), this.nestedPopover.hide(), this.nestedPopover.destroy(), this.nestedPopover.getElement().remove(), this.nestedPopover = null, (e = this.flipper) == null || e.activate(this.flippableElements), (t = this.nestedPopoverTriggerItem) == null || t.onChildrenClose());\n  }\n  /**\n   * Creates and displays nested popover for specified item.\n   * Is used only on desktop\n   *\n   * @param item - item to display nested popover by\n   */\n  showNestedPopoverForItem(e) {\n    var o;\n    this.nestedPopover = new Zt({\n      searchable: e.isChildrenSearchable,\n      items: e.children,\n      nestingLevel: this.nestingLevel + 1,\n      flippable: e.isChildrenFlippable,\n      messages: this.messages\n    }), e.onChildrenOpen(), this.nestedPopover.on(Z.ClosedOnActivate, this.hide);\n    const t = this.nestedPopover.getElement();\n    return this.nodes.popover.appendChild(t), this.setTriggerItemPosition(t, e), t.style.setProperty(de.NestingLevel, this.nestedPopover.nestingLevel.toString()), this.nestedPopover.show(), (o = this.flipper) == null || o.deactivate(), this.nestedPopover;\n  }\n  /**\n   * Checks if popover should be opened bottom.\n   * It should happen when there is enough space below or not enough space above\n   */\n  get shouldOpenBottom() {\n    if (this.nodes.popover === void 0 || this.nodes.popover === null)\n      return !1;\n    const e = this.nodes.popoverContainer.getBoundingClientRect(), t = this.scopeElement.getBoundingClientRect(), o = this.size.height, i = e.top + o, s = e.top - o, r = Math.min(window.innerHeight, t.bottom);\n    return s < t.top || i <= r;\n  }\n  /**\n   * Checks if popover should be opened left.\n   * It should happen when there is enough space in the right or not enough space in the left\n   */\n  get shouldOpenRight() {\n    if (this.nodes.popover === void 0 || this.nodes.popover === null)\n      return !1;\n    const e = this.nodes.popover.getBoundingClientRect(), t = this.scopeElement.getBoundingClientRect(), o = this.size.width, i = e.right + o, s = e.left - o, r = Math.min(window.innerWidth, t.right);\n    return s < t.left || i <= r;\n  }\n  get size() {\n    var i;\n    const e = {\n      height: 0,\n      width: 0\n    };\n    if (this.nodes.popover === null)\n      return e;\n    const t = this.nodes.popover.cloneNode(!0);\n    t.style.visibility = \"hidden\", t.style.position = \"absolute\", t.style.top = \"-1000px\", t.classList.add(N.popoverOpened), (i = t.querySelector(\".\" + N.popoverNested)) == null || i.remove(), document.body.appendChild(t);\n    const o = t.querySelector(\".\" + N.popoverContainer);\n    return e.height = o.offsetHeight, e.width = o.offsetWidth, t.remove(), e;\n  }\n  /**\n   * Returns list of elements available for keyboard navigation.\n   */\n  get flippableElements() {\n    return this.items.map((t) => {\n      if (t instanceof se)\n        return t.getElement();\n      if (t instanceof Ee)\n        return t.getControls();\n    }).flat().filter((t) => t != null);\n  }\n  /**\n   * Adds search to the popover\n   */\n  addSearch() {\n    this.search = new _i({\n      items: this.itemsDefault,\n      placeholder: this.messages.search\n    }), this.search.on(De.Search, this.onSearch);\n    const e = this.search.getElement();\n    e.classList.add(N.search), this.nodes.popoverContainer.insertBefore(e, this.nodes.popoverContainer.firstChild);\n  }\n  /**\n   * Toggles nothing found message visibility\n   *\n   * @param isDisplayed - true if the message should be displayed\n   */\n  toggleNothingFoundMessage(e) {\n    this.nodes.nothingFoundMessage.classList.toggle(N.nothingFoundMessageDisplayed, e);\n  }\n};\nDi([\n  ue\n], qt.prototype, \"size\", 1);\nlet lt = qt;\nclass Ri extends lt {\n  /**\n   * Constructs the instance\n   *\n   * @param params - instance parameters\n   */\n  constructor(e) {\n    const t = !pe();\n    super(\n      {\n        ...e,\n        class: N.popoverInline\n      },\n      {\n        [A.Default]: {\n          /**\n           * We use button instead of div here to fix bug associated with focus loss (which leads to selection change) on click in safari\n           *\n           * @todo figure out better way to solve the issue\n           */\n          wrapperTag: \"button\",\n          hint: {\n            position: \"top\",\n            alignment: \"center\",\n            enabled: t\n          }\n        },\n        [A.Html]: {\n          hint: {\n            position: \"top\",\n            alignment: \"center\",\n            enabled: t\n          }\n        }\n      }\n    ), this.items.forEach((o) => {\n      !(o instanceof se) && !(o instanceof Ee) || o.hasChildren && o.isChildrenOpen && this.showNestedItems(o);\n    });\n  }\n  /**\n   * Returns visible element offset top\n   */\n  get offsetLeft() {\n    return this.nodes.popoverContainer === null ? 0 : this.nodes.popoverContainer.offsetLeft;\n  }\n  /**\n   * Open popover\n   */\n  show() {\n    this.nestingLevel === 0 && this.nodes.popover.style.setProperty(\n      de.InlinePopoverWidth,\n      this.size.width + \"px\"\n    ), super.show();\n  }\n  /**\n   * Disable hover event handling.\n   * Overrides parent's class behavior\n   */\n  handleHover() {\n  }\n  /**\n   * Sets CSS variable with position of item near which nested popover should be displayed.\n   * Is used to position nested popover right below clicked item\n   *\n   * @param nestedPopoverEl - nested popover element\n   * @param item – item near which nested popover should be displayed\n   */\n  setTriggerItemPosition(e, t) {\n    const o = t.getElement(), i = o ? o.offsetLeft : 0, s = this.offsetLeft + i;\n    e.style.setProperty(\n      de.TriggerItemLeft,\n      s + \"px\"\n    );\n  }\n  /**\n   * Handles displaying nested items for the item.\n   * Overriding in order to add toggling behaviour\n   *\n   * @param item – item to toggle nested popover for\n   */\n  showNestedItems(e) {\n    if (this.nestedPopoverTriggerItem === e) {\n      this.destroyNestedPopoverIfExists(), this.nestedPopoverTriggerItem = null;\n      return;\n    }\n    super.showNestedItems(e);\n  }\n  /**\n   * Creates and displays nested popover for specified item.\n   * Is used only on desktop\n   *\n   * @param item - item to display nested popover by\n   */\n  showNestedPopoverForItem(e) {\n    const t = super.showNestedPopoverForItem(e);\n    return t.getElement().classList.add(N.getPopoverNestedClass(t.nestingLevel)), t;\n  }\n  /**\n   * Overrides default item click handling.\n   * Helps to close nested popover once other item is clicked.\n   *\n   * @param item - clicked item\n   */\n  handleItemClick(e) {\n    var t;\n    e !== this.nestedPopoverTriggerItem && ((t = this.nestedPopoverTriggerItem) == null || t.handleClick(), super.destroyNestedPopoverIfExists()), super.handleItemClick(e);\n  }\n}\nconst Gt = class we {\n  constructor() {\n    this.scrollPosition = null;\n  }\n  /**\n   * Locks body element scroll\n   */\n  lock() {\n    Ge ? this.lockHard() : document.body.classList.add(we.CSS.scrollLocked);\n  }\n  /**\n   * Unlocks body element scroll\n   */\n  unlock() {\n    Ge ? this.unlockHard() : document.body.classList.remove(we.CSS.scrollLocked);\n  }\n  /**\n   * Locks scroll in a hard way (via setting fixed position to body element)\n   */\n  lockHard() {\n    this.scrollPosition = window.pageYOffset, document.documentElement.style.setProperty(\n      \"--window-scroll-offset\",\n      `${this.scrollPosition}px`\n    ), document.body.classList.add(we.CSS.scrollLockedHard);\n  }\n  /**\n   * Unlocks hard scroll lock\n   */\n  unlockHard() {\n    document.body.classList.remove(we.CSS.scrollLockedHard), this.scrollPosition !== null && window.scrollTo(0, this.scrollPosition), this.scrollPosition = null;\n  }\n};\nGt.CSS = {\n  scrollLocked: \"ce-scroll-locked\",\n  scrollLockedHard: \"ce-scroll-locked--hard\"\n};\nlet Fi = Gt;\nconst We = te(\"ce-popover-header\"), Ke = {\n  root: We(),\n  text: We(\"text\"),\n  backButton: We(\"back-button\")\n};\nclass Hi {\n  /**\n   * Constructs the instance\n   *\n   * @param params - popover header params\n   */\n  constructor({ text: e, onBackButtonClick: t }) {\n    this.listeners = new Ce(), this.text = e, this.onBackButtonClick = t, this.nodes = {\n      root: d.make(\"div\", [Ke.root]),\n      backButton: d.make(\"button\", [Ke.backButton]),\n      text: d.make(\"div\", [Ke.text])\n    }, this.nodes.backButton.innerHTML = vi, this.nodes.root.appendChild(this.nodes.backButton), this.listeners.on(this.nodes.backButton, \"click\", this.onBackButtonClick), this.nodes.text.innerText = this.text, this.nodes.root.appendChild(this.nodes.text);\n  }\n  /**\n   * Returns popover header root html element\n   */\n  getElement() {\n    return this.nodes.root;\n  }\n  /**\n   * Destroys the instance\n   */\n  destroy() {\n    this.nodes.root.remove(), this.listeners.destroy();\n  }\n}\nclass zi {\n  constructor() {\n    this.history = [];\n  }\n  /**\n   * Push new popover state\n   *\n   * @param state - new state\n   */\n  push(e) {\n    this.history.push(e);\n  }\n  /**\n   * Pop last popover state\n   */\n  pop() {\n    return this.history.pop();\n  }\n  /**\n   * Title retrieved from the current state\n   */\n  get currentTitle() {\n    return this.history.length === 0 ? \"\" : this.history[this.history.length - 1].title;\n  }\n  /**\n   * Items list retrieved from the current state\n   */\n  get currentItems() {\n    return this.history.length === 0 ? [] : this.history[this.history.length - 1].items;\n  }\n  /**\n   * Returns history to initial popover state\n   */\n  reset() {\n    for (; this.history.length > 1; )\n      this.pop();\n  }\n}\nclass Jt extends Vt {\n  /**\n   * Construct the instance\n   *\n   * @param params - popover params\n   */\n  constructor(e) {\n    super(e, {\n      [A.Default]: {\n        hint: {\n          enabled: !1\n        }\n      },\n      [A.Html]: {\n        hint: {\n          enabled: !1\n        }\n      }\n    }), this.scrollLocker = new Fi(), this.history = new zi(), this.isHidden = !0, this.nodes.overlay = d.make(\"div\", [N.overlay, N.overlayHidden]), this.nodes.popover.insertBefore(this.nodes.overlay, this.nodes.popover.firstChild), this.listeners.on(this.nodes.overlay, \"click\", () => {\n      this.hide();\n    }), this.history.push({ items: e.items });\n  }\n  /**\n   * Open popover\n   */\n  show() {\n    this.nodes.overlay.classList.remove(N.overlayHidden), super.show(), this.scrollLocker.lock(), this.isHidden = !1;\n  }\n  /**\n   * Closes popover\n   */\n  hide() {\n    this.isHidden || (super.hide(), this.nodes.overlay.classList.add(N.overlayHidden), this.scrollLocker.unlock(), this.history.reset(), this.isHidden = !0);\n  }\n  /**\n   * Clears memory\n   */\n  destroy() {\n    super.destroy(), this.scrollLocker.unlock();\n  }\n  /**\n   * Handles displaying nested items for the item\n   *\n   * @param item – item to show nested popover for\n   */\n  showNestedItems(e) {\n    this.updateItemsAndHeader(e.children, e.title), this.history.push({\n      title: e.title,\n      items: e.children\n    });\n  }\n  /**\n   * Removes rendered popover items and header and displays new ones\n   *\n   * @param items - new popover items\n   * @param title - new popover header text\n   */\n  updateItemsAndHeader(e, t) {\n    if (this.header !== null && this.header !== void 0 && (this.header.destroy(), this.header = null), t !== void 0) {\n      this.header = new Hi({\n        text: t,\n        onBackButtonClick: () => {\n          this.history.pop(), this.updateItemsAndHeader(this.history.currentItems, this.history.currentTitle);\n        }\n      });\n      const o = this.header.getElement();\n      o !== null && this.nodes.popoverContainer.insertBefore(o, this.nodes.popoverContainer.firstChild);\n    }\n    this.items.forEach((o) => {\n      var i;\n      return (i = o.getElement()) == null ? void 0 : i.remove();\n    }), this.items = this.buildItems(e), this.items.forEach((o) => {\n      var s;\n      const i = o.getElement();\n      i !== null && ((s = this.nodes.items) == null || s.appendChild(i));\n    });\n  }\n}\nclass Ui extends y {\n  constructor() {\n    super(...arguments), this.opened = !1, this.selection = new b(), this.popover = null, this.close = () => {\n      this.opened && (this.opened = !1, b.isAtEditor || this.selection.restore(), this.selection.clearSaved(), !this.Editor.CrossBlockSelection.isCrossBlockSelectionStarted && this.Editor.BlockManager.currentBlock && this.Editor.BlockSelection.unselectBlock(this.Editor.BlockManager.currentBlock), this.eventsDispatcher.emit(this.events.closed), this.popover && (this.popover.off(Z.Closed, this.onPopoverClose), this.popover.destroy(), this.popover.getElement().remove(), this.popover = null));\n    }, this.onPopoverClose = () => {\n      this.close();\n    };\n  }\n  /**\n   * Module Events\n   */\n  get events() {\n    return {\n      opened: \"block-settings-opened\",\n      closed: \"block-settings-closed\"\n    };\n  }\n  /**\n   * Block Settings CSS\n   */\n  get CSS() {\n    return {\n      settings: \"ce-settings\"\n    };\n  }\n  /**\n   * Getter for inner popover's flipper instance\n   *\n   * @todo remove once BlockSettings becomes standalone non-module class\n   */\n  get flipper() {\n    var e;\n    if (this.popover !== null)\n      return \"flipper\" in this.popover ? (e = this.popover) == null ? void 0 : e.flipper : void 0;\n  }\n  /**\n   * Panel with block settings with 2 sections:\n   *  - Tool's Settings\n   *  - Default Settings [Move, Remove, etc]\n   */\n  make() {\n    this.nodes.wrapper = d.make(\"div\", [this.CSS.settings]), this.eventsDispatcher.on(ye, this.close);\n  }\n  /**\n   * Destroys module\n   */\n  destroy() {\n    this.removeAllNodes(), this.listeners.destroy(), this.eventsDispatcher.off(ye, this.close);\n  }\n  /**\n   * Open Block Settings pane\n   *\n   * @param targetBlock - near which Block we should open BlockSettings\n   */\n  async open(e = this.Editor.BlockManager.currentBlock) {\n    var s;\n    this.opened = !0, this.selection.save(), this.Editor.BlockSelection.selectBlock(e), this.Editor.BlockSelection.clearCache();\n    const { toolTunes: t, commonTunes: o } = e.getTunes();\n    this.eventsDispatcher.emit(this.events.opened);\n    const i = pe() ? Jt : lt;\n    this.popover = new i({\n      searchable: !0,\n      items: await this.getTunesItems(e, o, t),\n      scopeElement: this.Editor.API.methods.ui.nodes.redactor,\n      messages: {\n        nothingFound: z.ui(K.ui.popover, \"Nothing found\"),\n        search: z.ui(K.ui.popover, \"Filter\")\n      }\n    }), this.popover.on(Z.Closed, this.onPopoverClose), (s = this.nodes.wrapper) == null || s.append(this.popover.getElement()), this.popover.show();\n  }\n  /**\n   * Returns root block settings element\n   */\n  getElement() {\n    return this.nodes.wrapper;\n  }\n  /**\n   * Returns list of items to be displayed in block tunes menu.\n   * Merges tool specific tunes, conversion menu and common tunes in one list in predefined order\n   *\n   * @param currentBlock –  block we are about to open block tunes for\n   * @param commonTunes – common tunes\n   * @param toolTunes - tool specific tunes\n   */\n  async getTunesItems(e, t, o) {\n    const i = [];\n    o !== void 0 && o.length > 0 && (i.push(...o), i.push({\n      type: A.Separator\n    }));\n    const s = Array.from(this.Editor.Tools.blockTools.values()), l = (await zt(e, s)).reduce((a, c) => (c.toolbox.forEach((u) => {\n      a.push({\n        icon: u.icon,\n        title: z.t(K.toolNames, u.title),\n        name: c.name,\n        closeOnActivate: !0,\n        onActivate: async () => {\n          const { BlockManager: h, Caret: p, Toolbar: g } = this.Editor, f = await h.convert(e, c.name, u.data);\n          g.close(), p.setToBlock(f, p.positions.END);\n        }\n      });\n    }), a), []);\n    return l.length > 0 && (i.push({\n      icon: Kt,\n      name: \"convert-to\",\n      title: z.ui(K.ui.popover, \"Convert to\"),\n      children: {\n        searchable: !0,\n        items: l\n      }\n    }), i.push({\n      type: A.Separator\n    })), i.push(...t), i.map((a) => this.resolveTuneAliases(a));\n  }\n  /**\n   * Resolves aliases in tunes menu items\n   *\n   * @param item - item with resolved aliases\n   */\n  resolveTuneAliases(e) {\n    if (e.type === A.Separator || e.type === A.Html)\n      return e;\n    const t = mi(e, { label: \"title\" });\n    return e.confirmation && (t.confirmation = this.resolveTuneAliases(e.confirmation)), t;\n  }\n}\nvar Qt = { exports: {} };\n/*!\n * Library for handling keyboard shortcuts\n * @copyright CodeX (https://codex.so)\n * @license MIT\n * @author CodeX (https://codex.so)\n * @version 1.2.0\n */\n(function(n, e) {\n  (function(t, o) {\n    n.exports = o();\n  })(window, function() {\n    return function(t) {\n      var o = {};\n      function i(s) {\n        if (o[s])\n          return o[s].exports;\n        var r = o[s] = { i: s, l: !1, exports: {} };\n        return t[s].call(r.exports, r, r.exports, i), r.l = !0, r.exports;\n      }\n      return i.m = t, i.c = o, i.d = function(s, r, l) {\n        i.o(s, r) || Object.defineProperty(s, r, { enumerable: !0, get: l });\n      }, i.r = function(s) {\n        typeof Symbol < \"u\" && Symbol.toStringTag && Object.defineProperty(s, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(s, \"__esModule\", { value: !0 });\n      }, i.t = function(s, r) {\n        if (1 & r && (s = i(s)), 8 & r || 4 & r && typeof s == \"object\" && s && s.__esModule)\n          return s;\n        var l = /* @__PURE__ */ Object.create(null);\n        if (i.r(l), Object.defineProperty(l, \"default\", { enumerable: !0, value: s }), 2 & r && typeof s != \"string\")\n          for (var a in s)\n            i.d(l, a, (function(c) {\n              return s[c];\n            }).bind(null, a));\n        return l;\n      }, i.n = function(s) {\n        var r = s && s.__esModule ? function() {\n          return s.default;\n        } : function() {\n          return s;\n        };\n        return i.d(r, \"a\", r), r;\n      }, i.o = function(s, r) {\n        return Object.prototype.hasOwnProperty.call(s, r);\n      }, i.p = \"\", i(i.s = 0);\n    }([function(t, o, i) {\n      function s(a, c) {\n        for (var u = 0; u < c.length; u++) {\n          var h = c[u];\n          h.enumerable = h.enumerable || !1, h.configurable = !0, \"value\" in h && (h.writable = !0), Object.defineProperty(a, h.key, h);\n        }\n      }\n      function r(a, c, u) {\n        return c && s(a.prototype, c), u && s(a, u), a;\n      }\n      i.r(o);\n      var l = function() {\n        function a(c) {\n          var u = this;\n          (function(h, p) {\n            if (!(h instanceof p))\n              throw new TypeError(\"Cannot call a class as a function\");\n          })(this, a), this.commands = {}, this.keys = {}, this.name = c.name, this.parseShortcutName(c.name), this.element = c.on, this.callback = c.callback, this.executeShortcut = function(h) {\n            u.execute(h);\n          }, this.element.addEventListener(\"keydown\", this.executeShortcut, !1);\n        }\n        return r(a, null, [{ key: \"supportedCommands\", get: function() {\n          return { SHIFT: [\"SHIFT\"], CMD: [\"CMD\", \"CONTROL\", \"COMMAND\", \"WINDOWS\", \"CTRL\"], ALT: [\"ALT\", \"OPTION\"] };\n        } }, { key: \"keyCodes\", get: function() {\n          return { 0: 48, 1: 49, 2: 50, 3: 51, 4: 52, 5: 53, 6: 54, 7: 55, 8: 56, 9: 57, A: 65, B: 66, C: 67, D: 68, E: 69, F: 70, G: 71, H: 72, I: 73, J: 74, K: 75, L: 76, M: 77, N: 78, O: 79, P: 80, Q: 81, R: 82, S: 83, T: 84, U: 85, V: 86, W: 87, X: 88, Y: 89, Z: 90, BACKSPACE: 8, ENTER: 13, ESCAPE: 27, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, INSERT: 45, DELETE: 46, \".\": 190 };\n        } }]), r(a, [{ key: \"parseShortcutName\", value: function(c) {\n          c = c.split(\"+\");\n          for (var u = 0; u < c.length; u++) {\n            c[u] = c[u].toUpperCase();\n            var h = !1;\n            for (var p in a.supportedCommands)\n              if (a.supportedCommands[p].includes(c[u])) {\n                h = this.commands[p] = !0;\n                break;\n              }\n            h || (this.keys[c[u]] = !0);\n          }\n          for (var g in a.supportedCommands)\n            this.commands[g] || (this.commands[g] = !1);\n        } }, { key: \"execute\", value: function(c) {\n          var u, h = { CMD: c.ctrlKey || c.metaKey, SHIFT: c.shiftKey, ALT: c.altKey }, p = !0;\n          for (u in this.commands)\n            this.commands[u] !== h[u] && (p = !1);\n          var g, f = !0;\n          for (g in this.keys)\n            f = f && c.keyCode === a.keyCodes[g];\n          p && f && this.callback(c);\n        } }, { key: \"remove\", value: function() {\n          this.element.removeEventListener(\"keydown\", this.executeShortcut);\n        } }]), a;\n      }();\n      o.default = l;\n    }]).default;\n  });\n})(Qt);\nvar ji = Qt.exports;\nconst $i = /* @__PURE__ */ Fe(ji);\nclass Yi {\n  constructor() {\n    this.registeredShortcuts = /* @__PURE__ */ new Map();\n  }\n  /**\n   * Register shortcut\n   *\n   * @param shortcut - shortcut options\n   */\n  add(e) {\n    if (this.findShortcut(e.on, e.name))\n      throw Error(\n        `Shortcut ${e.name} is already registered for ${e.on}. Please remove it before add a new handler.`\n      );\n    const o = new $i({\n      name: e.name,\n      on: e.on,\n      callback: e.handler\n    }), i = this.registeredShortcuts.get(e.on) || [];\n    this.registeredShortcuts.set(e.on, [...i, o]);\n  }\n  /**\n   * Remove shortcut\n   *\n   * @param element - Element shortcut is set for\n   * @param name - shortcut name\n   */\n  remove(e, t) {\n    const o = this.findShortcut(e, t);\n    if (!o)\n      return;\n    o.remove();\n    const i = this.registeredShortcuts.get(e);\n    this.registeredShortcuts.set(e, i.filter((s) => s !== o));\n  }\n  /**\n   * Get Shortcut instance if exist\n   *\n   * @param element - Element shorcut is set for\n   * @param shortcut - shortcut name\n   * @returns {number} index - shortcut index if exist\n   */\n  findShortcut(e, t) {\n    return (this.registeredShortcuts.get(e) || []).find(({ name: i }) => i === t);\n  }\n}\nconst he = new Yi();\nvar Wi = Object.defineProperty, Ki = Object.getOwnPropertyDescriptor, eo = (n, e, t, o) => {\n  for (var i = o > 1 ? void 0 : o ? Ki(e, t) : e, s = n.length - 1, r; s >= 0; s--)\n    (r = n[s]) && (i = (o ? r(e, t, i) : r(i)) || i);\n  return o && i && Wi(e, t, i), i;\n}, Se = /* @__PURE__ */ ((n) => (n.Opened = \"toolbox-opened\", n.Closed = \"toolbox-closed\", n.BlockAdded = \"toolbox-block-added\", n))(Se || {});\nconst at = class to extends Te {\n  /**\n   * Toolbox constructor\n   *\n   * @param options - available parameters\n   * @param options.api - Editor API methods\n   * @param options.tools - Tools available to check whether some of them should be displayed at the Toolbox or not\n   */\n  constructor({ api: e, tools: t, i18nLabels: o }) {\n    super(), this.opened = !1, this.listeners = new Ce(), this.popover = null, this.handleMobileLayoutToggle = () => {\n      this.destroyPopover(), this.initPopover();\n    }, this.onPopoverClose = () => {\n      this.opened = !1, this.emit(\n        \"toolbox-closed\"\n        /* Closed */\n      );\n    }, this.api = e, this.tools = t, this.i18nLabels = o, this.enableShortcuts(), this.nodes = {\n      toolbox: d.make(\"div\", to.CSS.toolbox)\n    }, this.initPopover(), this.api.events.on(ye, this.handleMobileLayoutToggle);\n  }\n  /**\n   * Returns True if Toolbox is Empty and nothing to show\n   *\n   * @returns {boolean}\n   */\n  get isEmpty() {\n    return this.toolsToBeDisplayed.length === 0;\n  }\n  /**\n   * CSS styles\n   */\n  static get CSS() {\n    return {\n      toolbox: \"ce-toolbox\"\n    };\n  }\n  /**\n   * Returns root block settings element\n   */\n  getElement() {\n    return this.nodes.toolbox;\n  }\n  /**\n   * Returns true if the Toolbox has the Flipper activated and the Flipper has selected button\n   */\n  hasFocus() {\n    if (this.popover !== null)\n      return \"hasFocus\" in this.popover ? this.popover.hasFocus() : void 0;\n  }\n  /**\n   * Destroy Module\n   */\n  destroy() {\n    var e;\n    super.destroy(), this.nodes && this.nodes.toolbox && this.nodes.toolbox.remove(), this.removeAllShortcuts(), (e = this.popover) == null || e.off(Z.Closed, this.onPopoverClose), this.listeners.destroy(), this.api.events.off(ye, this.handleMobileLayoutToggle);\n  }\n  /**\n   * Toolbox Tool's button click handler\n   *\n   * @param toolName - tool type to be activated\n   * @param blockDataOverrides - Block data predefined by the activated Toolbox item\n   */\n  toolButtonActivated(e, t) {\n    this.insertNewBlock(e, t);\n  }\n  /**\n   * Open Toolbox with Tools\n   */\n  open() {\n    var e;\n    this.isEmpty || ((e = this.popover) == null || e.show(), this.opened = !0, this.emit(\n      \"toolbox-opened\"\n      /* Opened */\n    ));\n  }\n  /**\n   * Close Toolbox\n   */\n  close() {\n    var e;\n    (e = this.popover) == null || e.hide(), this.opened = !1, this.emit(\n      \"toolbox-closed\"\n      /* Closed */\n    );\n  }\n  /**\n   * Close Toolbox\n   */\n  toggle() {\n    this.opened ? this.close() : this.open();\n  }\n  /**\n   * Creates toolbox popover and appends it inside wrapper element\n   */\n  initPopover() {\n    var t;\n    const e = pe() ? Jt : lt;\n    this.popover = new e({\n      scopeElement: this.api.ui.nodes.redactor,\n      searchable: !0,\n      messages: {\n        nothingFound: this.i18nLabels.nothingFound,\n        search: this.i18nLabels.filter\n      },\n      items: this.toolboxItemsToBeDisplayed\n    }), this.popover.on(Z.Closed, this.onPopoverClose), (t = this.nodes.toolbox) == null || t.append(this.popover.getElement());\n  }\n  /**\n   * Destroys popover instance and removes it from DOM\n   */\n  destroyPopover() {\n    this.popover !== null && (this.popover.hide(), this.popover.off(Z.Closed, this.onPopoverClose), this.popover.destroy(), this.popover = null), this.nodes.toolbox !== null && (this.nodes.toolbox.innerHTML = \"\");\n  }\n  get toolsToBeDisplayed() {\n    const e = [];\n    return this.tools.forEach((t) => {\n      t.toolbox && e.push(t);\n    }), e;\n  }\n  get toolboxItemsToBeDisplayed() {\n    const e = (t, o) => ({\n      icon: t.icon,\n      title: z.t(K.toolNames, t.title || Le(o.name)),\n      name: o.name,\n      onActivate: () => {\n        this.toolButtonActivated(o.name, t.data);\n      },\n      secondaryLabel: o.shortcut ? tt(o.shortcut) : \"\"\n    });\n    return this.toolsToBeDisplayed.reduce((t, o) => (Array.isArray(o.toolbox) ? o.toolbox.forEach((i) => {\n      t.push(e(i, o));\n    }) : o.toolbox !== void 0 && t.push(e(o.toolbox, o)), t), []);\n  }\n  /**\n   * Iterate all tools and enable theirs shortcuts if specified\n   */\n  enableShortcuts() {\n    this.toolsToBeDisplayed.forEach((e) => {\n      const t = e.shortcut;\n      t && this.enableShortcutForTool(e.name, t);\n    });\n  }\n  /**\n   * Enable shortcut Block Tool implemented shortcut\n   *\n   * @param {string} toolName - Tool name\n   * @param {string} shortcut - shortcut according to the ShortcutData Module format\n   */\n  enableShortcutForTool(e, t) {\n    he.add({\n      name: t,\n      on: this.api.ui.nodes.redactor,\n      handler: async (o) => {\n        o.preventDefault();\n        const i = this.api.blocks.getCurrentBlockIndex(), s = this.api.blocks.getBlockByIndex(i);\n        if (s)\n          try {\n            const r = await this.api.blocks.convert(s.id, e);\n            this.api.caret.setToBlock(r, \"end\");\n            return;\n          } catch {\n          }\n        this.insertNewBlock(e);\n      }\n    });\n  }\n  /**\n   * Removes all added shortcuts\n   * Fired when the Read-Only mode is activated\n   */\n  removeAllShortcuts() {\n    this.toolsToBeDisplayed.forEach((e) => {\n      const t = e.shortcut;\n      t && he.remove(this.api.ui.nodes.redactor, t);\n    });\n  }\n  /**\n   * Inserts new block\n   * Can be called when button clicked on Toolbox or by ShortcutData\n   *\n   * @param {string} toolName - Tool name\n   * @param blockDataOverrides - predefined Block data\n   */\n  async insertNewBlock(e, t) {\n    const o = this.api.blocks.getCurrentBlockIndex(), i = this.api.blocks.getBlockByIndex(o);\n    if (!i)\n      return;\n    const s = i.isEmpty ? o : o + 1;\n    let r;\n    if (t) {\n      const a = await this.api.blocks.composeBlockData(e);\n      r = Object.assign(a, t);\n    }\n    const l = this.api.blocks.insert(\n      e,\n      r,\n      void 0,\n      s,\n      void 0,\n      i.isEmpty\n    );\n    l.call(J.APPEND_CALLBACK), this.api.caret.setToBlock(s), this.emit(\"toolbox-block-added\", {\n      block: l\n    }), this.api.toolbar.close();\n  }\n};\neo([\n  ue\n], at.prototype, \"toolsToBeDisplayed\", 1);\neo([\n  ue\n], at.prototype, \"toolboxItemsToBeDisplayed\", 1);\nlet Xi = at;\nconst oo = \"block hovered\";\nasync function Vi(n, e) {\n  const t = navigator.keyboard;\n  if (!t)\n    return e;\n  try {\n    return (await t.getLayoutMap()).get(n) || e;\n  } catch (o) {\n    return console.error(o), e;\n  }\n}\nclass qi extends y {\n  /**\n   * @class\n   * @param moduleConfiguration - Module Configuration\n   * @param moduleConfiguration.config - Editor's config\n   * @param moduleConfiguration.eventsDispatcher - Editor's event dispatcher\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    super({\n      config: e,\n      eventsDispatcher: t\n    }), this.toolboxInstance = null;\n  }\n  /**\n   * CSS styles\n   *\n   * @returns {object}\n   */\n  get CSS() {\n    return {\n      toolbar: \"ce-toolbar\",\n      content: \"ce-toolbar__content\",\n      actions: \"ce-toolbar__actions\",\n      actionsOpened: \"ce-toolbar__actions--opened\",\n      toolbarOpened: \"ce-toolbar--opened\",\n      openedToolboxHolderModifier: \"codex-editor--toolbox-opened\",\n      plusButton: \"ce-toolbar__plus\",\n      plusButtonShortcut: \"ce-toolbar__plus-shortcut\",\n      settingsToggler: \"ce-toolbar__settings-btn\",\n      settingsTogglerHidden: \"ce-toolbar__settings-btn--hidden\"\n    };\n  }\n  /**\n   * Returns the Toolbar opening state\n   *\n   * @returns {boolean}\n   */\n  get opened() {\n    return this.nodes.wrapper.classList.contains(this.CSS.toolbarOpened);\n  }\n  /**\n   * Public interface for accessing the Toolbox\n   */\n  get toolbox() {\n    var e;\n    return {\n      opened: (e = this.toolboxInstance) == null ? void 0 : e.opened,\n      close: () => {\n        var t;\n        (t = this.toolboxInstance) == null || t.close();\n      },\n      open: () => {\n        if (this.toolboxInstance === null) {\n          I(\"toolbox.open() called before initialization is finished\", \"warn\");\n          return;\n        }\n        this.Editor.BlockManager.currentBlock = this.hoveredBlock, this.toolboxInstance.open();\n      },\n      toggle: () => {\n        if (this.toolboxInstance === null) {\n          I(\"toolbox.toggle() called before initialization is finished\", \"warn\");\n          return;\n        }\n        this.toolboxInstance.toggle();\n      },\n      hasFocus: () => {\n        var t;\n        return (t = this.toolboxInstance) == null ? void 0 : t.hasFocus();\n      }\n    };\n  }\n  /**\n   * Block actions appearance manipulations\n   */\n  get blockActions() {\n    return {\n      hide: () => {\n        this.nodes.actions.classList.remove(this.CSS.actionsOpened);\n      },\n      show: () => {\n        this.nodes.actions.classList.add(this.CSS.actionsOpened);\n      }\n    };\n  }\n  /**\n   * Methods for working with Block Tunes toggler\n   */\n  get blockTunesToggler() {\n    return {\n      hide: () => this.nodes.settingsToggler.classList.add(this.CSS.settingsTogglerHidden),\n      show: () => this.nodes.settingsToggler.classList.remove(this.CSS.settingsTogglerHidden)\n    };\n  }\n  /**\n   * Toggles read-only mode\n   *\n   * @param {boolean} readOnlyEnabled - read-only mode\n   */\n  toggleReadOnly(e) {\n    e ? (this.destroy(), this.Editor.BlockSettings.destroy(), this.disableModuleBindings()) : window.requestIdleCallback(() => {\n      this.drawUI(), this.enableModuleBindings();\n    }, { timeout: 2e3 });\n  }\n  /**\n   * Move Toolbar to the passed (or current) Block\n   *\n   * @param block - block to move Toolbar near it\n   */\n  moveAndOpen(e = this.Editor.BlockManager.currentBlock) {\n    if (this.toolboxInstance === null) {\n      I(\"Can't open Toolbar since Editor initialization is not finished yet\", \"warn\");\n      return;\n    }\n    if (this.toolboxInstance.opened && this.toolboxInstance.close(), this.Editor.BlockSettings.opened && this.Editor.BlockSettings.close(), !e)\n      return;\n    this.hoveredBlock = e;\n    const t = e.holder, { isMobile: o } = this.Editor.UI;\n    let i;\n    const s = 20, r = e.firstInput, l = t.getBoundingClientRect(), a = r !== void 0 ? r.getBoundingClientRect() : null, c = a !== null ? a.top - l.top : null, u = c !== null ? c > s : void 0;\n    if (o)\n      i = t.offsetTop + t.offsetHeight;\n    else if (r === void 0 || u) {\n      const h = parseInt(window.getComputedStyle(e.pluginsContent).paddingTop);\n      i = t.offsetTop + h;\n    } else {\n      const h = _o(r), p = parseInt(window.getComputedStyle(this.nodes.plusButton).height, 10), g = 8;\n      i = t.offsetTop + h - p + g + c;\n    }\n    this.nodes.wrapper.style.top = `${Math.floor(i)}px`, this.Editor.BlockManager.blocks.length === 1 && e.isEmpty ? this.blockTunesToggler.hide() : this.blockTunesToggler.show(), this.open();\n  }\n  /**\n   * Close the Toolbar\n   */\n  close() {\n    var e, t;\n    this.Editor.ReadOnly.isEnabled || ((e = this.nodes.wrapper) == null || e.classList.remove(this.CSS.toolbarOpened), this.blockActions.hide(), (t = this.toolboxInstance) == null || t.close(), this.Editor.BlockSettings.close(), this.reset());\n  }\n  /**\n   * Reset the Toolbar position to prevent DOM height growth, for example after blocks deletion\n   */\n  reset() {\n    this.nodes.wrapper.style.top = \"unset\";\n  }\n  /**\n   * Open Toolbar with Plus Button and Actions\n   *\n   * @param {boolean} withBlockActions - by default, Toolbar opens with Block Actions.\n   *                                     This flag allows to open Toolbar without Actions.\n   */\n  open(e = !0) {\n    this.nodes.wrapper.classList.add(this.CSS.toolbarOpened), e ? this.blockActions.show() : this.blockActions.hide();\n  }\n  /**\n   * Draws Toolbar elements\n   */\n  async make() {\n    this.nodes.wrapper = d.make(\"div\", this.CSS.toolbar), [\"content\", \"actions\"].forEach((s) => {\n      this.nodes[s] = d.make(\"div\", this.CSS[s]);\n    }), d.append(this.nodes.wrapper, this.nodes.content), d.append(this.nodes.content, this.nodes.actions), this.nodes.plusButton = d.make(\"div\", this.CSS.plusButton, {\n      innerHTML: Ci\n    }), d.append(this.nodes.actions, this.nodes.plusButton), this.readOnlyMutableListeners.on(this.nodes.plusButton, \"click\", () => {\n      Ne(!0), this.plusButtonClicked();\n    }, !1);\n    const e = d.make(\"div\");\n    e.appendChild(document.createTextNode(z.ui(K.ui.toolbar.toolbox, \"Add\"))), e.appendChild(d.make(\"div\", this.CSS.plusButtonShortcut, {\n      textContent: \"/\"\n    })), Pe(this.nodes.plusButton, e, {\n      hidingDelay: 400\n    }), this.nodes.settingsToggler = d.make(\"span\", this.CSS.settingsToggler, {\n      innerHTML: Ti\n    }), d.append(this.nodes.actions, this.nodes.settingsToggler);\n    const t = d.make(\"div\"), o = d.text(z.ui(K.ui.blockTunes.toggler, \"Click to tune\")), i = await Vi(\"Slash\", \"/\");\n    t.appendChild(o), t.appendChild(d.make(\"div\", this.CSS.plusButtonShortcut, {\n      textContent: tt(`CMD + ${i}`)\n    })), Pe(this.nodes.settingsToggler, t, {\n      hidingDelay: 400\n    }), d.append(this.nodes.actions, this.makeToolbox()), d.append(this.nodes.actions, this.Editor.BlockSettings.getElement()), d.append(this.Editor.UI.nodes.wrapper, this.nodes.wrapper);\n  }\n  /**\n   * Creates the Toolbox instance and return it's rendered element\n   */\n  makeToolbox() {\n    return this.toolboxInstance = new Xi({\n      api: this.Editor.API.methods,\n      tools: this.Editor.Tools.blockTools,\n      i18nLabels: {\n        filter: z.ui(K.ui.popover, \"Filter\"),\n        nothingFound: z.ui(K.ui.popover, \"Nothing found\")\n      }\n    }), this.toolboxInstance.on(Se.Opened, () => {\n      this.Editor.UI.nodes.wrapper.classList.add(this.CSS.openedToolboxHolderModifier);\n    }), this.toolboxInstance.on(Se.Closed, () => {\n      this.Editor.UI.nodes.wrapper.classList.remove(this.CSS.openedToolboxHolderModifier);\n    }), this.toolboxInstance.on(Se.BlockAdded, ({ block: e }) => {\n      const { BlockManager: t, Caret: o } = this.Editor, i = t.getBlockById(e.id);\n      i.inputs.length === 0 && (i === t.lastBlock ? (t.insertAtEnd(), o.setToBlock(t.lastBlock)) : o.setToBlock(t.nextBlock));\n    }), this.toolboxInstance.getElement();\n  }\n  /**\n   * Handler for Plus Button\n   */\n  plusButtonClicked() {\n    var e;\n    this.Editor.BlockManager.currentBlock = this.hoveredBlock, (e = this.toolboxInstance) == null || e.toggle();\n  }\n  /**\n   * Enable bindings\n   */\n  enableModuleBindings() {\n    this.readOnlyMutableListeners.on(this.nodes.settingsToggler, \"mousedown\", (e) => {\n      var t;\n      e.stopPropagation(), this.settingsTogglerClicked(), (t = this.toolboxInstance) != null && t.opened && this.toolboxInstance.close(), Ne(!0);\n    }, !0), pe() || this.eventsDispatcher.on(oo, (e) => {\n      var t;\n      this.Editor.BlockSettings.opened || (t = this.toolboxInstance) != null && t.opened || this.moveAndOpen(e.block);\n    });\n  }\n  /**\n   * Disable bindings\n   */\n  disableModuleBindings() {\n    this.readOnlyMutableListeners.clearAll();\n  }\n  /**\n   * Clicks on the Block Settings toggler\n   */\n  settingsTogglerClicked() {\n    this.Editor.BlockManager.currentBlock = this.hoveredBlock, this.Editor.BlockSettings.opened ? this.Editor.BlockSettings.close() : this.Editor.BlockSettings.open(this.hoveredBlock);\n  }\n  /**\n   * Draws Toolbar UI\n   *\n   * Toolbar contains BlockSettings and Toolbox.\n   * That's why at first we draw its components and then Toolbar itself\n   *\n   * Steps:\n   *  - Make Toolbar dependent components like BlockSettings, Toolbox and so on\n   *  - Make itself and append dependent nodes to itself\n   *\n   */\n  drawUI() {\n    this.Editor.BlockSettings.make(), this.make();\n  }\n  /**\n   * Removes all created and saved HTMLElements\n   * It is used in Read-Only mode\n   */\n  destroy() {\n    this.removeAllNodes(), this.toolboxInstance && this.toolboxInstance.destroy();\n  }\n}\nvar ne = /* @__PURE__ */ ((n) => (n[n.Block = 0] = \"Block\", n[n.Inline = 1] = \"Inline\", n[n.Tune = 2] = \"Tune\", n))(ne || {}), Ie = /* @__PURE__ */ ((n) => (n.Shortcut = \"shortcut\", n.Toolbox = \"toolbox\", n.EnabledInlineTools = \"inlineToolbar\", n.EnabledBlockTunes = \"tunes\", n.Config = \"config\", n))(Ie || {}), io = /* @__PURE__ */ ((n) => (n.Shortcut = \"shortcut\", n.SanitizeConfig = \"sanitize\", n))(io || {}), ce = /* @__PURE__ */ ((n) => (n.IsEnabledLineBreaks = \"enableLineBreaks\", n.Toolbox = \"toolbox\", n.ConversionConfig = \"conversionConfig\", n.IsReadOnlySupported = \"isReadOnlySupported\", n.PasteConfig = \"pasteConfig\", n))(ce || {}), ct = /* @__PURE__ */ ((n) => (n.IsInline = \"isInline\", n.Title = \"title\", n))(ct || {}), et = /* @__PURE__ */ ((n) => (n.IsTune = \"isTune\", n))(et || {});\nclass dt {\n  /**\n   * @class\n   * @param {ConstructorOptions} options - Constructor options\n   */\n  constructor({\n    name: e,\n    constructable: t,\n    config: o,\n    api: i,\n    isDefault: s,\n    isInternal: r = !1,\n    defaultPlaceholder: l\n  }) {\n    this.api = i, this.name = e, this.constructable = t, this.config = o, this.isDefault = s, this.isInternal = r, this.defaultPlaceholder = l;\n  }\n  /**\n   * Returns Tool user configuration\n   */\n  get settings() {\n    const e = this.config.config || {};\n    return this.isDefault && !(\"placeholder\" in e) && this.defaultPlaceholder && (e.placeholder = this.defaultPlaceholder), e;\n  }\n  /**\n   * Calls Tool's reset method\n   */\n  reset() {\n    if (O(this.constructable.reset))\n      return this.constructable.reset();\n  }\n  /**\n   * Calls Tool's prepare method\n   */\n  prepare() {\n    if (O(this.constructable.prepare))\n      return this.constructable.prepare({\n        toolName: this.name,\n        config: this.settings\n      });\n  }\n  /**\n   * Returns shortcut for Tool (internal or specified by user)\n   */\n  get shortcut() {\n    const e = this.constructable.shortcut;\n    return this.config.shortcut || e;\n  }\n  /**\n   * Returns Tool's sanitizer configuration\n   */\n  get sanitizeConfig() {\n    return this.constructable.sanitize || {};\n  }\n  /**\n   * Returns true if Tools is inline\n   */\n  isInline() {\n    return this.type === ne.Inline;\n  }\n  /**\n   * Returns true if Tools is block\n   */\n  isBlock() {\n    return this.type === ne.Block;\n  }\n  /**\n   * Returns true if Tools is tune\n   */\n  isTune() {\n    return this.type === ne.Tune;\n  }\n}\nclass Zi extends y {\n  /**\n   * @param moduleConfiguration - Module Configuration\n   * @param moduleConfiguration.config - Editor's config\n   * @param moduleConfiguration.eventsDispatcher - Editor's event dispatcher\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    super({\n      config: e,\n      eventsDispatcher: t\n    }), this.CSS = {\n      inlineToolbar: \"ce-inline-toolbar\"\n    }, this.opened = !1, this.popover = null, this.toolbarVerticalMargin = pe() ? 20 : 6, this.toolsInstances = /* @__PURE__ */ new Map();\n  }\n  /**\n   * Toggles read-only mode\n   *\n   * @param {boolean} readOnlyEnabled - read-only mode\n   */\n  toggleReadOnly(e) {\n    e ? this.destroy() : window.requestIdleCallback(() => {\n      this.make();\n    }, { timeout: 2e3 });\n  }\n  /**\n   *  Moving / appearance\n   *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   */\n  /**\n   * Shows Inline Toolbar if something is selected\n   *\n   * @param [needToClose] - pass true to close toolbar if it is not allowed.\n   *                                  Avoid to use it just for closing IT, better call .close() clearly.\n   */\n  async tryToShow(e = !1) {\n    e && this.close(), this.allowedToShow() && (await this.open(), this.Editor.Toolbar.close());\n  }\n  /**\n   * Hides Inline Toolbar\n   */\n  close() {\n    var e, t;\n    this.opened && (this.Editor.ReadOnly.isEnabled || (Array.from(this.toolsInstances.entries()).forEach(([o, i]) => {\n      const s = this.getToolShortcut(o);\n      s && he.remove(this.Editor.UI.nodes.redactor, s), O(i.clear) && i.clear();\n    }), this.toolsInstances = null, this.reset(), this.opened = !1, (e = this.popover) == null || e.hide(), (t = this.popover) == null || t.destroy(), this.popover = null));\n  }\n  /**\n   * Check if node is contained by Inline Toolbar\n   *\n   * @param {Node} node — node to check\n   */\n  containsNode(e) {\n    return this.nodes.wrapper === void 0 ? !1 : this.nodes.wrapper.contains(e);\n  }\n  /**\n   * Removes UI and its components\n   */\n  destroy() {\n    var e;\n    this.removeAllNodes(), (e = this.popover) == null || e.destroy(), this.popover = null;\n  }\n  /**\n   * Making DOM\n   */\n  make() {\n    this.nodes.wrapper = d.make(\"div\", [\n      this.CSS.inlineToolbar,\n      ...this.isRtl ? [this.Editor.UI.CSS.editorRtlFix] : []\n    ]), d.append(this.Editor.UI.nodes.wrapper, this.nodes.wrapper);\n  }\n  /**\n   * Shows Inline Toolbar\n   */\n  async open() {\n    var t;\n    if (this.opened)\n      return;\n    this.opened = !0, this.popover !== null && this.popover.destroy();\n    const e = await this.getInlineTools();\n    this.popover = new Ri({\n      items: e,\n      scopeElement: this.Editor.API.methods.ui.nodes.redactor,\n      messages: {\n        nothingFound: z.ui(K.ui.popover, \"Nothing found\"),\n        search: z.ui(K.ui.popover, \"Filter\")\n      }\n    }), this.move(this.popover.size.width), (t = this.nodes.wrapper) == null || t.append(this.popover.getElement()), this.popover.show();\n  }\n  /**\n   * Move Toolbar to the selected text\n   *\n   * @param popoverWidth - width of the toolbar popover\n   */\n  move(e) {\n    const t = b.rect, o = this.Editor.UI.nodes.wrapper.getBoundingClientRect(), i = {\n      x: t.x - o.x,\n      y: t.y + t.height - // + window.scrollY\n      o.top + this.toolbarVerticalMargin\n    };\n    i.x + e + o.x > this.Editor.UI.contentRect.right && (i.x = this.Editor.UI.contentRect.right - e - o.x), this.nodes.wrapper.style.left = Math.floor(i.x) + \"px\", this.nodes.wrapper.style.top = Math.floor(i.y) + \"px\";\n  }\n  /**\n   * Clear orientation classes and reset position\n   */\n  reset() {\n    this.nodes.wrapper.style.left = \"0\", this.nodes.wrapper.style.top = \"0\";\n  }\n  /**\n   * Need to show Inline Toolbar or not\n   */\n  allowedToShow() {\n    const e = [\"IMG\", \"INPUT\"], t = b.get(), o = b.text;\n    if (!t || !t.anchorNode || t.isCollapsed || o.length < 1)\n      return !1;\n    const i = d.isElement(t.anchorNode) ? t.anchorNode : t.anchorNode.parentElement;\n    if (i === null || t && e.includes(i.tagName) || i.closest('[contenteditable=\"true\"]') === null)\n      return !1;\n    const r = this.Editor.BlockManager.getBlock(t.anchorNode);\n    return r ? r.tool.inlineTools.size !== 0 : !1;\n  }\n  /**\n   *  Working with Tools\n   *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   */\n  /**\n   * Returns Inline Tools segregated by their appearance type: popover items and custom html elements.\n   * Sets this.toolsInstances map\n   */\n  async getInlineTools() {\n    const e = b.get(), t = this.Editor.BlockManager.getBlock(e.anchorNode), o = Array.from(t.tool.inlineTools.values()), i = [];\n    this.toolsInstances === null && (this.toolsInstances = /* @__PURE__ */ new Map());\n    for (let s = 0; s < o.length; s++) {\n      const r = o[s], l = r.create(), a = await l.render();\n      this.toolsInstances.set(r.name, l);\n      const c = this.getToolShortcut(r.name);\n      if (c)\n        try {\n          this.enableShortcuts(r.name, c);\n        } catch {\n        }\n      const u = c !== void 0 ? tt(c) : void 0, h = z.t(\n        K.toolNames,\n        r.title || Le(r.name)\n      );\n      [a].flat().forEach((p) => {\n        var f, k;\n        const g = {\n          name: r.name,\n          onActivate: () => {\n            this.toolClicked(l);\n          },\n          hint: {\n            title: h,\n            description: u\n          }\n        };\n        if (d.isElement(p)) {\n          const C = {\n            ...g,\n            element: p,\n            type: A.Html\n          };\n          if (O(l.renderActions)) {\n            const S = l.renderActions();\n            C.children = {\n              isOpen: (f = l.checkState) == null ? void 0 : f.call(l, b.get()),\n              /** Disable keyboard navigation in actions, as it might conflict with enter press handling */\n              isFlippable: !1,\n              items: [\n                {\n                  type: A.Html,\n                  element: S\n                }\n              ]\n            };\n          } else\n            (k = l.checkState) == null || k.call(l, b.get());\n          i.push(C);\n        } else if (p.type === A.Html)\n          i.push({\n            ...g,\n            ...p,\n            type: A.Html\n          });\n        else if (p.type === A.Separator)\n          i.push({\n            type: A.Separator\n          });\n        else {\n          const C = {\n            ...g,\n            ...p,\n            type: A.Default\n          };\n          \"children\" in C && s !== 0 && i.push({\n            type: A.Separator\n          }), i.push(C), \"children\" in C && s < o.length - 1 && i.push({\n            type: A.Separator\n          });\n        }\n      });\n    }\n    return i;\n  }\n  /**\n   * Get shortcut name for tool\n   *\n   * @param toolName — Tool name\n   */\n  getToolShortcut(e) {\n    const { Tools: t } = this.Editor, o = t.inlineTools.get(e), i = t.internal.inlineTools;\n    return Array.from(i.keys()).includes(e) ? this.inlineTools[e][io.Shortcut] : o == null ? void 0 : o.shortcut;\n  }\n  /**\n   * Enable Tool shortcut with Editor Shortcuts Module\n   *\n   * @param toolName - tool name\n   * @param shortcut - shortcut according to the ShortcutData Module format\n   */\n  enableShortcuts(e, t) {\n    he.add({\n      name: t,\n      handler: (o) => {\n        var s;\n        const { currentBlock: i } = this.Editor.BlockManager;\n        i && i.tool.enabledInlineTools && (o.preventDefault(), (s = this.popover) == null || s.activateItemByName(e));\n      },\n      on: this.Editor.UI.nodes.redactor\n    });\n  }\n  /**\n   * Inline Tool button clicks\n   *\n   * @param tool - Tool's instance\n   */\n  toolClicked(e) {\n    var o;\n    const t = b.range;\n    (o = e.surround) == null || o.call(e, t), this.checkToolsState();\n  }\n  /**\n   * Check Tools` state by selection\n   */\n  checkToolsState() {\n    var e;\n    (e = this.toolsInstances) == null || e.forEach((t) => {\n      var o;\n      (o = t.checkState) == null || o.call(t, b.get());\n    });\n  }\n  /**\n   * Get inline tools tools\n   * Tools that has isInline is true\n   */\n  get inlineTools() {\n    const e = {};\n    return Array.from(this.Editor.Tools.inlineTools.entries()).forEach(([t, o]) => {\n      e[t] = o.create();\n    }), e;\n  }\n}\nfunction so() {\n  const n = window.getSelection();\n  if (n === null)\n    return [null, 0];\n  let e = n.focusNode, t = n.focusOffset;\n  return e === null ? [null, 0] : (e.nodeType !== Node.TEXT_NODE && e.childNodes.length > 0 && (e.childNodes[t] ? (e = e.childNodes[t], t = 0) : (e = e.childNodes[t - 1], t = e.textContent.length)), [e, t]);\n}\nfunction no(n, e, t, o) {\n  const i = document.createRange();\n  o === \"left\" ? (i.setStart(n, 0), i.setEnd(e, t)) : (i.setStart(e, t), i.setEnd(n, n.childNodes.length));\n  const s = i.cloneContents(), r = document.createElement(\"div\");\n  r.appendChild(s);\n  const l = r.textContent || \"\";\n  return Lo(l);\n}\nfunction Me(n) {\n  const e = d.getDeepestNode(n);\n  if (e === null || d.isEmpty(n))\n    return !0;\n  if (d.isNativeInput(e))\n    return e.selectionEnd === 0;\n  if (d.isEmpty(n))\n    return !0;\n  const [t, o] = so();\n  return t === null ? !1 : no(n, t, o, \"left\");\n}\nfunction Ae(n) {\n  const e = d.getDeepestNode(n, !0);\n  if (e === null)\n    return !0;\n  if (d.isNativeInput(e))\n    return e.selectionEnd === e.value.length;\n  const [t, o] = so();\n  return t === null ? !1 : no(n, t, o, \"right\");\n}\nclass Gi extends y {\n  /**\n   * All keydowns on Block\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  keydown(e) {\n    switch (this.beforeKeydownProcessing(e), e.keyCode) {\n      case w.BACKSPACE:\n        this.backspace(e);\n        break;\n      case w.DELETE:\n        this.delete(e);\n        break;\n      case w.ENTER:\n        this.enter(e);\n        break;\n      case w.DOWN:\n      case w.RIGHT:\n        this.arrowRightAndDown(e);\n        break;\n      case w.UP:\n      case w.LEFT:\n        this.arrowLeftAndUp(e);\n        break;\n      case w.TAB:\n        this.tabPressed(e);\n        break;\n    }\n    e.key === \"/\" && !e.ctrlKey && !e.metaKey && this.slashPressed(e), e.code === \"Slash\" && (e.ctrlKey || e.metaKey) && (e.preventDefault(), this.commandSlashPressed());\n  }\n  /**\n   * Fires on keydown before event processing\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  beforeKeydownProcessing(e) {\n    this.needToolbarClosing(e) && Mt(e.keyCode) && (this.Editor.Toolbar.close(), e.ctrlKey || e.metaKey || e.altKey || e.shiftKey || this.Editor.BlockSelection.clearSelection(e));\n  }\n  /**\n   * Key up on Block:\n   * - shows Inline Toolbar if something selected\n   * - shows conversion toolbar with 85% of block selection\n   *\n   * @param {KeyboardEvent} event - keyup event\n   */\n  keyup(e) {\n    e.shiftKey || this.Editor.UI.checkEmptiness();\n  }\n  /**\n   * Add drop target styles\n   *\n   * @param {DragEvent} event - drag over event\n   */\n  dragOver(e) {\n    const t = this.Editor.BlockManager.getBlockByChildNode(e.target);\n    t.dropTarget = !0;\n  }\n  /**\n   * Remove drop target style\n   *\n   * @param {DragEvent} event - drag leave event\n   */\n  dragLeave(e) {\n    const t = this.Editor.BlockManager.getBlockByChildNode(e.target);\n    t.dropTarget = !1;\n  }\n  /**\n   * Copying selected blocks\n   * Before putting to the clipboard we sanitize all blocks and then copy to the clipboard\n   *\n   * @param {ClipboardEvent} event - clipboard event\n   */\n  handleCommandC(e) {\n    const { BlockSelection: t } = this.Editor;\n    t.anyBlockSelected && t.copySelectedBlocks(e);\n  }\n  /**\n   * Copy and Delete selected Blocks\n   *\n   * @param {ClipboardEvent} event - clipboard event\n   */\n  handleCommandX(e) {\n    const { BlockSelection: t, BlockManager: o, Caret: i } = this.Editor;\n    t.anyBlockSelected && t.copySelectedBlocks(e).then(() => {\n      const s = o.removeSelectedBlocks(), r = o.insertDefaultBlockAtIndex(s, !0);\n      i.setToBlock(r, i.positions.START), t.clearSelection(e);\n    });\n  }\n  /**\n   * Tab pressed inside a Block.\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  tabPressed(e) {\n    const { InlineToolbar: t, Caret: o } = this.Editor;\n    if (t.opened)\n      return;\n    (e.shiftKey ? o.navigatePrevious(!0) : o.navigateNext(!0)) && e.preventDefault();\n  }\n  /**\n   * '/' + 'command' keydown inside a Block\n   */\n  commandSlashPressed() {\n    this.Editor.BlockSelection.selectedBlocks.length > 1 || this.activateBlockSettings();\n  }\n  /**\n   * '/' keydown inside a Block\n   *\n   * @param event - keydown\n   */\n  slashPressed(e) {\n    this.Editor.BlockManager.currentBlock.isEmpty && (e.preventDefault(), this.Editor.Caret.insertContentAtCaretPosition(\"/\"), this.activateToolbox());\n  }\n  /**\n   * ENTER pressed on block\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  enter(e) {\n    const { BlockManager: t, UI: o } = this.Editor, i = t.currentBlock;\n    if (i === void 0 || i.tool.isLineBreaksEnabled || o.someToolbarOpened && o.someFlipperButtonFocused || e.shiftKey && !Ge)\n      return;\n    let s = i;\n    i.currentInput !== void 0 && Me(i.currentInput) && !i.hasMedia ? this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex) : i.currentInput && Ae(i.currentInput) ? s = this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex + 1) : s = this.Editor.BlockManager.split(), this.Editor.Caret.setToBlock(s), this.Editor.Toolbar.moveAndOpen(s), e.preventDefault();\n  }\n  /**\n   * Handle backspace keydown on Block\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  backspace(e) {\n    const { BlockManager: t, Caret: o } = this.Editor, { currentBlock: i, previousBlock: s } = t;\n    if (i === void 0 || !b.isCollapsed || !i.currentInput || !Me(i.currentInput))\n      return;\n    if (e.preventDefault(), this.Editor.Toolbar.close(), !(i.currentInput === i.firstInput)) {\n      o.navigatePrevious();\n      return;\n    }\n    if (s === null)\n      return;\n    if (s.isEmpty) {\n      t.removeBlock(s);\n      return;\n    }\n    if (i.isEmpty) {\n      t.removeBlock(i);\n      const a = t.currentBlock;\n      o.setToBlock(a, o.positions.END);\n      return;\n    }\n    wt(s, i) ? this.mergeBlocks(s, i) : o.setToBlock(s, o.positions.END);\n  }\n  /**\n   * Handles delete keydown on Block\n   * Removes char after the caret.\n   * If caret is at the end of the block, merge next block with current\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  delete(e) {\n    const { BlockManager: t, Caret: o } = this.Editor, { currentBlock: i, nextBlock: s } = t;\n    if (!b.isCollapsed || !Ae(i.currentInput))\n      return;\n    if (e.preventDefault(), this.Editor.Toolbar.close(), !(i.currentInput === i.lastInput)) {\n      o.navigateNext();\n      return;\n    }\n    if (s === null)\n      return;\n    if (s.isEmpty) {\n      t.removeBlock(s);\n      return;\n    }\n    if (i.isEmpty) {\n      t.removeBlock(i), o.setToBlock(s, o.positions.START);\n      return;\n    }\n    wt(i, s) ? this.mergeBlocks(i, s) : o.setToBlock(s, o.positions.START);\n  }\n  /**\n   * Merge passed Blocks\n   *\n   * @param targetBlock - to which Block we want to merge\n   * @param blockToMerge - what Block we want to merge\n   */\n  mergeBlocks(e, t) {\n    const { BlockManager: o, Caret: i, Toolbar: s } = this.Editor;\n    i.createShadow(e.lastInput), o.mergeBlocks(e, t).then(() => {\n      i.restoreCaret(e.pluginsContent), s.close();\n    });\n  }\n  /**\n   * Handle right and down keyboard keys\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  arrowRightAndDown(e) {\n    const t = le.usedKeys.includes(e.keyCode) && (!e.shiftKey || e.keyCode === w.TAB);\n    if (this.Editor.UI.someToolbarOpened && t)\n      return;\n    this.Editor.Toolbar.close();\n    const { currentBlock: o } = this.Editor.BlockManager, s = ((o == null ? void 0 : o.currentInput) !== void 0 ? Ae(o.currentInput) : void 0) || this.Editor.BlockSelection.anyBlockSelected;\n    if (e.shiftKey && e.keyCode === w.DOWN && s) {\n      this.Editor.CrossBlockSelection.toggleBlockSelectedState();\n      return;\n    }\n    if (e.keyCode === w.DOWN || e.keyCode === w.RIGHT && !this.isRtl ? this.Editor.Caret.navigateNext() : this.Editor.Caret.navigatePrevious()) {\n      e.preventDefault();\n      return;\n    }\n    Oe(() => {\n      this.Editor.BlockManager.currentBlock && this.Editor.BlockManager.currentBlock.updateCurrentInput();\n    }, 20)(), this.Editor.BlockSelection.clearSelection(e);\n  }\n  /**\n   * Handle left and up keyboard keys\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  arrowLeftAndUp(e) {\n    if (this.Editor.UI.someToolbarOpened) {\n      if (le.usedKeys.includes(e.keyCode) && (!e.shiftKey || e.keyCode === w.TAB))\n        return;\n      this.Editor.UI.closeAllToolbars();\n    }\n    this.Editor.Toolbar.close();\n    const { currentBlock: t } = this.Editor.BlockManager, i = ((t == null ? void 0 : t.currentInput) !== void 0 ? Me(t.currentInput) : void 0) || this.Editor.BlockSelection.anyBlockSelected;\n    if (e.shiftKey && e.keyCode === w.UP && i) {\n      this.Editor.CrossBlockSelection.toggleBlockSelectedState(!1);\n      return;\n    }\n    if (e.keyCode === w.UP || e.keyCode === w.LEFT && !this.isRtl ? this.Editor.Caret.navigatePrevious() : this.Editor.Caret.navigateNext()) {\n      e.preventDefault();\n      return;\n    }\n    Oe(() => {\n      this.Editor.BlockManager.currentBlock && this.Editor.BlockManager.currentBlock.updateCurrentInput();\n    }, 20)(), this.Editor.BlockSelection.clearSelection(e);\n  }\n  /**\n   * Cases when we need to close Toolbar\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  needToolbarClosing(e) {\n    const t = e.keyCode === w.ENTER && this.Editor.Toolbar.toolbox.opened, o = e.keyCode === w.ENTER && this.Editor.BlockSettings.opened, i = e.keyCode === w.ENTER && this.Editor.InlineToolbar.opened, s = e.keyCode === w.TAB;\n    return !(e.shiftKey || s || t || o || i);\n  }\n  /**\n   * If Toolbox is not open, then just open it and show plus button\n   */\n  activateToolbox() {\n    this.Editor.Toolbar.opened || this.Editor.Toolbar.moveAndOpen(), this.Editor.Toolbar.toolbox.open();\n  }\n  /**\n   * Open Toolbar and show BlockSettings before flipping Tools\n   */\n  activateBlockSettings() {\n    this.Editor.Toolbar.opened || this.Editor.Toolbar.moveAndOpen(), this.Editor.BlockSettings.opened || this.Editor.BlockSettings.open();\n  }\n}\nclass Xe {\n  /**\n   * @class\n   * @param {HTMLElement} workingArea — editor`s working node\n   */\n  constructor(e) {\n    this.blocks = [], this.workingArea = e;\n  }\n  /**\n   * Get length of Block instances array\n   *\n   * @returns {number}\n   */\n  get length() {\n    return this.blocks.length;\n  }\n  /**\n   * Get Block instances array\n   *\n   * @returns {Block[]}\n   */\n  get array() {\n    return this.blocks;\n  }\n  /**\n   * Get blocks html elements array\n   *\n   * @returns {HTMLElement[]}\n   */\n  get nodes() {\n    return At(this.workingArea.children);\n  }\n  /**\n   * Proxy trap to implement array-like setter\n   *\n   * @example\n   * blocks[0] = new Block(...)\n   * @param {Blocks} instance — Blocks instance\n   * @param {PropertyKey} property — block index or any Blocks class property key to set\n   * @param {Block} value — value to set\n   * @returns {boolean}\n   */\n  static set(e, t, o) {\n    return isNaN(Number(t)) ? (Reflect.set(e, t, o), !0) : (e.insert(+t, o), !0);\n  }\n  /**\n   * Proxy trap to implement array-like getter\n   *\n   * @param {Blocks} instance — Blocks instance\n   * @param {PropertyKey} property — Blocks class property key\n   * @returns {Block|*}\n   */\n  static get(e, t) {\n    return isNaN(Number(t)) ? Reflect.get(e, t) : e.get(+t);\n  }\n  /**\n   * Push new Block to the blocks array and append it to working area\n   *\n   * @param {Block} block - Block to add\n   */\n  push(e) {\n    this.blocks.push(e), this.insertToDOM(e);\n  }\n  /**\n   * Swaps blocks with indexes first and second\n   *\n   * @param {number} first - first block index\n   * @param {number} second - second block index\n   * @deprecated — use 'move' instead\n   */\n  swap(e, t) {\n    const o = this.blocks[t];\n    d.swap(this.blocks[e].holder, o.holder), this.blocks[t] = this.blocks[e], this.blocks[e] = o;\n  }\n  /**\n   * Move a block from one to another index\n   *\n   * @param {number} toIndex - new index of the block\n   * @param {number} fromIndex - block to move\n   */\n  move(e, t) {\n    const o = this.blocks.splice(t, 1)[0], i = e - 1, s = Math.max(0, i), r = this.blocks[s];\n    e > 0 ? this.insertToDOM(o, \"afterend\", r) : this.insertToDOM(o, \"beforebegin\", r), this.blocks.splice(e, 0, o);\n    const l = this.composeBlockEvent(\"move\", {\n      fromIndex: t,\n      toIndex: e\n    });\n    o.call(J.MOVED, l);\n  }\n  /**\n   * Insert new Block at passed index\n   *\n   * @param {number} index — index to insert Block\n   * @param {Block} block — Block to insert\n   * @param {boolean} replace — it true, replace block on given index\n   */\n  insert(e, t, o = !1) {\n    if (!this.length) {\n      this.push(t);\n      return;\n    }\n    e > this.length && (e = this.length), o && (this.blocks[e].holder.remove(), this.blocks[e].call(J.REMOVED));\n    const i = o ? 1 : 0;\n    if (this.blocks.splice(e, i, t), e > 0) {\n      const s = this.blocks[e - 1];\n      this.insertToDOM(t, \"afterend\", s);\n    } else {\n      const s = this.blocks[e + 1];\n      s ? this.insertToDOM(t, \"beforebegin\", s) : this.insertToDOM(t);\n    }\n  }\n  /**\n   * Replaces block under passed index with passed block\n   *\n   * @param index - index of existed block\n   * @param block - new block\n   */\n  replace(e, t) {\n    if (this.blocks[e] === void 0)\n      throw Error(\"Incorrect index\");\n    this.blocks[e].holder.replaceWith(t.holder), this.blocks[e] = t;\n  }\n  /**\n   * Inserts several blocks at once\n   *\n   * @param blocks - blocks to insert\n   * @param index - index to insert blocks at\n   */\n  insertMany(e, t) {\n    const o = new DocumentFragment();\n    for (const i of e)\n      o.appendChild(i.holder);\n    if (this.length > 0) {\n      if (t > 0) {\n        const i = Math.min(t - 1, this.length - 1);\n        this.blocks[i].holder.after(o);\n      } else\n        t === 0 && this.workingArea.prepend(o);\n      this.blocks.splice(t, 0, ...e);\n    } else\n      this.blocks.push(...e), this.workingArea.appendChild(o);\n    e.forEach((i) => i.call(J.RENDERED));\n  }\n  /**\n   * Remove block\n   *\n   * @param {number} index - index of Block to remove\n   */\n  remove(e) {\n    isNaN(e) && (e = this.length - 1), this.blocks[e].holder.remove(), this.blocks[e].call(J.REMOVED), this.blocks.splice(e, 1);\n  }\n  /**\n   * Remove all blocks\n   */\n  removeAll() {\n    this.workingArea.innerHTML = \"\", this.blocks.forEach((e) => e.call(J.REMOVED)), this.blocks.length = 0;\n  }\n  /**\n   * Insert Block after passed target\n   *\n   * @todo decide if this method is necessary\n   * @param {Block} targetBlock — target after which Block should be inserted\n   * @param {Block} newBlock — Block to insert\n   */\n  insertAfter(e, t) {\n    const o = this.blocks.indexOf(e);\n    this.insert(o + 1, t);\n  }\n  /**\n   * Get Block by index\n   *\n   * @param {number} index — Block index\n   * @returns {Block}\n   */\n  get(e) {\n    return this.blocks[e];\n  }\n  /**\n   * Return index of passed Block\n   *\n   * @param {Block} block - Block to find\n   * @returns {number}\n   */\n  indexOf(e) {\n    return this.blocks.indexOf(e);\n  }\n  /**\n   * Insert new Block into DOM\n   *\n   * @param {Block} block - Block to insert\n   * @param {InsertPosition} position — insert position (if set, will use insertAdjacentElement)\n   * @param {Block} target — Block related to position\n   */\n  insertToDOM(e, t, o) {\n    t ? o.holder.insertAdjacentElement(t, e.holder) : this.workingArea.appendChild(e.holder), e.call(J.RENDERED);\n  }\n  /**\n   * Composes Block event with passed type and details\n   *\n   * @param {string} type - event type\n   * @param {object} detail - event detail\n   */\n  composeBlockEvent(e, t) {\n    return new CustomEvent(e, {\n      detail: t\n    });\n  }\n}\nconst Tt = \"block-removed\", Ct = \"block-added\", Ji = \"block-moved\", St = \"block-changed\";\nclass Qi {\n  constructor() {\n    this.completed = Promise.resolve();\n  }\n  /**\n   * Add new promise to queue\n   *\n   * @param operation - promise should be added to queue\n   */\n  add(e) {\n    return new Promise((t, o) => {\n      this.completed = this.completed.then(e).then(t).catch(o);\n    });\n  }\n}\nclass es extends y {\n  constructor() {\n    super(...arguments), this._currentBlockIndex = -1, this._blocks = null;\n  }\n  /**\n   * Returns current Block index\n   *\n   * @returns {number}\n   */\n  get currentBlockIndex() {\n    return this._currentBlockIndex;\n  }\n  /**\n   * Set current Block index and fire Block lifecycle callbacks\n   *\n   * @param {number} newIndex - index of Block to set as current\n   */\n  set currentBlockIndex(e) {\n    this._currentBlockIndex = e;\n  }\n  /**\n   * returns first Block\n   *\n   * @returns {Block}\n   */\n  get firstBlock() {\n    return this._blocks[0];\n  }\n  /**\n   * returns last Block\n   *\n   * @returns {Block}\n   */\n  get lastBlock() {\n    return this._blocks[this._blocks.length - 1];\n  }\n  /**\n   * Get current Block instance\n   *\n   * @returns {Block}\n   */\n  get currentBlock() {\n    return this._blocks[this.currentBlockIndex];\n  }\n  /**\n   * Set passed Block as a current\n   *\n   * @param block - block to set as a current\n   */\n  set currentBlock(e) {\n    this.currentBlockIndex = this.getBlockIndex(e);\n  }\n  /**\n   * Returns next Block instance\n   *\n   * @returns {Block|null}\n   */\n  get nextBlock() {\n    return this.currentBlockIndex === this._blocks.length - 1 ? null : this._blocks[this.currentBlockIndex + 1];\n  }\n  /**\n   * Return first Block with inputs after current Block\n   *\n   * @returns {Block | undefined}\n   */\n  get nextContentfulBlock() {\n    return this.blocks.slice(this.currentBlockIndex + 1).find((t) => !!t.inputs.length);\n  }\n  /**\n   * Return first Block with inputs before current Block\n   *\n   * @returns {Block | undefined}\n   */\n  get previousContentfulBlock() {\n    return this.blocks.slice(0, this.currentBlockIndex).reverse().find((t) => !!t.inputs.length);\n  }\n  /**\n   * Returns previous Block instance\n   *\n   * @returns {Block|null}\n   */\n  get previousBlock() {\n    return this.currentBlockIndex === 0 ? null : this._blocks[this.currentBlockIndex - 1];\n  }\n  /**\n   * Get array of Block instances\n   *\n   * @returns {Block[]} {@link Blocks#array}\n   */\n  get blocks() {\n    return this._blocks.array;\n  }\n  /**\n   * Check if each Block is empty\n   *\n   * @returns {boolean}\n   */\n  get isEditorEmpty() {\n    return this.blocks.every((e) => e.isEmpty);\n  }\n  /**\n   * Should be called after Editor.UI preparation\n   * Define this._blocks property\n   */\n  prepare() {\n    const e = new Xe(this.Editor.UI.nodes.redactor);\n    this._blocks = new Proxy(e, {\n      set: Xe.set,\n      get: Xe.get\n    }), this.listeners.on(\n      document,\n      \"copy\",\n      (t) => this.Editor.BlockEvents.handleCommandC(t)\n    );\n  }\n  /**\n   * Toggle read-only state\n   *\n   * If readOnly is true:\n   *  - Unbind event handlers from created Blocks\n   *\n   * if readOnly is false:\n   *  - Bind event handlers to all existing Blocks\n   *\n   * @param {boolean} readOnlyEnabled - \"read only\" state\n   */\n  toggleReadOnly(e) {\n    e ? this.disableModuleBindings() : this.enableModuleBindings();\n  }\n  /**\n   * Creates Block instance by tool name\n   *\n   * @param {object} options - block creation options\n   * @param {string} options.tool - tools passed in editor config {@link EditorConfig#tools}\n   * @param {string} [options.id] - unique id for this block\n   * @param {BlockToolData} [options.data] - constructor params\n   * @returns {Block}\n   */\n  composeBlock({\n    tool: e,\n    data: t = {},\n    id: o = void 0,\n    tunes: i = {}\n  }) {\n    const s = this.Editor.ReadOnly.isEnabled, r = this.Editor.Tools.blockTools.get(e), l = new D({\n      id: o,\n      data: t,\n      tool: r,\n      api: this.Editor.API,\n      readOnly: s,\n      tunesData: i\n    }, this.eventsDispatcher);\n    return s || window.requestIdleCallback(() => {\n      this.bindBlockEvents(l);\n    }, { timeout: 2e3 }), l;\n  }\n  /**\n   * Insert new block into _blocks\n   *\n   * @param {object} options - insert options\n   * @param {string} [options.id] - block's unique id\n   * @param {string} [options.tool] - plugin name, by default method inserts the default block type\n   * @param {object} [options.data] - plugin data\n   * @param {number} [options.index] - index where to insert new Block\n   * @param {boolean} [options.needToFocus] - flag shows if needed to update current Block index\n   * @param {boolean} [options.replace] - flag shows if block by passed index should be replaced with inserted one\n   * @returns {Block}\n   */\n  insert({\n    id: e = void 0,\n    tool: t = this.config.defaultBlock,\n    data: o = {},\n    index: i,\n    needToFocus: s = !0,\n    replace: r = !1,\n    tunes: l = {}\n  } = {}) {\n    let a = i;\n    a === void 0 && (a = this.currentBlockIndex + (r ? 0 : 1));\n    const c = this.composeBlock({\n      id: e,\n      tool: t,\n      data: o,\n      tunes: l\n    });\n    return r && this.blockDidMutated(Tt, this.getBlockByIndex(a), {\n      index: a\n    }), this._blocks.insert(a, c, r), this.blockDidMutated(Ct, c, {\n      index: a\n    }), s ? this.currentBlockIndex = a : a <= this.currentBlockIndex && this.currentBlockIndex++, c;\n  }\n  /**\n   * Inserts several blocks at once\n   *\n   * @param blocks - blocks to insert\n   * @param index - index where to insert\n   */\n  insertMany(e, t = 0) {\n    this._blocks.insertMany(e, t);\n  }\n  /**\n   * Update Block data.\n   *\n   * Currently we don't have an 'update' method in the Tools API, so we just create a new block with the same id and type\n   * Should not trigger 'block-removed' or 'block-added' events.\n   *\n   * If neither data nor tunes is provided, return the provided block instead.\n   *\n   * @param block - block to update\n   * @param data - (optional) new data\n   * @param tunes - (optional) tune data\n   */\n  async update(e, t, o) {\n    if (!t && !o)\n      return e;\n    const i = await e.data, s = this.composeBlock({\n      id: e.id,\n      tool: e.name,\n      data: Object.assign({}, i, t ?? {}),\n      tunes: o ?? e.tunes\n    }), r = this.getBlockIndex(e);\n    return this._blocks.replace(r, s), this.blockDidMutated(St, s, {\n      index: r\n    }), s;\n  }\n  /**\n   * Replace passed Block with the new one with specified Tool and data\n   *\n   * @param block - block to replace\n   * @param newTool - new Tool name\n   * @param data - new Tool data\n   */\n  replace(e, t, o) {\n    const i = this.getBlockIndex(e);\n    return this.insert({\n      tool: t,\n      data: o,\n      index: i,\n      replace: !0\n    });\n  }\n  /**\n   * Insert pasted content. Call onPaste callback after insert.\n   *\n   * @param {string} toolName - name of Tool to insert\n   * @param {PasteEvent} pasteEvent - pasted data\n   * @param {boolean} replace - should replace current block\n   */\n  paste(e, t, o = !1) {\n    const i = this.insert({\n      tool: e,\n      replace: o\n    });\n    try {\n      window.requestIdleCallback(() => {\n        i.call(J.ON_PASTE, t);\n      });\n    } catch (s) {\n      I(`${e}: onPaste callback call is failed`, \"error\", s);\n    }\n    return i;\n  }\n  /**\n   * Insert new default block at passed index\n   *\n   * @param {number} index - index where Block should be inserted\n   * @param {boolean} needToFocus - if true, updates current Block index\n   *\n   * TODO: Remove method and use insert() with index instead (?)\n   * @returns {Block} inserted Block\n   */\n  insertDefaultBlockAtIndex(e, t = !1) {\n    const o = this.composeBlock({ tool: this.config.defaultBlock });\n    return this._blocks[e] = o, this.blockDidMutated(Ct, o, {\n      index: e\n    }), t ? this.currentBlockIndex = e : e <= this.currentBlockIndex && this.currentBlockIndex++, o;\n  }\n  /**\n   * Always inserts at the end\n   *\n   * @returns {Block}\n   */\n  insertAtEnd() {\n    return this.currentBlockIndex = this.blocks.length - 1, this.insert();\n  }\n  /**\n   * Merge two blocks\n   *\n   * @param {Block} targetBlock - previous block will be append to this block\n   * @param {Block} blockToMerge - block that will be merged with target block\n   * @returns {Promise} - the sequence that can be continued\n   */\n  async mergeBlocks(e, t) {\n    let o;\n    if (e.name === t.name && e.mergeable) {\n      const i = await t.data;\n      if (V(i)) {\n        console.error(\"Could not merge Block. Failed to extract original Block data.\");\n        return;\n      }\n      const [s] = it([i], e.tool.sanitizeConfig);\n      o = s;\n    } else if (e.mergeable && _e(t, \"export\") && _e(e, \"import\")) {\n      const i = await t.exportDataAsString(), s = q(i, e.tool.sanitizeConfig);\n      o = xt(s, e.tool.conversionConfig);\n    }\n    o !== void 0 && (await e.mergeWith(o), this.removeBlock(t), this.currentBlockIndex = this._blocks.indexOf(e));\n  }\n  /**\n   * Remove passed Block\n   *\n   * @param block - Block to remove\n   * @param addLastBlock - if true, adds new default block at the end. @todo remove this logic and use event-bus instead\n   */\n  removeBlock(e, t = !0) {\n    return new Promise((o) => {\n      const i = this._blocks.indexOf(e);\n      if (!this.validateIndex(i))\n        throw new Error(\"Can't find a Block to remove\");\n      e.destroy(), this._blocks.remove(i), this.blockDidMutated(Tt, e, {\n        index: i\n      }), this.currentBlockIndex >= i && this.currentBlockIndex--, this.blocks.length ? i === 0 && (this.currentBlockIndex = 0) : (this.unsetCurrentBlock(), t && this.insert()), o();\n    });\n  }\n  /**\n   * Remove only selected Blocks\n   * and returns first Block index where started removing...\n   *\n   * @returns {number|undefined}\n   */\n  removeSelectedBlocks() {\n    let e;\n    for (let t = this.blocks.length - 1; t >= 0; t--)\n      this.blocks[t].selected && (this.removeBlock(this.blocks[t]), e = t);\n    return e;\n  }\n  /**\n   * Attention!\n   * After removing insert the new default typed Block and focus on it\n   * Removes all blocks\n   */\n  removeAllBlocks() {\n    for (let e = this.blocks.length - 1; e >= 0; e--)\n      this._blocks.remove(e);\n    this.unsetCurrentBlock(), this.insert(), this.currentBlock.firstInput.focus();\n  }\n  /**\n   * Split current Block\n   * 1. Extract content from Caret position to the Block`s end\n   * 2. Insert a new Block below current one with extracted content\n   *\n   * @returns {Block}\n   */\n  split() {\n    const e = this.Editor.Caret.extractFragmentFromCaretPosition(), t = d.make(\"div\");\n    t.appendChild(e);\n    const o = {\n      text: d.isEmpty(t) ? \"\" : t.innerHTML\n    };\n    return this.insert({ data: o });\n  }\n  /**\n   * Returns Block by passed index\n   *\n   * @param {number} index - index to get. -1 to get last\n   * @returns {Block}\n   */\n  getBlockByIndex(e) {\n    return e === -1 && (e = this._blocks.length - 1), this._blocks[e];\n  }\n  /**\n   * Returns an index for passed Block\n   *\n   * @param block - block to find index\n   */\n  getBlockIndex(e) {\n    return this._blocks.indexOf(e);\n  }\n  /**\n   * Returns the Block by passed id\n   *\n   * @param id - id of block to get\n   * @returns {Block}\n   */\n  getBlockById(e) {\n    return this._blocks.array.find((t) => t.id === e);\n  }\n  /**\n   * Get Block instance by html element\n   *\n   * @param {Node} element - html element to get Block by\n   */\n  getBlock(e) {\n    d.isElement(e) || (e = e.parentNode);\n    const t = this._blocks.nodes, o = e.closest(`.${D.CSS.wrapper}`), i = t.indexOf(o);\n    if (i >= 0)\n      return this._blocks[i];\n  }\n  /**\n   * 1) Find first-level Block from passed child Node\n   * 2) Mark it as current\n   *\n   * @param {Node} childNode - look ahead from this node.\n   * @returns {Block | undefined} can return undefined in case when the passed child note is not a part of the current editor instance\n   */\n  setCurrentBlockByChildNode(e) {\n    d.isElement(e) || (e = e.parentNode);\n    const t = e.closest(`.${D.CSS.wrapper}`);\n    if (!t)\n      return;\n    const o = t.closest(`.${this.Editor.UI.CSS.editorWrapper}`);\n    if (o != null && o.isEqualNode(this.Editor.UI.nodes.wrapper))\n      return this.currentBlockIndex = this._blocks.nodes.indexOf(t), this.currentBlock.updateCurrentInput(), this.currentBlock;\n  }\n  /**\n   * Return block which contents passed node\n   *\n   * @param {Node} childNode - node to get Block by\n   * @returns {Block}\n   */\n  getBlockByChildNode(e) {\n    if (!e || !(e instanceof Node))\n      return;\n    d.isElement(e) || (e = e.parentNode);\n    const t = e.closest(`.${D.CSS.wrapper}`);\n    return this.blocks.find((o) => o.holder === t);\n  }\n  /**\n   * Swap Blocks Position\n   *\n   * @param {number} fromIndex - index of first block\n   * @param {number} toIndex - index of second block\n   * @deprecated — use 'move' instead\n   */\n  swap(e, t) {\n    this._blocks.swap(e, t), this.currentBlockIndex = t;\n  }\n  /**\n   * Move a block to a new index\n   *\n   * @param {number} toIndex - index where to move Block\n   * @param {number} fromIndex - index of Block to move\n   */\n  move(e, t = this.currentBlockIndex) {\n    if (isNaN(e) || isNaN(t)) {\n      I(\"Warning during 'move' call: incorrect indices provided.\", \"warn\");\n      return;\n    }\n    if (!this.validateIndex(e) || !this.validateIndex(t)) {\n      I(\"Warning during 'move' call: indices cannot be lower than 0 or greater than the amount of blocks.\", \"warn\");\n      return;\n    }\n    this._blocks.move(e, t), this.currentBlockIndex = e, this.blockDidMutated(Ji, this.currentBlock, {\n      fromIndex: t,\n      toIndex: e\n    });\n  }\n  /**\n   * Converts passed Block to the new Tool\n   * Uses Conversion Config\n   *\n   * @param blockToConvert - Block that should be converted\n   * @param targetToolName - name of the Tool to convert to\n   * @param blockDataOverrides - optional new Block data overrides\n   */\n  async convert(e, t, o) {\n    if (!await e.save())\n      throw new Error(\"Could not convert Block. Failed to extract original Block data.\");\n    const s = this.Editor.Tools.blockTools.get(t);\n    if (!s)\n      throw new Error(`Could not convert Block. Tool «${t}» not found.`);\n    const r = await e.exportDataAsString(), l = q(\n      r,\n      s.sanitizeConfig\n    );\n    let a = xt(l, s.conversionConfig);\n    return o && (a = Object.assign(a, o)), this.replace(e, s.name, a);\n  }\n  /**\n   * Sets current Block Index -1 which means unknown\n   * and clear highlights\n   */\n  unsetCurrentBlock() {\n    this.currentBlockIndex = -1;\n  }\n  /**\n   * Clears Editor\n   *\n   * @param {boolean} needToAddDefaultBlock - 1) in internal calls (for example, in api.blocks.render)\n   *                                             we don't need to add an empty default block\n   *                                        2) in api.blocks.clear we should add empty block\n   */\n  async clear(e = !1) {\n    const t = new Qi();\n    this.blocks.forEach((o) => {\n      t.add(async () => {\n        await this.removeBlock(o, !1);\n      });\n    }), await t.completed, this.unsetCurrentBlock(), e && this.insert(), this.Editor.UI.checkEmptiness();\n  }\n  /**\n   * Cleans up all the block tools' resources\n   * This is called when editor is destroyed\n   */\n  async destroy() {\n    await Promise.all(this.blocks.map((e) => e.destroy()));\n  }\n  /**\n   * Bind Block events\n   *\n   * @param {Block} block - Block to which event should be bound\n   */\n  bindBlockEvents(e) {\n    const { BlockEvents: t } = this.Editor;\n    this.readOnlyMutableListeners.on(e.holder, \"keydown\", (o) => {\n      t.keydown(o);\n    }), this.readOnlyMutableListeners.on(e.holder, \"keyup\", (o) => {\n      t.keyup(o);\n    }), this.readOnlyMutableListeners.on(e.holder, \"dragover\", (o) => {\n      t.dragOver(o);\n    }), this.readOnlyMutableListeners.on(e.holder, \"dragleave\", (o) => {\n      t.dragLeave(o);\n    }), e.on(\"didMutated\", (o) => this.blockDidMutated(St, o, {\n      index: this.getBlockIndex(o)\n    }));\n  }\n  /**\n   * Disable mutable handlers and bindings\n   */\n  disableModuleBindings() {\n    this.readOnlyMutableListeners.clearAll();\n  }\n  /**\n   * Enables all module handlers and bindings for all Blocks\n   */\n  enableModuleBindings() {\n    this.readOnlyMutableListeners.on(\n      document,\n      \"cut\",\n      (e) => this.Editor.BlockEvents.handleCommandX(e)\n    ), this.blocks.forEach((e) => {\n      this.bindBlockEvents(e);\n    });\n  }\n  /**\n   * Validates that the given index is not lower than 0 or higher than the amount of blocks\n   *\n   * @param {number} index - index of blocks array to validate\n   * @returns {boolean}\n   */\n  validateIndex(e) {\n    return !(e < 0 || e >= this._blocks.length);\n  }\n  /**\n   * Block mutation callback\n   *\n   * @param mutationType - what happened with block\n   * @param block - mutated block\n   * @param detailData - additional data to pass with change event\n   */\n  blockDidMutated(e, t, o) {\n    const i = new CustomEvent(e, {\n      detail: {\n        target: new G(t),\n        ...o\n      }\n    });\n    return this.eventsDispatcher.emit(Dt, {\n      event: i\n    }), t;\n  }\n}\nclass ts extends y {\n  constructor() {\n    super(...arguments), this.anyBlockSelectedCache = null, this.needToSelectAll = !1, this.nativeInputSelected = !1, this.readyToBlockSelection = !1;\n  }\n  /**\n   * Sanitizer Config\n   *\n   * @returns {SanitizerConfig}\n   */\n  get sanitizerConfig() {\n    return {\n      p: {},\n      h1: {},\n      h2: {},\n      h3: {},\n      h4: {},\n      h5: {},\n      h6: {},\n      ol: {},\n      ul: {},\n      li: {},\n      br: !0,\n      img: {\n        src: !0,\n        width: !0,\n        height: !0\n      },\n      a: {\n        href: !0\n      },\n      b: {},\n      i: {},\n      u: {}\n    };\n  }\n  /**\n   * Flag that identifies all Blocks selection\n   *\n   * @returns {boolean}\n   */\n  get allBlocksSelected() {\n    const { BlockManager: e } = this.Editor;\n    return e.blocks.every((t) => t.selected === !0);\n  }\n  /**\n   * Set selected all blocks\n   *\n   * @param {boolean} state - state to set\n   */\n  set allBlocksSelected(e) {\n    const { BlockManager: t } = this.Editor;\n    t.blocks.forEach((o) => {\n      o.selected = e;\n    }), this.clearCache();\n  }\n  /**\n   * Flag that identifies any Block selection\n   *\n   * @returns {boolean}\n   */\n  get anyBlockSelected() {\n    const { BlockManager: e } = this.Editor;\n    return this.anyBlockSelectedCache === null && (this.anyBlockSelectedCache = e.blocks.some((t) => t.selected === !0)), this.anyBlockSelectedCache;\n  }\n  /**\n   * Return selected Blocks array\n   *\n   * @returns {Block[]}\n   */\n  get selectedBlocks() {\n    return this.Editor.BlockManager.blocks.filter((e) => e.selected);\n  }\n  /**\n   * Module Preparation\n   * Registers Shortcuts CMD+A and CMD+C\n   * to select all and copy them\n   */\n  prepare() {\n    this.selection = new b(), he.add({\n      name: \"CMD+A\",\n      handler: (e) => {\n        const { BlockManager: t, ReadOnly: o } = this.Editor;\n        if (o.isEnabled) {\n          e.preventDefault(), this.selectAllBlocks();\n          return;\n        }\n        t.currentBlock && this.handleCommandA(e);\n      },\n      on: this.Editor.UI.nodes.redactor\n    });\n  }\n  /**\n   * Toggle read-only state\n   *\n   *  - Remove all ranges\n   *  - Unselect all Blocks\n   */\n  toggleReadOnly() {\n    b.get().removeAllRanges(), this.allBlocksSelected = !1;\n  }\n  /**\n   * Remove selection of Block\n   *\n   * @param {number?} index - Block index according to the BlockManager's indexes\n   */\n  unSelectBlockByIndex(e) {\n    const { BlockManager: t } = this.Editor;\n    let o;\n    isNaN(e) ? o = t.currentBlock : o = t.getBlockByIndex(e), o.selected = !1, this.clearCache();\n  }\n  /**\n   * Clear selection from Blocks\n   *\n   * @param {Event} reason - event caused clear of selection\n   * @param {boolean} restoreSelection - if true, restore saved selection\n   */\n  clearSelection(e, t = !1) {\n    const { BlockManager: o, Caret: i, RectangleSelection: s } = this.Editor;\n    this.needToSelectAll = !1, this.nativeInputSelected = !1, this.readyToBlockSelection = !1;\n    const r = e && e instanceof KeyboardEvent, l = r && Mt(e.keyCode);\n    if (this.anyBlockSelected && r && l && !b.isSelectionExists) {\n      const a = o.removeSelectedBlocks();\n      o.insertDefaultBlockAtIndex(a, !0), i.setToBlock(o.currentBlock), Oe(() => {\n        const c = e.key;\n        i.insertContentAtCaretPosition(c.length > 1 ? \"\" : c);\n      }, 20)();\n    }\n    if (this.Editor.CrossBlockSelection.clear(e), !this.anyBlockSelected || s.isRectActivated()) {\n      this.Editor.RectangleSelection.clearSelection();\n      return;\n    }\n    t && this.selection.restore(), this.allBlocksSelected = !1;\n  }\n  /**\n   * Reduce each Block and copy its content\n   *\n   * @param {ClipboardEvent} e - copy/cut event\n   * @returns {Promise<void>}\n   */\n  copySelectedBlocks(e) {\n    e.preventDefault();\n    const t = d.make(\"div\");\n    this.selectedBlocks.forEach((s) => {\n      const r = q(s.holder.innerHTML, this.sanitizerConfig), l = d.make(\"p\");\n      l.innerHTML = r, t.appendChild(l);\n    });\n    const o = Array.from(t.childNodes).map((s) => s.textContent).join(`\n\n`), i = t.innerHTML;\n    return e.clipboardData.setData(\"text/plain\", o), e.clipboardData.setData(\"text/html\", i), Promise.all(this.selectedBlocks.map((s) => s.save())).then((s) => {\n      try {\n        e.clipboardData.setData(this.Editor.Paste.MIME_TYPE, JSON.stringify(s));\n      } catch {\n      }\n    });\n  }\n  /**\n   * Select Block by its index\n   *\n   * @param {number?} index - Block index according to the BlockManager's indexes\n   */\n  selectBlockByIndex(e) {\n    const { BlockManager: t } = this.Editor, o = t.getBlockByIndex(e);\n    o !== void 0 && this.selectBlock(o);\n  }\n  /**\n   * Select passed Block\n   *\n   * @param {Block} block - Block to select\n   */\n  selectBlock(e) {\n    this.selection.save(), b.get().removeAllRanges(), e.selected = !0, this.clearCache(), this.Editor.InlineToolbar.close();\n  }\n  /**\n   * Remove selection from passed Block\n   *\n   * @param {Block} block - Block to unselect\n   */\n  unselectBlock(e) {\n    e.selected = !1, this.clearCache();\n  }\n  /**\n   * Clear anyBlockSelected cache\n   */\n  clearCache() {\n    this.anyBlockSelectedCache = null;\n  }\n  /**\n   * Module destruction\n   * De-registers Shortcut CMD+A\n   */\n  destroy() {\n    he.remove(this.Editor.UI.nodes.redactor, \"CMD+A\");\n  }\n  /**\n   * First CMD+A selects all input content by native behaviour,\n   * next CMD+A keypress selects all blocks\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  handleCommandA(e) {\n    if (this.Editor.RectangleSelection.clearSelection(), d.isNativeInput(e.target) && !this.readyToBlockSelection) {\n      this.readyToBlockSelection = !0;\n      return;\n    }\n    const t = this.Editor.BlockManager.getBlock(e.target), o = t.inputs;\n    if (o.length > 1 && !this.readyToBlockSelection) {\n      this.readyToBlockSelection = !0;\n      return;\n    }\n    if (o.length === 1 && !this.needToSelectAll) {\n      this.needToSelectAll = !0;\n      return;\n    }\n    this.needToSelectAll ? (e.preventDefault(), this.selectAllBlocks(), this.needToSelectAll = !1, this.readyToBlockSelection = !1) : this.readyToBlockSelection && (e.preventDefault(), this.selectBlock(t), this.needToSelectAll = !0);\n  }\n  /**\n   * Select All Blocks\n   * Each Block has selected setter that makes Block copyable\n   */\n  selectAllBlocks() {\n    this.selection.save(), b.get().removeAllRanges(), this.allBlocksSelected = !0, this.Editor.InlineToolbar.close();\n  }\n}\nclass Re extends y {\n  /**\n   * Allowed caret positions in input\n   *\n   * @static\n   * @returns {{START: string, END: string, DEFAULT: string}}\n   */\n  get positions() {\n    return {\n      START: \"start\",\n      END: \"end\",\n      DEFAULT: \"default\"\n    };\n  }\n  /**\n   * Elements styles that can be useful for Caret Module\n   */\n  static get CSS() {\n    return {\n      shadowCaret: \"cdx-shadow-caret\"\n    };\n  }\n  /**\n   * Method gets Block instance and puts caret to the text node with offset\n   * There two ways that method applies caret position:\n   *   - first found text node: sets at the beginning, but you can pass an offset\n   *   - last found text node: sets at the end of the node. Also, you can customize the behaviour\n   *\n   * @param {Block} block - Block class\n   * @param {string} position - position where to set caret.\n   *                            If default - leave default behaviour and apply offset if it's passed\n   * @param {number} offset - caret offset regarding to the text node\n   */\n  setToBlock(e, t = this.positions.DEFAULT, o = 0) {\n    var c;\n    const { BlockManager: i, BlockSelection: s } = this.Editor;\n    if (s.clearSelection(), !e.focusable) {\n      (c = window.getSelection()) == null || c.removeAllRanges(), s.selectBlock(e), i.currentBlock = e;\n      return;\n    }\n    let r;\n    switch (t) {\n      case this.positions.START:\n        r = e.firstInput;\n        break;\n      case this.positions.END:\n        r = e.lastInput;\n        break;\n      default:\n        r = e.currentInput;\n    }\n    if (!r)\n      return;\n    const l = d.getDeepestNode(r, t === this.positions.END), a = d.getContentLength(l);\n    switch (!0) {\n      case t === this.positions.START:\n        o = 0;\n        break;\n      case t === this.positions.END:\n      case o > a:\n        o = a;\n        break;\n    }\n    this.set(l, o), i.setCurrentBlockByChildNode(e.holder), i.currentBlock.currentInput = r;\n  }\n  /**\n   * Set caret to the current input of current Block.\n   *\n   * @param {HTMLElement} input - input where caret should be set\n   * @param {string} position - position of the caret.\n   *                            If default - leave default behaviour and apply offset if it's passed\n   * @param {number} offset - caret offset regarding to the text node\n   */\n  setToInput(e, t = this.positions.DEFAULT, o = 0) {\n    const { currentBlock: i } = this.Editor.BlockManager, s = d.getDeepestNode(e);\n    switch (t) {\n      case this.positions.START:\n        this.set(s, 0);\n        break;\n      case this.positions.END:\n        this.set(s, d.getContentLength(s));\n        break;\n      default:\n        o && this.set(s, o);\n    }\n    i.currentInput = e;\n  }\n  /**\n   * Creates Document Range and sets caret to the element with offset\n   *\n   * @param {HTMLElement} element - target node.\n   * @param {number} offset - offset\n   */\n  set(e, t = 0) {\n    const { top: i, bottom: s } = b.setCursor(e, t), { innerHeight: r } = window;\n    i < 0 ? window.scrollBy(0, i - 30) : s > r && window.scrollBy(0, s - r + 30);\n  }\n  /**\n   * Set Caret to the last Block\n   * If last block is not empty, append another empty block\n   */\n  setToTheLastBlock() {\n    const e = this.Editor.BlockManager.lastBlock;\n    if (e)\n      if (e.tool.isDefault && e.isEmpty)\n        this.setToBlock(e);\n      else {\n        const t = this.Editor.BlockManager.insertAtEnd();\n        this.setToBlock(t);\n      }\n  }\n  /**\n   * Extract content fragment of current Block from Caret position to the end of the Block\n   */\n  extractFragmentFromCaretPosition() {\n    const e = b.get();\n    if (e.rangeCount) {\n      const t = e.getRangeAt(0), o = this.Editor.BlockManager.currentBlock.currentInput;\n      if (t.deleteContents(), o)\n        if (d.isNativeInput(o)) {\n          const i = o, s = document.createDocumentFragment(), r = i.value.substring(0, i.selectionStart), l = i.value.substring(i.selectionStart);\n          return s.textContent = l, i.value = r, s;\n        } else {\n          const i = t.cloneRange();\n          return i.selectNodeContents(o), i.setStart(t.endContainer, t.endOffset), i.extractContents();\n        }\n    }\n  }\n  /**\n   * Set's caret to the next Block or Tool`s input\n   * Before moving caret, we should check if caret position is at the end of Plugins node\n   * Using {@link Dom#getDeepestNode} to get a last node and match with current selection\n   *\n   * @param {boolean} force - pass true to skip check for caret position\n   */\n  navigateNext(e = !1) {\n    const { BlockManager: t } = this.Editor, { currentBlock: o, nextBlock: i } = t;\n    if (o === void 0)\n      return !1;\n    const { nextInput: s, currentInput: r } = o, l = r !== void 0 ? Ae(r) : void 0;\n    let a = i;\n    const c = e || l || !o.focusable;\n    if (s && c)\n      return this.setToInput(s, this.positions.START), !0;\n    if (a === null) {\n      if (o.tool.isDefault || !c)\n        return !1;\n      a = t.insertAtEnd();\n    }\n    return c ? (this.setToBlock(a, this.positions.START), !0) : !1;\n  }\n  /**\n   * Set's caret to the previous Tool`s input or Block\n   * Before moving caret, we should check if caret position is start of the Plugins node\n   * Using {@link Dom#getDeepestNode} to get a last node and match with current selection\n   *\n   * @param {boolean} force - pass true to skip check for caret position\n   */\n  navigatePrevious(e = !1) {\n    const { currentBlock: t, previousBlock: o } = this.Editor.BlockManager;\n    if (!t)\n      return !1;\n    const { previousInput: i, currentInput: s } = t, r = s !== void 0 ? Me(s) : void 0, l = e || r || !t.focusable;\n    return i && l ? (this.setToInput(i, this.positions.END), !0) : o !== null && l ? (this.setToBlock(o, this.positions.END), !0) : !1;\n  }\n  /**\n   * Inserts shadow element after passed element where caret can be placed\n   *\n   * @param {Element} element - element after which shadow caret should be inserted\n   */\n  createShadow(e) {\n    const t = document.createElement(\"span\");\n    t.classList.add(Re.CSS.shadowCaret), e.insertAdjacentElement(\"beforeend\", t);\n  }\n  /**\n   * Restores caret position\n   *\n   * @param {HTMLElement} element - element where caret should be restored\n   */\n  restoreCaret(e) {\n    const t = e.querySelector(`.${Re.CSS.shadowCaret}`);\n    if (!t)\n      return;\n    new b().expandToTag(t);\n    const i = document.createRange();\n    i.selectNode(t), i.extractContents();\n  }\n  /**\n   * Inserts passed content at caret position\n   *\n   * @param {string} content - content to insert\n   */\n  insertContentAtCaretPosition(e) {\n    const t = document.createDocumentFragment(), o = document.createElement(\"div\"), i = b.get(), s = b.range;\n    o.innerHTML = e, Array.from(o.childNodes).forEach((c) => t.appendChild(c)), t.childNodes.length === 0 && t.appendChild(new Text());\n    const r = t.lastChild;\n    s.deleteContents(), s.insertNode(t);\n    const l = document.createRange(), a = r.nodeType === Node.TEXT_NODE ? r : r.firstChild;\n    a !== null && a.textContent !== null && l.setStart(a, a.textContent.length), i.removeAllRanges(), i.addRange(l);\n  }\n}\nclass os extends y {\n  constructor() {\n    super(...arguments), this.onMouseUp = () => {\n      this.listeners.off(document, \"mouseover\", this.onMouseOver), this.listeners.off(document, \"mouseup\", this.onMouseUp);\n    }, this.onMouseOver = (e) => {\n      const { BlockManager: t, BlockSelection: o } = this.Editor;\n      if (e.relatedTarget === null && e.target === null)\n        return;\n      const i = t.getBlockByChildNode(e.relatedTarget) || this.lastSelectedBlock, s = t.getBlockByChildNode(e.target);\n      if (!(!i || !s) && s !== i) {\n        if (i === this.firstSelectedBlock) {\n          b.get().removeAllRanges(), i.selected = !0, s.selected = !0, o.clearCache();\n          return;\n        }\n        if (s === this.firstSelectedBlock) {\n          i.selected = !1, s.selected = !1, o.clearCache();\n          return;\n        }\n        this.Editor.InlineToolbar.close(), this.toggleBlocksSelectedState(i, s), this.lastSelectedBlock = s;\n      }\n    };\n  }\n  /**\n   * Module preparation\n   *\n   * @returns {Promise}\n   */\n  async prepare() {\n    this.listeners.on(document, \"mousedown\", (e) => {\n      this.enableCrossBlockSelection(e);\n    });\n  }\n  /**\n   * Sets up listeners\n   *\n   * @param {MouseEvent} event - mouse down event\n   */\n  watchSelection(e) {\n    if (e.button !== wo.LEFT)\n      return;\n    const { BlockManager: t } = this.Editor;\n    this.firstSelectedBlock = t.getBlock(e.target), this.lastSelectedBlock = this.firstSelectedBlock, this.listeners.on(document, \"mouseover\", this.onMouseOver), this.listeners.on(document, \"mouseup\", this.onMouseUp);\n  }\n  /**\n   * Return boolean is cross block selection started:\n   * there should be at least 2 selected blocks\n   */\n  get isCrossBlockSelectionStarted() {\n    return !!this.firstSelectedBlock && !!this.lastSelectedBlock && this.firstSelectedBlock !== this.lastSelectedBlock;\n  }\n  /**\n   * Change selection state of the next Block\n   * Used for CBS via Shift + arrow keys\n   *\n   * @param {boolean} next - if true, toggle next block. Previous otherwise\n   */\n  toggleBlockSelectedState(e = !0) {\n    const { BlockManager: t, BlockSelection: o } = this.Editor;\n    this.lastSelectedBlock || (this.lastSelectedBlock = this.firstSelectedBlock = t.currentBlock), this.firstSelectedBlock === this.lastSelectedBlock && (this.firstSelectedBlock.selected = !0, o.clearCache(), b.get().removeAllRanges());\n    const i = t.blocks.indexOf(this.lastSelectedBlock) + (e ? 1 : -1), s = t.blocks[i];\n    s && (this.lastSelectedBlock.selected !== s.selected ? (s.selected = !0, o.clearCache()) : (this.lastSelectedBlock.selected = !1, o.clearCache()), this.lastSelectedBlock = s, this.Editor.InlineToolbar.close(), s.holder.scrollIntoView({\n      block: \"nearest\"\n    }));\n  }\n  /**\n   * Clear saved state\n   *\n   * @param {Event} reason - event caused clear of selection\n   */\n  clear(e) {\n    const { BlockManager: t, BlockSelection: o, Caret: i } = this.Editor, s = t.blocks.indexOf(this.firstSelectedBlock), r = t.blocks.indexOf(this.lastSelectedBlock);\n    if (o.anyBlockSelected && s > -1 && r > -1 && e && e instanceof KeyboardEvent)\n      switch (e.keyCode) {\n        case w.DOWN:\n        case w.RIGHT:\n          i.setToBlock(t.blocks[Math.max(s, r)], i.positions.END);\n          break;\n        case w.UP:\n        case w.LEFT:\n          i.setToBlock(t.blocks[Math.min(s, r)], i.positions.START);\n          break;\n        default:\n          i.setToBlock(t.blocks[Math.max(s, r)], i.positions.END);\n      }\n    this.firstSelectedBlock = this.lastSelectedBlock = null;\n  }\n  /**\n   * Enables Cross Block Selection\n   *\n   * @param {MouseEvent} event - mouse down event\n   */\n  enableCrossBlockSelection(e) {\n    const { UI: t } = this.Editor;\n    b.isCollapsed || this.Editor.BlockSelection.clearSelection(e), t.nodes.redactor.contains(e.target) ? this.watchSelection(e) : this.Editor.BlockSelection.clearSelection(e);\n  }\n  /**\n   * Change blocks selection state between passed two blocks.\n   *\n   * @param {Block} firstBlock - first block in range\n   * @param {Block} lastBlock - last block in range\n   */\n  toggleBlocksSelectedState(e, t) {\n    const { BlockManager: o, BlockSelection: i } = this.Editor, s = o.blocks.indexOf(e), r = o.blocks.indexOf(t), l = e.selected !== t.selected;\n    for (let a = Math.min(s, r); a <= Math.max(s, r); a++) {\n      const c = o.blocks[a];\n      c !== this.firstSelectedBlock && c !== (l ? e : t) && (o.blocks[a].selected = !o.blocks[a].selected, i.clearCache());\n    }\n  }\n}\nclass is extends y {\n  constructor() {\n    super(...arguments), this.isStartedAtEditor = !1;\n  }\n  /**\n   * Toggle read-only state\n   *\n   * if state is true:\n   *  - disable all drag-n-drop event handlers\n   *\n   * if state is false:\n   *  - restore drag-n-drop event handlers\n   *\n   * @param {boolean} readOnlyEnabled - \"read only\" state\n   */\n  toggleReadOnly(e) {\n    e ? this.disableModuleBindings() : this.enableModuleBindings();\n  }\n  /**\n   * Add drag events listeners to editor zone\n   */\n  enableModuleBindings() {\n    const { UI: e } = this.Editor;\n    this.readOnlyMutableListeners.on(e.nodes.holder, \"drop\", async (t) => {\n      await this.processDrop(t);\n    }, !0), this.readOnlyMutableListeners.on(e.nodes.holder, \"dragstart\", () => {\n      this.processDragStart();\n    }), this.readOnlyMutableListeners.on(e.nodes.holder, \"dragover\", (t) => {\n      this.processDragOver(t);\n    }, !0);\n  }\n  /**\n   * Unbind drag-n-drop event handlers\n   */\n  disableModuleBindings() {\n    this.readOnlyMutableListeners.clearAll();\n  }\n  /**\n   * Handle drop event\n   *\n   * @param {DragEvent} dropEvent - drop event\n   */\n  async processDrop(e) {\n    const {\n      BlockManager: t,\n      Paste: o,\n      Caret: i\n    } = this.Editor;\n    e.preventDefault(), t.blocks.forEach((r) => {\n      r.dropTarget = !1;\n    }), b.isAtEditor && !b.isCollapsed && this.isStartedAtEditor && document.execCommand(\"delete\"), this.isStartedAtEditor = !1;\n    const s = t.setCurrentBlockByChildNode(e.target);\n    if (s)\n      this.Editor.Caret.setToBlock(s, i.positions.END);\n    else {\n      const r = t.setCurrentBlockByChildNode(t.lastBlock.holder);\n      this.Editor.Caret.setToBlock(r, i.positions.END);\n    }\n    await o.processDataTransfer(e.dataTransfer, !0);\n  }\n  /**\n   * Handle drag start event\n   */\n  processDragStart() {\n    b.isAtEditor && !b.isCollapsed && (this.isStartedAtEditor = !0), this.Editor.InlineToolbar.close();\n  }\n  /**\n   * @param {DragEvent} dragEvent - drag event\n   */\n  processDragOver(e) {\n    e.preventDefault();\n  }\n}\nconst ss = 180, ns = 400;\nclass rs extends y {\n  /**\n   * Prepare the module\n   *\n   * @param options - options used by the modification observer module\n   * @param options.config - Editor configuration object\n   * @param options.eventsDispatcher - common Editor event bus\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    super({\n      config: e,\n      eventsDispatcher: t\n    }), this.disabled = !1, this.batchingTimeout = null, this.batchingOnChangeQueue = /* @__PURE__ */ new Map(), this.batchTime = ns, this.mutationObserver = new MutationObserver((o) => {\n      this.redactorChanged(o);\n    }), this.eventsDispatcher.on(Dt, (o) => {\n      this.particularBlockChanged(o.event);\n    }), this.eventsDispatcher.on(Rt, () => {\n      this.disable();\n    }), this.eventsDispatcher.on(Ft, () => {\n      this.enable();\n    });\n  }\n  /**\n   * Enables onChange event\n   */\n  enable() {\n    this.mutationObserver.observe(\n      this.Editor.UI.nodes.redactor,\n      {\n        childList: !0,\n        subtree: !0,\n        characterData: !0,\n        attributes: !0\n      }\n    ), this.disabled = !1;\n  }\n  /**\n   * Disables onChange event\n   */\n  disable() {\n    this.mutationObserver.disconnect(), this.disabled = !0;\n  }\n  /**\n   * Call onChange event passed to Editor.js configuration\n   *\n   * @param event - some of our custom change events\n   */\n  particularBlockChanged(e) {\n    this.disabled || !O(this.config.onChange) || (this.batchingOnChangeQueue.set(`block:${e.detail.target.id}:event:${e.type}`, e), this.batchingTimeout && clearTimeout(this.batchingTimeout), this.batchingTimeout = setTimeout(() => {\n      let t;\n      this.batchingOnChangeQueue.size === 1 ? t = this.batchingOnChangeQueue.values().next().value : t = Array.from(this.batchingOnChangeQueue.values()), this.config.onChange && this.config.onChange(this.Editor.API.methods, t), this.batchingOnChangeQueue.clear();\n    }, this.batchTime));\n  }\n  /**\n   * Fired on every blocks wrapper dom change\n   *\n   * @param mutations - mutations happened\n   */\n  redactorChanged(e) {\n    this.eventsDispatcher.emit(Je, {\n      mutations: e\n    });\n  }\n}\nconst ro = class lo extends y {\n  constructor() {\n    super(...arguments), this.MIME_TYPE = \"application/x-editor-js\", this.toolsTags = {}, this.tagsByTool = {}, this.toolsPatterns = [], this.toolsFiles = {}, this.exceptionList = [], this.processTool = (e) => {\n      try {\n        const t = e.create({}, {}, !1);\n        if (e.pasteConfig === !1) {\n          this.exceptionList.push(e.name);\n          return;\n        }\n        if (!O(t.onPaste))\n          return;\n        this.getTagsConfig(e), this.getFilesConfig(e), this.getPatternsConfig(e);\n      } catch (t) {\n        I(\n          `Paste handling for «${e.name}» Tool hasn't been set up because of the error`,\n          \"warn\",\n          t\n        );\n      }\n    }, this.handlePasteEvent = async (e) => {\n      const { BlockManager: t, Toolbar: o } = this.Editor, i = t.setCurrentBlockByChildNode(e.target);\n      !i || this.isNativeBehaviour(e.target) && !e.clipboardData.types.includes(\"Files\") || i && this.exceptionList.includes(i.name) || (e.preventDefault(), this.processDataTransfer(e.clipboardData), o.close());\n    };\n  }\n  /**\n   * Set onPaste callback and collect tools` paste configurations\n   */\n  async prepare() {\n    this.processTools();\n  }\n  /**\n   * Set read-only state\n   *\n   * @param {boolean} readOnlyEnabled - read only flag value\n   */\n  toggleReadOnly(e) {\n    e ? this.unsetCallback() : this.setCallback();\n  }\n  /**\n   * Handle pasted or dropped data transfer object\n   *\n   * @param {DataTransfer} dataTransfer - pasted or dropped data transfer object\n   * @param {boolean} isDragNDrop - true if data transfer comes from drag'n'drop events\n   */\n  async processDataTransfer(e, t = !1) {\n    const { Tools: o } = this.Editor, i = e.types;\n    if ((i.includes ? i.includes(\"Files\") : i.contains(\"Files\")) && !V(this.toolsFiles)) {\n      await this.processFiles(e.files);\n      return;\n    }\n    const r = e.getData(this.MIME_TYPE), l = e.getData(\"text/plain\");\n    let a = e.getData(\"text/html\");\n    if (r)\n      try {\n        this.insertEditorJSData(JSON.parse(r));\n        return;\n      } catch {\n      }\n    t && l.trim() && a.trim() && (a = \"<p>\" + (a.trim() ? a : l) + \"</p>\");\n    const c = Object.keys(this.toolsTags).reduce((p, g) => (p[g.toLowerCase()] = this.toolsTags[g].sanitizationConfig ?? {}, p), {}), u = Object.assign({}, c, o.getAllInlineToolsSanitizeConfig(), { br: {} }), h = q(a, u);\n    !h.trim() || h.trim() === l || !d.isHTMLString(h) ? await this.processText(l) : await this.processText(h, !0);\n  }\n  /**\n   * Process pasted text and divide them into Blocks\n   *\n   * @param {string} data - text to process. Can be HTML or plain.\n   * @param {boolean} isHTML - if passed string is HTML, this parameter should be true\n   */\n  async processText(e, t = !1) {\n    const { Caret: o, BlockManager: i } = this.Editor, s = t ? this.processHTML(e) : this.processPlain(e);\n    if (!s.length)\n      return;\n    if (s.length === 1) {\n      s[0].isBlock ? this.processSingleBlock(s.pop()) : this.processInlinePaste(s.pop());\n      return;\n    }\n    const l = i.currentBlock && i.currentBlock.tool.isDefault && i.currentBlock.isEmpty;\n    s.map(\n      async (a, c) => this.insertBlock(a, c === 0 && l)\n    ), i.currentBlock && o.setToBlock(i.currentBlock, o.positions.END);\n  }\n  /**\n   * Set onPaste callback handler\n   */\n  setCallback() {\n    this.listeners.on(this.Editor.UI.nodes.holder, \"paste\", this.handlePasteEvent);\n  }\n  /**\n   * Unset onPaste callback handler\n   */\n  unsetCallback() {\n    this.listeners.off(this.Editor.UI.nodes.holder, \"paste\", this.handlePasteEvent);\n  }\n  /**\n   * Get and process tool`s paste configs\n   */\n  processTools() {\n    const e = this.Editor.Tools.blockTools;\n    Array.from(e.values()).forEach(this.processTool);\n  }\n  /**\n   * Get tags name list from either tag name or sanitization config.\n   *\n   * @param {string | object} tagOrSanitizeConfig - tag name or sanitize config object.\n   * @returns {string[]} array of tags.\n   */\n  collectTagNames(e) {\n    return Q(e) ? [e] : R(e) ? Object.keys(e) : [];\n  }\n  /**\n   * Get tags to substitute by Tool\n   *\n   * @param tool - BlockTool object\n   */\n  getTagsConfig(e) {\n    if (e.pasteConfig === !1)\n      return;\n    const t = e.pasteConfig.tags || [], o = [];\n    t.forEach((i) => {\n      const s = this.collectTagNames(i);\n      o.push(...s), s.forEach((r) => {\n        if (Object.prototype.hasOwnProperty.call(this.toolsTags, r)) {\n          I(\n            `Paste handler for «${e.name}» Tool on «${r}» tag is skipped because it is already used by «${this.toolsTags[r].tool.name}» Tool.`,\n            \"warn\"\n          );\n          return;\n        }\n        const l = R(i) ? i[r] : null;\n        this.toolsTags[r.toUpperCase()] = {\n          tool: e,\n          sanitizationConfig: l\n        };\n      });\n    }), this.tagsByTool[e.name] = o.map((i) => i.toUpperCase());\n  }\n  /**\n   * Get files` types and extensions to substitute by Tool\n   *\n   * @param tool - BlockTool object\n   */\n  getFilesConfig(e) {\n    if (e.pasteConfig === !1)\n      return;\n    const { files: t = {} } = e.pasteConfig;\n    let { extensions: o, mimeTypes: i } = t;\n    !o && !i || (o && !Array.isArray(o) && (I(`«extensions» property of the onDrop config for «${e.name}» Tool should be an array`), o = []), i && !Array.isArray(i) && (I(`«mimeTypes» property of the onDrop config for «${e.name}» Tool should be an array`), i = []), i && (i = i.filter((s) => To(s) ? !0 : (I(`MIME type value «${s}» for the «${e.name}» Tool is not a valid MIME type`, \"warn\"), !1))), this.toolsFiles[e.name] = {\n      extensions: o || [],\n      mimeTypes: i || []\n    });\n  }\n  /**\n   * Get RegExp patterns to substitute by Tool\n   *\n   * @param tool - BlockTool object\n   */\n  getPatternsConfig(e) {\n    e.pasteConfig === !1 || !e.pasteConfig.patterns || V(e.pasteConfig.patterns) || Object.entries(e.pasteConfig.patterns).forEach(([t, o]) => {\n      o instanceof RegExp || I(\n        `Pattern ${o} for «${e.name}» Tool is skipped because it should be a Regexp instance.`,\n        \"warn\"\n      ), this.toolsPatterns.push({\n        key: t,\n        pattern: o,\n        tool: e\n      });\n    });\n  }\n  /**\n   * Check if browser behavior suits better\n   *\n   * @param {EventTarget} element - element where content has been pasted\n   * @returns {boolean}\n   */\n  isNativeBehaviour(e) {\n    return d.isNativeInput(e);\n  }\n  /**\n   * Get files from data transfer object and insert related Tools\n   *\n   * @param {FileList} items - pasted or dropped items\n   */\n  async processFiles(e) {\n    const { BlockManager: t } = this.Editor;\n    let o;\n    o = await Promise.all(\n      Array.from(e).map((r) => this.processFile(r))\n    ), o = o.filter((r) => !!r);\n    const s = t.currentBlock.tool.isDefault && t.currentBlock.isEmpty;\n    o.forEach(\n      (r, l) => {\n        t.paste(r.type, r.event, l === 0 && s);\n      }\n    );\n  }\n  /**\n   * Get information about file and find Tool to handle it\n   *\n   * @param {File} file - file to process\n   */\n  async processFile(e) {\n    const t = Bo(e), o = Object.entries(this.toolsFiles).find(([r, { mimeTypes: l, extensions: a }]) => {\n      const [c, u] = e.type.split(\"/\"), h = a.find((g) => g.toLowerCase() === t.toLowerCase()), p = l.find((g) => {\n        const [f, k] = g.split(\"/\");\n        return f === c && (k === u || k === \"*\");\n      });\n      return !!h || !!p;\n    });\n    if (!o)\n      return;\n    const [i] = o;\n    return {\n      event: this.composePasteEvent(\"file\", {\n        file: e\n      }),\n      type: i\n    };\n  }\n  /**\n   * Split HTML string to blocks and return it as array of Block data\n   *\n   * @param {string} innerHTML - html string to process\n   * @returns {PasteData[]}\n   */\n  processHTML(e) {\n    const { Tools: t } = this.Editor, o = d.make(\"DIV\");\n    return o.innerHTML = e, this.getNodes(o).map((s) => {\n      let r, l = t.defaultTool, a = !1;\n      switch (s.nodeType) {\n        case Node.DOCUMENT_FRAGMENT_NODE:\n          r = d.make(\"div\"), r.appendChild(s);\n          break;\n        case Node.ELEMENT_NODE:\n          r = s, a = !0, this.toolsTags[r.tagName] && (l = this.toolsTags[r.tagName].tool);\n          break;\n      }\n      const { tags: c } = l.pasteConfig || { tags: [] }, u = c.reduce((g, f) => (this.collectTagNames(f).forEach((C) => {\n        const S = R(f) ? f[C] : null;\n        g[C.toLowerCase()] = S || {};\n      }), g), {}), h = Object.assign({}, u, l.baseSanitizeConfig);\n      if (r.tagName.toLowerCase() === \"table\") {\n        const g = q(r.outerHTML, h);\n        r = d.make(\"div\", void 0, {\n          innerHTML: g\n        }).firstChild;\n      } else\n        r.innerHTML = q(r.innerHTML, h);\n      const p = this.composePasteEvent(\"tag\", {\n        data: r\n      });\n      return {\n        content: r,\n        isBlock: a,\n        tool: l.name,\n        event: p\n      };\n    }).filter((s) => {\n      const r = d.isEmpty(s.content), l = d.isSingleTag(s.content);\n      return !r || l;\n    });\n  }\n  /**\n   * Split plain text by new line symbols and return it as array of Block data\n   *\n   * @param {string} plain - string to process\n   * @returns {PasteData[]}\n   */\n  processPlain(e) {\n    const { defaultBlock: t } = this.config;\n    if (!e)\n      return [];\n    const o = t;\n    return e.split(/\\r?\\n/).filter((i) => i.trim()).map((i) => {\n      const s = d.make(\"div\");\n      s.textContent = i;\n      const r = this.composePasteEvent(\"tag\", {\n        data: s\n      });\n      return {\n        content: s,\n        tool: o,\n        isBlock: !1,\n        event: r\n      };\n    });\n  }\n  /**\n   * Process paste of single Block tool content\n   *\n   * @param {PasteData} dataToInsert - data of Block to insert\n   */\n  async processSingleBlock(e) {\n    const { Caret: t, BlockManager: o } = this.Editor, { currentBlock: i } = o;\n    if (!i || e.tool !== i.name || !d.containsOnlyInlineElements(e.content.innerHTML)) {\n      this.insertBlock(e, (i == null ? void 0 : i.tool.isDefault) && i.isEmpty);\n      return;\n    }\n    t.insertContentAtCaretPosition(e.content.innerHTML);\n  }\n  /**\n   * Process paste to single Block:\n   * 1. Find patterns` matches\n   * 2. Insert new block if it is not the same type as current one\n   * 3. Just insert text if there is no substitutions\n   *\n   * @param {PasteData} dataToInsert - data of Block to insert\n   */\n  async processInlinePaste(e) {\n    const { BlockManager: t, Caret: o } = this.Editor, { content: i } = e;\n    if (t.currentBlock && t.currentBlock.tool.isDefault && i.textContent.length < lo.PATTERN_PROCESSING_MAX_LENGTH) {\n      const r = await this.processPattern(i.textContent);\n      if (r) {\n        const l = t.currentBlock && t.currentBlock.tool.isDefault && t.currentBlock.isEmpty, a = t.paste(r.tool, r.event, l);\n        o.setToBlock(a, o.positions.END);\n        return;\n      }\n    }\n    if (t.currentBlock && t.currentBlock.currentInput) {\n      const r = t.currentBlock.tool.baseSanitizeConfig;\n      document.execCommand(\n        \"insertHTML\",\n        !1,\n        q(i.innerHTML, r)\n      );\n    } else\n      this.insertBlock(e);\n  }\n  /**\n   * Get patterns` matches\n   *\n   * @param {string} text - text to process\n   * @returns {Promise<{event: PasteEvent, tool: string}>}\n   */\n  async processPattern(e) {\n    const t = this.toolsPatterns.find((i) => {\n      const s = i.pattern.exec(e);\n      return s ? e === s.shift() : !1;\n    });\n    return t ? {\n      event: this.composePasteEvent(\"pattern\", {\n        key: t.key,\n        data: e\n      }),\n      tool: t.tool.name\n    } : void 0;\n  }\n  /**\n   * Insert pasted Block content to Editor\n   *\n   * @param {PasteData} data - data to insert\n   * @param {boolean} canReplaceCurrentBlock - if true and is current Block is empty, will replace current Block\n   * @returns {void}\n   */\n  insertBlock(e, t = !1) {\n    const { BlockManager: o, Caret: i } = this.Editor, { currentBlock: s } = o;\n    let r;\n    if (t && s && s.isEmpty) {\n      r = o.paste(e.tool, e.event, !0), i.setToBlock(r, i.positions.END);\n      return;\n    }\n    r = o.paste(e.tool, e.event), i.setToBlock(r, i.positions.END);\n  }\n  /**\n   * Insert data passed as application/x-editor-js JSON\n   *\n   * @param {Array} blocks — Blocks' data to insert\n   * @returns {void}\n   */\n  insertEditorJSData(e) {\n    const { BlockManager: t, Caret: o, Tools: i } = this.Editor;\n    it(\n      e,\n      (r) => i.blockTools.get(r).sanitizeConfig\n    ).forEach(({ tool: r, data: l }, a) => {\n      let c = !1;\n      a === 0 && (c = t.currentBlock && t.currentBlock.tool.isDefault && t.currentBlock.isEmpty);\n      const u = t.insert({\n        tool: r,\n        data: l,\n        replace: c\n      });\n      o.setToBlock(u, o.positions.END);\n    });\n  }\n  /**\n   * Fetch nodes from Element node\n   *\n   * @param {Node} node - current node\n   * @param {Node[]} nodes - processed nodes\n   * @param {Node} destNode - destination node\n   */\n  processElementNode(e, t, o) {\n    const i = Object.keys(this.toolsTags), s = e, { tool: r } = this.toolsTags[s.tagName] || {}, l = this.tagsByTool[r == null ? void 0 : r.name] || [], a = i.includes(s.tagName), c = d.blockElements.includes(s.tagName.toLowerCase()), u = Array.from(s.children).some(\n      ({ tagName: p }) => i.includes(p) && !l.includes(p)\n    ), h = Array.from(s.children).some(\n      ({ tagName: p }) => d.blockElements.includes(p.toLowerCase())\n    );\n    if (!c && !a && !u)\n      return o.appendChild(s), [...t, o];\n    if (a && !u || c && !h && !u)\n      return [...t, o, s];\n  }\n  /**\n   * Recursively divide HTML string to two types of nodes:\n   * 1. Block element\n   * 2. Document Fragments contained text and markup tags like a, b, i etc.\n   *\n   * @param {Node} wrapper - wrapper of paster HTML content\n   * @returns {Node[]}\n   */\n  getNodes(e) {\n    const t = Array.from(e.childNodes);\n    let o;\n    const i = (s, r) => {\n      if (d.isEmpty(r) && !d.isSingleTag(r))\n        return s;\n      const l = s[s.length - 1];\n      let a = new DocumentFragment();\n      switch (l && d.isFragment(l) && (a = s.pop()), r.nodeType) {\n        case Node.ELEMENT_NODE:\n          if (o = this.processElementNode(r, s, a), o)\n            return o;\n          break;\n        case Node.TEXT_NODE:\n          return a.appendChild(r), [...s, a];\n        default:\n          return [...s, a];\n      }\n      return [...s, ...Array.from(r.childNodes).reduce(i, [])];\n    };\n    return t.reduce(i, []);\n  }\n  /**\n   * Compose paste event with passed type and detail\n   *\n   * @param {string} type - event type\n   * @param {PasteEventDetail} detail - event detail\n   */\n  composePasteEvent(e, t) {\n    return new CustomEvent(e, {\n      detail: t\n    });\n  }\n};\nro.PATTERN_PROCESSING_MAX_LENGTH = 450;\nlet ls = ro;\nclass as extends y {\n  constructor() {\n    super(...arguments), this.toolsDontSupportReadOnly = [], this.readOnlyEnabled = !1;\n  }\n  /**\n   * Returns state of read only mode\n   */\n  get isEnabled() {\n    return this.readOnlyEnabled;\n  }\n  /**\n   * Set initial state\n   */\n  async prepare() {\n    const { Tools: e } = this.Editor, { blockTools: t } = e, o = [];\n    Array.from(t.entries()).forEach(([i, s]) => {\n      s.isReadOnlySupported || o.push(i);\n    }), this.toolsDontSupportReadOnly = o, this.config.readOnly && o.length > 0 && this.throwCriticalError(), this.toggle(this.config.readOnly, !0);\n  }\n  /**\n   * Set read-only mode or toggle current state\n   * Call all Modules `toggleReadOnly` method and re-render Editor\n   *\n   * @param state - (optional) read-only state or toggle\n   * @param isInitial - (optional) true when editor is initializing\n   */\n  async toggle(e = !this.readOnlyEnabled, t = !1) {\n    e && this.toolsDontSupportReadOnly.length > 0 && this.throwCriticalError();\n    const o = this.readOnlyEnabled;\n    this.readOnlyEnabled = e;\n    for (const s in this.Editor)\n      this.Editor[s].toggleReadOnly && this.Editor[s].toggleReadOnly(e);\n    if (o === e)\n      return this.readOnlyEnabled;\n    if (t)\n      return this.readOnlyEnabled;\n    this.Editor.ModificationsObserver.disable();\n    const i = await this.Editor.Saver.save();\n    return await this.Editor.BlockManager.clear(), await this.Editor.Renderer.render(i.blocks), this.Editor.ModificationsObserver.enable(), this.readOnlyEnabled;\n  }\n  /**\n   * Throws an error about tools which don't support read-only mode\n   */\n  throwCriticalError() {\n    throw new Pt(\n      `To enable read-only mode all connected tools should support it. Tools ${this.toolsDontSupportReadOnly.join(\", \")} don't support read-only mode.`\n    );\n  }\n}\nclass xe extends y {\n  constructor() {\n    super(...arguments), this.isRectSelectionActivated = !1, this.SCROLL_SPEED = 3, this.HEIGHT_OF_SCROLL_ZONE = 40, this.BOTTOM_SCROLL_ZONE = 1, this.TOP_SCROLL_ZONE = 2, this.MAIN_MOUSE_BUTTON = 0, this.mousedown = !1, this.isScrolling = !1, this.inScrollZone = null, this.startX = 0, this.startY = 0, this.mouseX = 0, this.mouseY = 0, this.stackOfSelected = [], this.listenerIds = [];\n  }\n  /**\n   * CSS classes for the Block\n   *\n   * @returns {{wrapper: string, content: string}}\n   */\n  static get CSS() {\n    return {\n      overlay: \"codex-editor-overlay\",\n      overlayContainer: \"codex-editor-overlay__container\",\n      rect: \"codex-editor-overlay__rectangle\",\n      topScrollZone: \"codex-editor-overlay__scroll-zone--top\",\n      bottomScrollZone: \"codex-editor-overlay__scroll-zone--bottom\"\n    };\n  }\n  /**\n   * Module Preparation\n   * Creating rect and hang handlers\n   */\n  prepare() {\n    this.enableModuleBindings();\n  }\n  /**\n   * Init rect params\n   *\n   * @param {number} pageX - X coord of mouse\n   * @param {number} pageY - Y coord of mouse\n   */\n  startSelection(e, t) {\n    const o = document.elementFromPoint(e - window.pageXOffset, t - window.pageYOffset);\n    o.closest(`.${this.Editor.Toolbar.CSS.toolbar}`) || (this.Editor.BlockSelection.allBlocksSelected = !1, this.clearSelection(), this.stackOfSelected = []);\n    const s = [\n      `.${D.CSS.content}`,\n      `.${this.Editor.Toolbar.CSS.toolbar}`,\n      `.${this.Editor.InlineToolbar.CSS.inlineToolbar}`\n    ], r = o.closest(\".\" + this.Editor.UI.CSS.editorWrapper), l = s.some((a) => !!o.closest(a));\n    !r || l || (this.mousedown = !0, this.startX = e, this.startY = t);\n  }\n  /**\n   * Clear all params to end selection\n   */\n  endSelection() {\n    this.mousedown = !1, this.startX = 0, this.startY = 0, this.overlayRectangle.style.display = \"none\";\n  }\n  /**\n   * is RectSelection Activated\n   */\n  isRectActivated() {\n    return this.isRectSelectionActivated;\n  }\n  /**\n   * Mark that selection is end\n   */\n  clearSelection() {\n    this.isRectSelectionActivated = !1;\n  }\n  /**\n   * Sets Module necessary event handlers\n   */\n  enableModuleBindings() {\n    const { container: e } = this.genHTML();\n    this.listeners.on(e, \"mousedown\", (t) => {\n      this.processMouseDown(t);\n    }, !1), this.listeners.on(document.body, \"mousemove\", Ve((t) => {\n      this.processMouseMove(t);\n    }, 10), {\n      passive: !0\n    }), this.listeners.on(document.body, \"mouseleave\", () => {\n      this.processMouseLeave();\n    }), this.listeners.on(window, \"scroll\", Ve((t) => {\n      this.processScroll(t);\n    }, 10), {\n      passive: !0\n    }), this.listeners.on(document.body, \"mouseup\", () => {\n      this.processMouseUp();\n    }, !1);\n  }\n  /**\n   * Handle mouse down events\n   *\n   * @param {MouseEvent} mouseEvent - mouse event payload\n   */\n  processMouseDown(e) {\n    if (e.button !== this.MAIN_MOUSE_BUTTON)\n      return;\n    e.target.closest(d.allInputsSelector) !== null || this.startSelection(e.pageX, e.pageY);\n  }\n  /**\n   * Handle mouse move events\n   *\n   * @param {MouseEvent} mouseEvent - mouse event payload\n   */\n  processMouseMove(e) {\n    this.changingRectangle(e), this.scrollByZones(e.clientY);\n  }\n  /**\n   * Handle mouse leave\n   */\n  processMouseLeave() {\n    this.clearSelection(), this.endSelection();\n  }\n  /**\n   * @param {MouseEvent} mouseEvent - mouse event payload\n   */\n  processScroll(e) {\n    this.changingRectangle(e);\n  }\n  /**\n   * Handle mouse up\n   */\n  processMouseUp() {\n    this.clearSelection(), this.endSelection();\n  }\n  /**\n   * Scroll If mouse in scroll zone\n   *\n   * @param {number} clientY - Y coord of mouse\n   */\n  scrollByZones(e) {\n    if (this.inScrollZone = null, e <= this.HEIGHT_OF_SCROLL_ZONE && (this.inScrollZone = this.TOP_SCROLL_ZONE), document.documentElement.clientHeight - e <= this.HEIGHT_OF_SCROLL_ZONE && (this.inScrollZone = this.BOTTOM_SCROLL_ZONE), !this.inScrollZone) {\n      this.isScrolling = !1;\n      return;\n    }\n    this.isScrolling || (this.scrollVertical(this.inScrollZone === this.TOP_SCROLL_ZONE ? -this.SCROLL_SPEED : this.SCROLL_SPEED), this.isScrolling = !0);\n  }\n  /**\n   * Generates required HTML elements\n   *\n   * @returns {Object<string, Element>}\n   */\n  genHTML() {\n    const { UI: e } = this.Editor, t = e.nodes.holder.querySelector(\".\" + e.CSS.editorWrapper), o = d.make(\"div\", xe.CSS.overlay, {}), i = d.make(\"div\", xe.CSS.overlayContainer, {}), s = d.make(\"div\", xe.CSS.rect, {});\n    return i.appendChild(s), o.appendChild(i), t.appendChild(o), this.overlayRectangle = s, {\n      container: t,\n      overlay: o\n    };\n  }\n  /**\n   * Activates scrolling if blockSelection is active and mouse is in scroll zone\n   *\n   * @param {number} speed - speed of scrolling\n   */\n  scrollVertical(e) {\n    if (!(this.inScrollZone && this.mousedown))\n      return;\n    const t = window.pageYOffset;\n    window.scrollBy(0, e), this.mouseY += window.pageYOffset - t, setTimeout(() => {\n      this.scrollVertical(e);\n    }, 0);\n  }\n  /**\n   * Handles the change in the rectangle and its effect\n   *\n   * @param {MouseEvent} event - mouse event\n   */\n  changingRectangle(e) {\n    if (!this.mousedown)\n      return;\n    e.pageY !== void 0 && (this.mouseX = e.pageX, this.mouseY = e.pageY);\n    const { rightPos: t, leftPos: o, index: i } = this.genInfoForMouseSelection(), s = this.startX > t && this.mouseX > t, r = this.startX < o && this.mouseX < o;\n    this.rectCrossesBlocks = !(s || r), this.isRectSelectionActivated || (this.rectCrossesBlocks = !1, this.isRectSelectionActivated = !0, this.shrinkRectangleToPoint(), this.overlayRectangle.style.display = \"block\"), this.updateRectangleSize(), this.Editor.Toolbar.close(), i !== void 0 && (this.trySelectNextBlock(i), this.inverseSelection(), b.get().removeAllRanges());\n  }\n  /**\n   * Shrink rect to singular point\n   */\n  shrinkRectangleToPoint() {\n    this.overlayRectangle.style.left = `${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.top = `${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.bottom = `calc(100% - ${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.right = `calc(100% - ${this.startX - window.pageXOffset}px`;\n  }\n  /**\n   * Select or unselect all of blocks in array if rect is out or in selectable area\n   */\n  inverseSelection() {\n    const t = this.Editor.BlockManager.getBlockByIndex(this.stackOfSelected[0]).selected;\n    if (this.rectCrossesBlocks && !t)\n      for (const o of this.stackOfSelected)\n        this.Editor.BlockSelection.selectBlockByIndex(o);\n    if (!this.rectCrossesBlocks && t)\n      for (const o of this.stackOfSelected)\n        this.Editor.BlockSelection.unSelectBlockByIndex(o);\n  }\n  /**\n   * Updates size of rectangle\n   */\n  updateRectangleSize() {\n    this.mouseY >= this.startY ? (this.overlayRectangle.style.top = `${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.bottom = `calc(100% - ${this.mouseY - window.pageYOffset}px`) : (this.overlayRectangle.style.bottom = `calc(100% - ${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.top = `${this.mouseY - window.pageYOffset}px`), this.mouseX >= this.startX ? (this.overlayRectangle.style.left = `${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.right = `calc(100% - ${this.mouseX - window.pageXOffset}px`) : (this.overlayRectangle.style.right = `calc(100% - ${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.left = `${this.mouseX - window.pageXOffset}px`);\n  }\n  /**\n   * Collects information needed to determine the behavior of the rectangle\n   *\n   * @returns {object} index - index next Block, leftPos - start of left border of Block, rightPos - right border\n   */\n  genInfoForMouseSelection() {\n    const t = document.body.offsetWidth / 2, o = this.mouseY - window.pageYOffset, i = document.elementFromPoint(t, o), s = this.Editor.BlockManager.getBlockByChildNode(i);\n    let r;\n    s !== void 0 && (r = this.Editor.BlockManager.blocks.findIndex((h) => h.holder === s.holder));\n    const l = this.Editor.BlockManager.lastBlock.holder.querySelector(\".\" + D.CSS.content), a = Number.parseInt(window.getComputedStyle(l).width, 10) / 2, c = t - a, u = t + a;\n    return {\n      index: r,\n      leftPos: c,\n      rightPos: u\n    };\n  }\n  /**\n   * Select block with index index\n   *\n   * @param index - index of block in redactor\n   */\n  addBlockInSelection(e) {\n    this.rectCrossesBlocks && this.Editor.BlockSelection.selectBlockByIndex(e), this.stackOfSelected.push(e);\n  }\n  /**\n   * Adds a block to the selection and determines which blocks should be selected\n   *\n   * @param {object} index - index of new block in the reactor\n   */\n  trySelectNextBlock(e) {\n    const t = this.stackOfSelected[this.stackOfSelected.length - 1] === e, o = this.stackOfSelected.length, i = 1, s = -1, r = 0;\n    if (t)\n      return;\n    const l = this.stackOfSelected[o - 1] - this.stackOfSelected[o - 2] > 0;\n    let a = r;\n    o > 1 && (a = l ? i : s);\n    const c = e > this.stackOfSelected[o - 1] && a === i, u = e < this.stackOfSelected[o - 1] && a === s, p = !(c || u || a === r);\n    if (!p && (e > this.stackOfSelected[o - 1] || this.stackOfSelected[o - 1] === void 0)) {\n      let k = this.stackOfSelected[o - 1] + 1 || e;\n      for (k; k <= e; k++)\n        this.addBlockInSelection(k);\n      return;\n    }\n    if (!p && e < this.stackOfSelected[o - 1]) {\n      for (let k = this.stackOfSelected[o - 1] - 1; k >= e; k--)\n        this.addBlockInSelection(k);\n      return;\n    }\n    if (!p)\n      return;\n    let g = o - 1, f;\n    for (e > this.stackOfSelected[o - 1] ? f = () => e > this.stackOfSelected[g] : f = () => e < this.stackOfSelected[g]; f(); )\n      this.rectCrossesBlocks && this.Editor.BlockSelection.unSelectBlockByIndex(this.stackOfSelected[g]), this.stackOfSelected.pop(), g--;\n  }\n}\nclass cs extends y {\n  /**\n   * Renders passed blocks as one batch\n   *\n   * @param blocksData - blocks to render\n   */\n  async render(e) {\n    return new Promise((t) => {\n      const { Tools: o, BlockManager: i } = this.Editor;\n      if (e.length === 0)\n        i.insert();\n      else {\n        const s = e.map(({ type: r, data: l, tunes: a, id: c }) => {\n          o.available.has(r) === !1 && (X(`Tool «${r}» is not found. Check 'tools' property at the Editor.js config.`, \"warn\"), l = this.composeStubDataForTool(r, l, c), r = o.stubTool);\n          let u;\n          try {\n            u = i.composeBlock({\n              id: c,\n              tool: r,\n              data: l,\n              tunes: a\n            });\n          } catch (h) {\n            I(`Block «${r}» skipped because of plugins error`, \"error\", {\n              data: l,\n              error: h\n            }), l = this.composeStubDataForTool(r, l, c), r = o.stubTool, u = i.composeBlock({\n              id: c,\n              tool: r,\n              data: l,\n              tunes: a\n            });\n          }\n          return u;\n        });\n        i.insertMany(s);\n      }\n      window.requestIdleCallback(() => {\n        t();\n      }, { timeout: 2e3 });\n    });\n  }\n  /**\n   * Create data for the Stub Tool that will be used instead of unavailable tool\n   *\n   * @param tool - unavailable tool name to stub\n   * @param data - data of unavailable block\n   * @param [id] - id of unavailable block\n   */\n  composeStubDataForTool(e, t, o) {\n    const { Tools: i } = this.Editor;\n    let s = e;\n    if (i.unavailable.has(e)) {\n      const r = i.unavailable.get(e).toolbox;\n      r !== void 0 && r[0].title !== void 0 && (s = r[0].title);\n    }\n    return {\n      savedData: {\n        id: o,\n        type: e,\n        data: t\n      },\n      title: s\n    };\n  }\n}\nclass ds extends y {\n  /**\n   * Composes new chain of Promises to fire them alternatelly\n   *\n   * @returns {OutputData}\n   */\n  async save() {\n    const { BlockManager: e, Tools: t } = this.Editor, o = e.blocks, i = [];\n    try {\n      o.forEach((l) => {\n        i.push(this.getSavedData(l));\n      });\n      const s = await Promise.all(i), r = await it(s, (l) => t.blockTools.get(l).sanitizeConfig);\n      return this.makeOutput(r);\n    } catch (s) {\n      X(\"Saving failed due to the Error %o\", \"error\", s);\n    }\n  }\n  /**\n   * Saves and validates\n   *\n   * @param {Block} block - Editor's Tool\n   * @returns {ValidatedData} - Tool's validated data\n   */\n  async getSavedData(e) {\n    const t = await e.save(), o = t && await e.validate(t.data);\n    return {\n      ...t,\n      isValid: o\n    };\n  }\n  /**\n   * Creates output object with saved data, time and version of editor\n   *\n   * @param {ValidatedData} allExtractedData - data extracted from Blocks\n   * @returns {OutputData}\n   */\n  makeOutput(e) {\n    const t = [];\n    return e.forEach(({ id: o, tool: i, data: s, tunes: r, isValid: l }) => {\n      if (!l) {\n        I(`Block «${i}» skipped because saved data is invalid`);\n        return;\n      }\n      if (i === this.Editor.Tools.stubTool) {\n        t.push(s);\n        return;\n      }\n      const a = {\n        id: o,\n        type: i,\n        data: s,\n        ...!V(r) && {\n          tunes: r\n        }\n      };\n      t.push(a);\n    }), {\n      time: +/* @__PURE__ */ new Date(),\n      blocks: t,\n      version: \"2.30.6\"\n    };\n  }\n}\n(function() {\n  try {\n    if (typeof document < \"u\") {\n      var n = document.createElement(\"style\");\n      n.appendChild(document.createTextNode(\".ce-paragraph{line-height:1.6em;outline:none}.ce-block:only-of-type .ce-paragraph[data-placeholder-active]:empty:before,.ce-block:only-of-type .ce-paragraph[data-placeholder-active][data-empty=true]:before{content:attr(data-placeholder-active)}.ce-paragraph p:first-of-type{margin-top:0}.ce-paragraph p:last-of-type{margin-bottom:0}\")), document.head.appendChild(n);\n    }\n  } catch (e) {\n    console.error(\"vite-plugin-css-injected-by-js\", e);\n  }\n})();\nconst hs = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8 9V7.2C8 7.08954 8.08954 7 8.2 7L12 7M16 9V7.2C16 7.08954 15.9105 7 15.8 7L12 7M12 7L12 17M12 17H10M12 17H14\"/></svg>';\nfunction us(n) {\n  const e = document.createElement(\"div\");\n  e.innerHTML = n.trim();\n  const t = document.createDocumentFragment();\n  return t.append(...Array.from(e.childNodes)), t;\n}\n/**\n * Base Paragraph Block for the Editor.js.\n * Represents a regular text block\n *\n * @author CodeX (team@codex.so)\n * @copyright CodeX 2018\n * @license The MIT License (MIT)\n */\nclass ht {\n  /**\n   * Default placeholder for Paragraph Tool\n   *\n   * @returns {string}\n   * @class\n   */\n  static get DEFAULT_PLACEHOLDER() {\n    return \"\";\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {object} params - constructor params\n   * @param {ParagraphData} params.data - previously saved data\n   * @param {ParagraphConfig} params.config - user config for Tool\n   * @param {object} params.api - editor.js api\n   * @param {boolean} readOnly - read only mode flag\n   */\n  constructor({ data: e, config: t, api: o, readOnly: i }) {\n    this.api = o, this.readOnly = i, this._CSS = {\n      block: this.api.styles.block,\n      wrapper: \"ce-paragraph\"\n    }, this.readOnly || (this.onKeyUp = this.onKeyUp.bind(this)), this._placeholder = t.placeholder ? t.placeholder : ht.DEFAULT_PLACEHOLDER, this._data = e ?? {}, this._element = null, this._preserveBlank = t.preserveBlank ?? !1;\n  }\n  /**\n   * Check if text content is empty and set empty string to inner html.\n   * We need this because some browsers (e.g. Safari) insert <br> into empty contenteditanle elements\n   *\n   * @param {KeyboardEvent} e - key up event\n   */\n  onKeyUp(e) {\n    if (e.code !== \"Backspace\" && e.code !== \"Delete\" || !this._element)\n      return;\n    const { textContent: t } = this._element;\n    t === \"\" && (this._element.innerHTML = \"\");\n  }\n  /**\n   * Create Tool's view\n   *\n   * @returns {HTMLDivElement}\n   * @private\n   */\n  drawView() {\n    const e = document.createElement(\"DIV\");\n    return e.classList.add(this._CSS.wrapper, this._CSS.block), e.contentEditable = \"false\", e.dataset.placeholderActive = this.api.i18n.t(this._placeholder), this._data.text && (e.innerHTML = this._data.text), this.readOnly || (e.contentEditable = \"true\", e.addEventListener(\"keyup\", this.onKeyUp)), e;\n  }\n  /**\n   * Return Tool's view\n   *\n   * @returns {HTMLDivElement}\n   */\n  render() {\n    return this._element = this.drawView(), this._element;\n  }\n  /**\n   * Method that specified how to merge two Text blocks.\n   * Called by Editor.js by backspace at the beginning of the Block\n   *\n   * @param {ParagraphData} data\n   * @public\n   */\n  merge(e) {\n    if (!this._element)\n      return;\n    this._data.text += e.text;\n    const t = us(e.text);\n    this._element.appendChild(t), this._element.normalize();\n  }\n  /**\n   * Validate Paragraph block data:\n   * - check for emptiness\n   *\n   * @param {ParagraphData} savedData — data received after saving\n   * @returns {boolean} false if saved data is not correct, otherwise true\n   * @public\n   */\n  validate(e) {\n    return !(e.text.trim() === \"\" && !this._preserveBlank);\n  }\n  /**\n   * Extract Tool's data from the view\n   *\n   * @param {HTMLDivElement} toolsContent - Paragraph tools rendered view\n   * @returns {ParagraphData} - saved data\n   * @public\n   */\n  save(e) {\n    return {\n      text: e.innerHTML\n    };\n  }\n  /**\n   * On paste callback fired from Editor.\n   *\n   * @param {HTMLPasteEvent} event - event with pasted data\n   */\n  onPaste(e) {\n    const t = {\n      text: e.detail.data.innerHTML\n    };\n    this._data = t, window.requestAnimationFrame(() => {\n      this._element && (this._element.innerHTML = this._data.text || \"\");\n    });\n  }\n  /**\n   * Enable Conversion Toolbar. Paragraph can be converted to/from other tools\n   * @returns {ConversionConfig}\n   */\n  static get conversionConfig() {\n    return {\n      export: \"text\",\n      // to convert Paragraph to other block, use 'text' property of saved data\n      import: \"text\"\n      // to covert other block's exported string to Paragraph, fill 'text' property of tool data\n    };\n  }\n  /**\n   * Sanitizer rules\n   * @returns {SanitizerConfig} - Edtior.js sanitizer config\n   */\n  static get sanitize() {\n    return {\n      text: {\n        br: !0\n      }\n    };\n  }\n  /**\n   * Returns true to notify the core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Used by Editor paste handling API.\n   * Provides configuration to handle P tags.\n   *\n   * @returns {PasteConfig} - Paragraph Paste Setting\n   */\n  static get pasteConfig() {\n    return {\n      tags: [\"P\"]\n    };\n  }\n  /**\n   * Icon and title for displaying at the Toolbox\n   *\n   * @returns {ToolboxConfig} - Paragraph Toolbox Setting\n   */\n  static get toolbox() {\n    return {\n      icon: hs,\n      title: \"Text\"\n    };\n  }\n}\nclass ut {\n  constructor() {\n    this.commandName = \"bold\";\n  }\n  /**\n   * Sanitizer Rule\n   * Leave <b> tags\n   *\n   * @returns {object}\n   */\n  static get sanitize() {\n    return {\n      b: {}\n    };\n  }\n  /**\n   * Create button for Inline Toolbar\n   */\n  render() {\n    return {\n      icon: bi,\n      name: \"bold\",\n      onActivate: () => {\n        document.execCommand(this.commandName);\n      },\n      isActive: () => document.queryCommandState(this.commandName)\n    };\n  }\n  /**\n   * Set a shortcut\n   *\n   * @returns {boolean}\n   */\n  get shortcut() {\n    return \"CMD+B\";\n  }\n}\nut.isInline = !0;\nut.title = \"Bold\";\nclass pt {\n  constructor() {\n    this.commandName = \"italic\", this.CSS = {\n      button: \"ce-inline-tool\",\n      buttonActive: \"ce-inline-tool--active\",\n      buttonModifier: \"ce-inline-tool--italic\"\n    }, this.nodes = {\n      button: null\n    };\n  }\n  /**\n   * Sanitizer Rule\n   * Leave <i> tags\n   *\n   * @returns {object}\n   */\n  static get sanitize() {\n    return {\n      i: {}\n    };\n  }\n  /**\n   * Create button for Inline Toolbar\n   */\n  render() {\n    return this.nodes.button = document.createElement(\"button\"), this.nodes.button.type = \"button\", this.nodes.button.classList.add(this.CSS.button, this.CSS.buttonModifier), this.nodes.button.innerHTML = Bi, this.nodes.button;\n  }\n  /**\n   * Wrap range with <i> tag\n   */\n  surround() {\n    document.execCommand(this.commandName);\n  }\n  /**\n   * Check selection and set activated state to button if there are <i> tag\n   */\n  checkState() {\n    const e = document.queryCommandState(this.commandName);\n    return this.nodes.button.classList.toggle(this.CSS.buttonActive, e), e;\n  }\n  /**\n   * Set a shortcut\n   */\n  get shortcut() {\n    return \"CMD+I\";\n  }\n}\npt.isInline = !0;\npt.title = \"Italic\";\nclass ft {\n  /**\n   * @param api - Editor.js API\n   */\n  constructor({ api: e }) {\n    this.commandLink = \"createLink\", this.commandUnlink = \"unlink\", this.ENTER_KEY = 13, this.CSS = {\n      button: \"ce-inline-tool\",\n      buttonActive: \"ce-inline-tool--active\",\n      buttonModifier: \"ce-inline-tool--link\",\n      buttonUnlink: \"ce-inline-tool--unlink\",\n      input: \"ce-inline-tool-input\",\n      inputShowed: \"ce-inline-tool-input--showed\"\n    }, this.nodes = {\n      button: null,\n      input: null\n    }, this.inputOpened = !1, this.toolbar = e.toolbar, this.inlineToolbar = e.inlineToolbar, this.notifier = e.notifier, this.i18n = e.i18n, this.selection = new b();\n  }\n  /**\n   * Sanitizer Rule\n   * Leave <a> tags\n   *\n   * @returns {object}\n   */\n  static get sanitize() {\n    return {\n      a: {\n        href: !0,\n        target: \"_blank\",\n        rel: \"nofollow\"\n      }\n    };\n  }\n  /**\n   * Create button for Inline Toolbar\n   */\n  render() {\n    return this.nodes.button = document.createElement(\"button\"), this.nodes.button.type = \"button\", this.nodes.button.classList.add(this.CSS.button, this.CSS.buttonModifier), this.nodes.button.innerHTML = yt, this.nodes.button;\n  }\n  /**\n   * Input for the link\n   */\n  renderActions() {\n    return this.nodes.input = document.createElement(\"input\"), this.nodes.input.placeholder = this.i18n.t(\"Add a link\"), this.nodes.input.enterKeyHint = \"done\", this.nodes.input.classList.add(this.CSS.input), this.nodes.input.addEventListener(\"keydown\", (e) => {\n      e.keyCode === this.ENTER_KEY && this.enterPressed(e);\n    }), this.nodes.input;\n  }\n  /**\n   * Handle clicks on the Inline Toolbar icon\n   *\n   * @param {Range} range - range to wrap with link\n   */\n  surround(e) {\n    if (e) {\n      this.inputOpened ? (this.selection.restore(), this.selection.removeFakeBackground()) : (this.selection.setFakeBackground(), this.selection.save());\n      const t = this.selection.findParentTag(\"A\");\n      if (t) {\n        this.selection.expandToTag(t), this.unlink(), this.closeActions(), this.checkState(), this.toolbar.close();\n        return;\n      }\n    }\n    this.toggleActions();\n  }\n  /**\n   * Check selection and set activated state to button if there are <a> tag\n   */\n  checkState() {\n    const e = this.selection.findParentTag(\"A\");\n    if (e) {\n      this.nodes.button.innerHTML = Ii, this.nodes.button.classList.add(this.CSS.buttonUnlink), this.nodes.button.classList.add(this.CSS.buttonActive), this.openActions();\n      const t = e.getAttribute(\"href\");\n      this.nodes.input.value = t !== \"null\" ? t : \"\", this.selection.save();\n    } else\n      this.nodes.button.innerHTML = yt, this.nodes.button.classList.remove(this.CSS.buttonUnlink), this.nodes.button.classList.remove(this.CSS.buttonActive);\n    return !!e;\n  }\n  /**\n   * Function called with Inline Toolbar closing\n   */\n  clear() {\n    this.closeActions();\n  }\n  /**\n   * Set a shortcut\n   */\n  get shortcut() {\n    return \"CMD+K\";\n  }\n  /**\n   * Show/close link input\n   */\n  toggleActions() {\n    this.inputOpened ? this.closeActions(!1) : this.openActions(!0);\n  }\n  /**\n   * @param {boolean} needFocus - on link creation we need to focus input. On editing - nope.\n   */\n  openActions(e = !1) {\n    this.nodes.input.classList.add(this.CSS.inputShowed), e && this.nodes.input.focus(), this.inputOpened = !0;\n  }\n  /**\n   * Close input\n   *\n   * @param {boolean} clearSavedSelection — we don't need to clear saved selection\n   *                                        on toggle-clicks on the icon of opened Toolbar\n   */\n  closeActions(e = !0) {\n    if (this.selection.isFakeBackgroundEnabled) {\n      const t = new b();\n      t.save(), this.selection.restore(), this.selection.removeFakeBackground(), t.restore();\n    }\n    this.nodes.input.classList.remove(this.CSS.inputShowed), this.nodes.input.value = \"\", e && this.selection.clearSaved(), this.inputOpened = !1;\n  }\n  /**\n   * Enter pressed on input\n   *\n   * @param {KeyboardEvent} event - enter keydown event\n   */\n  enterPressed(e) {\n    let t = this.nodes.input.value || \"\";\n    if (!t.trim()) {\n      this.selection.restore(), this.unlink(), e.preventDefault(), this.closeActions();\n      return;\n    }\n    if (!this.validateURL(t)) {\n      this.notifier.show({\n        message: \"Pasted link is not valid.\",\n        style: \"error\"\n      }), I(\"Incorrect Link pasted\", \"warn\", t);\n      return;\n    }\n    t = this.prepareLink(t), this.selection.restore(), this.selection.removeFakeBackground(), this.insertLink(t), e.preventDefault(), e.stopPropagation(), e.stopImmediatePropagation(), this.selection.collapseToEnd(), this.inlineToolbar.close();\n  }\n  /**\n   * Detects if passed string is URL\n   *\n   * @param {string} str - string to validate\n   * @returns {boolean}\n   */\n  validateURL(e) {\n    return !/\\s/.test(e);\n  }\n  /**\n   * Process link before injection\n   * - sanitize\n   * - add protocol for links like 'google.com'\n   *\n   * @param {string} link - raw user input\n   */\n  prepareLink(e) {\n    return e = e.trim(), e = this.addProtocol(e), e;\n  }\n  /**\n   * Add 'http' protocol to the links like 'vc.ru', 'google.com'\n   *\n   * @param {string} link - string to process\n   */\n  addProtocol(e) {\n    if (/^(\\w+):(\\/\\/)?/.test(e))\n      return e;\n    const t = /^\\/[^/\\s]/.test(e), o = e.substring(0, 1) === \"#\", i = /^\\/\\/[^/\\s]/.test(e);\n    return !t && !o && !i && (e = \"http://\" + e), e;\n  }\n  /**\n   * Inserts <a> tag with \"href\"\n   *\n   * @param {string} link - \"href\" value\n   */\n  insertLink(e) {\n    const t = this.selection.findParentTag(\"A\");\n    t && this.selection.expandToTag(t), document.execCommand(this.commandLink, !1, e);\n  }\n  /**\n   * Removes <a> tag\n   */\n  unlink() {\n    document.execCommand(this.commandUnlink);\n  }\n}\nft.isInline = !0;\nft.title = \"Link\";\nclass ao {\n  /**\n   * @param api - Editor.js API\n   */\n  constructor({ api: e }) {\n    this.i18nAPI = e.i18n, this.blocksAPI = e.blocks, this.selectionAPI = e.selection, this.toolsAPI = e.tools, this.caretAPI = e.caret;\n  }\n  /**\n   * Returns tool's UI config\n   */\n  async render() {\n    const e = b.get(), t = this.blocksAPI.getBlockByElement(e.anchorNode);\n    if (t === void 0)\n      return [];\n    const o = this.toolsAPI.getBlockTools(), i = await zt(t, o);\n    if (i.length === 0)\n      return [];\n    const s = i.reduce((c, u) => {\n      var h;\n      return (h = u.toolbox) == null || h.forEach((p) => {\n        c.push({\n          icon: p.icon,\n          title: z.t(K.toolNames, p.title),\n          name: u.name,\n          closeOnActivate: !0,\n          onActivate: async () => {\n            const g = await this.blocksAPI.convert(t.id, u.name, p.data);\n            this.caretAPI.setToBlock(g, \"end\");\n          }\n        });\n      }), c;\n    }, []), r = await t.getActiveToolboxEntry(), l = r !== void 0 ? r.icon : Kt, a = !pe();\n    return {\n      icon: l,\n      name: \"convert-to\",\n      hint: {\n        title: this.i18nAPI.t(\"Convert to\")\n      },\n      children: {\n        searchable: a,\n        items: s,\n        onOpen: () => {\n          a && (this.selectionAPI.setFakeBackground(), this.selectionAPI.save());\n        },\n        onClose: () => {\n          a && (this.selectionAPI.restore(), this.selectionAPI.removeFakeBackground());\n        }\n      }\n    };\n  }\n}\nao.isInline = !0;\nclass co {\n  /**\n   * @param options - constructor options\n   * @param options.data - stub tool data\n   * @param options.api - Editor.js API\n   */\n  constructor({ data: e, api: t }) {\n    this.CSS = {\n      wrapper: \"ce-stub\",\n      info: \"ce-stub__info\",\n      title: \"ce-stub__title\",\n      subtitle: \"ce-stub__subtitle\"\n    }, this.api = t, this.title = e.title || this.api.i18n.t(\"Error\"), this.subtitle = this.api.i18n.t(\"The block can not be displayed correctly.\"), this.savedData = e.savedData, this.wrapper = this.make();\n  }\n  /**\n   * Returns stub holder\n   *\n   * @returns {HTMLElement}\n   */\n  render() {\n    return this.wrapper;\n  }\n  /**\n   * Return original Tool data\n   *\n   * @returns {BlockToolData}\n   */\n  save() {\n    return this.savedData;\n  }\n  /**\n   * Create Tool html markup\n   *\n   * @returns {HTMLElement}\n   */\n  make() {\n    const e = d.make(\"div\", this.CSS.wrapper), t = Mi, o = d.make(\"div\", this.CSS.info), i = d.make(\"div\", this.CSS.title, {\n      textContent: this.title\n    }), s = d.make(\"div\", this.CSS.subtitle, {\n      textContent: this.subtitle\n    });\n    return e.innerHTML = t, o.appendChild(i), o.appendChild(s), e.appendChild(o), e;\n  }\n}\nco.isReadOnlySupported = !0;\nclass ps extends dt {\n  constructor() {\n    super(...arguments), this.type = ne.Inline;\n  }\n  /**\n   * Returns title for Inline Tool if specified by user\n   */\n  get title() {\n    return this.constructable[ct.Title];\n  }\n  /**\n   * Constructs new InlineTool instance from constructable\n   */\n  create() {\n    return new this.constructable({\n      api: this.api,\n      config: this.settings\n    });\n  }\n}\nclass fs extends dt {\n  constructor() {\n    super(...arguments), this.type = ne.Tune;\n  }\n  /**\n   * Constructs new BlockTune instance from constructable\n   *\n   * @param data - Tune data\n   * @param block - Block API object\n   */\n  create(e, t) {\n    return new this.constructable({\n      api: this.api,\n      config: this.settings,\n      block: t,\n      data: e\n    });\n  }\n}\nclass F extends Map {\n  /**\n   * Returns Block Tools collection\n   */\n  get blockTools() {\n    const e = Array.from(this.entries()).filter(([, t]) => t.isBlock());\n    return new F(e);\n  }\n  /**\n   * Returns Inline Tools collection\n   */\n  get inlineTools() {\n    const e = Array.from(this.entries()).filter(([, t]) => t.isInline());\n    return new F(e);\n  }\n  /**\n   * Returns Block Tunes collection\n   */\n  get blockTunes() {\n    const e = Array.from(this.entries()).filter(([, t]) => t.isTune());\n    return new F(e);\n  }\n  /**\n   * Returns internal Tools collection\n   */\n  get internalTools() {\n    const e = Array.from(this.entries()).filter(([, t]) => t.isInternal);\n    return new F(e);\n  }\n  /**\n   * Returns Tools collection provided by user\n   */\n  get externalTools() {\n    const e = Array.from(this.entries()).filter(([, t]) => !t.isInternal);\n    return new F(e);\n  }\n}\nvar gs = Object.defineProperty, ms = Object.getOwnPropertyDescriptor, ho = (n, e, t, o) => {\n  for (var i = o > 1 ? void 0 : o ? ms(e, t) : e, s = n.length - 1, r; s >= 0; s--)\n    (r = n[s]) && (i = (o ? r(e, t, i) : r(i)) || i);\n  return o && i && gs(e, t, i), i;\n};\nclass gt extends dt {\n  constructor() {\n    super(...arguments), this.type = ne.Block, this.inlineTools = new F(), this.tunes = new F();\n  }\n  /**\n   * Creates new Tool instance\n   *\n   * @param data - Tool data\n   * @param block - BlockAPI for current Block\n   * @param readOnly - True if Editor is in read-only mode\n   */\n  create(e, t, o) {\n    return new this.constructable({\n      data: e,\n      block: t,\n      readOnly: o,\n      api: this.api,\n      config: this.settings\n    });\n  }\n  /**\n   * Returns true if read-only mode is supported by Tool\n   */\n  get isReadOnlySupported() {\n    return this.constructable[ce.IsReadOnlySupported] === !0;\n  }\n  /**\n   * Returns true if Tool supports linebreaks\n   */\n  get isLineBreaksEnabled() {\n    return this.constructable[ce.IsEnabledLineBreaks];\n  }\n  /**\n   * Returns Tool toolbox configuration (internal or user-specified).\n   *\n   * Merges internal and user-defined toolbox configs based on the following rules:\n   *\n   * - If both internal and user-defined toolbox configs are arrays their items are merged.\n   * Length of the second one is kept.\n   *\n   * - If both are objects their properties are merged.\n   *\n   * - If one is an object and another is an array than internal config is replaced with user-defined\n   * config. This is made to allow user to override default tool's toolbox representation (single/multiple entries)\n   */\n  get toolbox() {\n    const e = this.constructable[ce.Toolbox], t = this.config[Ie.Toolbox];\n    if (!V(e) && t !== !1)\n      return t ? Array.isArray(e) ? Array.isArray(t) ? t.map((o, i) => {\n        const s = e[i];\n        return s ? {\n          ...s,\n          ...o\n        } : o;\n      }) : [t] : Array.isArray(t) ? t : [\n        {\n          ...e,\n          ...t\n        }\n      ] : Array.isArray(e) ? e : [e];\n  }\n  /**\n   * Returns Tool conversion configuration\n   */\n  get conversionConfig() {\n    return this.constructable[ce.ConversionConfig];\n  }\n  /**\n   * Returns enabled inline tools for Tool\n   */\n  get enabledInlineTools() {\n    return this.config[Ie.EnabledInlineTools] || !1;\n  }\n  /**\n   * Returns enabled tunes for Tool\n   */\n  get enabledBlockTunes() {\n    return this.config[Ie.EnabledBlockTunes];\n  }\n  /**\n   * Returns Tool paste configuration\n   */\n  get pasteConfig() {\n    return this.constructable[ce.PasteConfig] ?? {};\n  }\n  get sanitizeConfig() {\n    const e = super.sanitizeConfig, t = this.baseSanitizeConfig;\n    if (V(e))\n      return t;\n    const o = {};\n    for (const i in e)\n      if (Object.prototype.hasOwnProperty.call(e, i)) {\n        const s = e[i];\n        R(s) ? o[i] = Object.assign({}, t, s) : o[i] = s;\n      }\n    return o;\n  }\n  get baseSanitizeConfig() {\n    const e = {};\n    return Array.from(this.inlineTools.values()).forEach((t) => Object.assign(e, t.sanitizeConfig)), Array.from(this.tunes.values()).forEach((t) => Object.assign(e, t.sanitizeConfig)), e;\n  }\n}\nho([\n  ue\n], gt.prototype, \"sanitizeConfig\", 1);\nho([\n  ue\n], gt.prototype, \"baseSanitizeConfig\", 1);\nclass bs {\n  /**\n   * @class\n   * @param config - tools config\n   * @param editorConfig - EditorJS config\n   * @param api - EditorJS API module\n   */\n  constructor(e, t, o) {\n    this.api = o, this.config = e, this.editorConfig = t;\n  }\n  /**\n   * Returns Tool object based on it's type\n   *\n   * @param name - tool name\n   */\n  get(e) {\n    const { class: t, isInternal: o = !1, ...i } = this.config[e], s = this.getConstructor(t), r = t[et.IsTune];\n    return new s({\n      name: e,\n      constructable: t,\n      config: i,\n      api: this.api.getMethodsForTool(e, r),\n      isDefault: e === this.editorConfig.defaultBlock,\n      defaultPlaceholder: this.editorConfig.placeholder,\n      isInternal: o\n    });\n  }\n  /**\n   * Find appropriate Tool object constructor for Tool constructable\n   *\n   * @param constructable - Tools constructable\n   */\n  getConstructor(e) {\n    switch (!0) {\n      case e[ct.IsInline]:\n        return ps;\n      case e[et.IsTune]:\n        return fs;\n      default:\n        return gt;\n    }\n  }\n}\nclass uo {\n  /**\n   * MoveDownTune constructor\n   *\n   * @param {API} api — Editor's API\n   */\n  constructor({ api: e }) {\n    this.CSS = {\n      animation: \"wobble\"\n    }, this.api = e;\n  }\n  /**\n   * Tune's appearance in block settings menu\n   */\n  render() {\n    return {\n      icon: ki,\n      title: this.api.i18n.t(\"Move down\"),\n      onActivate: () => this.handleClick(),\n      name: \"move-down\"\n    };\n  }\n  /**\n   * Handle clicks on 'move down' button\n   */\n  handleClick() {\n    const e = this.api.blocks.getCurrentBlockIndex(), t = this.api.blocks.getBlockByIndex(e + 1);\n    if (!t)\n      throw new Error(\"Unable to move Block down since it is already the last\");\n    const o = t.holder, i = o.getBoundingClientRect();\n    let s = Math.abs(window.innerHeight - o.offsetHeight);\n    i.top < window.innerHeight && (s = window.scrollY + o.offsetHeight), window.scrollTo(0, s), this.api.blocks.move(e + 1), this.api.toolbar.toggleBlockSettings(!0);\n  }\n}\nuo.isTune = !0;\nclass po {\n  /**\n   * DeleteTune constructor\n   *\n   * @param {API} api - Editor's API\n   */\n  constructor({ api: e }) {\n    this.api = e;\n  }\n  /**\n   * Tune's appearance in block settings menu\n   */\n  render() {\n    return {\n      icon: yi,\n      title: this.api.i18n.t(\"Delete\"),\n      name: \"delete\",\n      confirmation: {\n        title: this.api.i18n.t(\"Click to delete\"),\n        onActivate: () => this.handleClick()\n      }\n    };\n  }\n  /**\n   * Delete block conditions passed\n   */\n  handleClick() {\n    this.api.blocks.delete();\n  }\n}\npo.isTune = !0;\nclass fo {\n  /**\n   * MoveUpTune constructor\n   *\n   * @param {API} api - Editor's API\n   */\n  constructor({ api: e }) {\n    this.CSS = {\n      animation: \"wobble\"\n    }, this.api = e;\n  }\n  /**\n   * Tune's appearance in block settings menu\n   */\n  render() {\n    return {\n      icon: xi,\n      title: this.api.i18n.t(\"Move up\"),\n      onActivate: () => this.handleClick(),\n      name: \"move-up\"\n    };\n  }\n  /**\n   * Move current block up\n   */\n  handleClick() {\n    const e = this.api.blocks.getCurrentBlockIndex(), t = this.api.blocks.getBlockByIndex(e), o = this.api.blocks.getBlockByIndex(e - 1);\n    if (e === 0 || !t || !o)\n      throw new Error(\"Unable to move Block up since it is already the first\");\n    const i = t.holder, s = o.holder, r = i.getBoundingClientRect(), l = s.getBoundingClientRect();\n    let a;\n    l.top > 0 ? a = Math.abs(r.top) - Math.abs(l.top) : a = Math.abs(r.top) + l.height, window.scrollBy(0, -1 * a), this.api.blocks.move(e - 1), this.api.toolbar.toggleBlockSettings(!0);\n  }\n}\nfo.isTune = !0;\nvar ks = Object.defineProperty, vs = Object.getOwnPropertyDescriptor, ws = (n, e, t, o) => {\n  for (var i = o > 1 ? void 0 : o ? vs(e, t) : e, s = n.length - 1, r; s >= 0; s--)\n    (r = n[s]) && (i = (o ? r(e, t, i) : r(i)) || i);\n  return o && i && ks(e, t, i), i;\n};\nclass go extends y {\n  constructor() {\n    super(...arguments), this.stubTool = \"stub\", this.toolsAvailable = new F(), this.toolsUnavailable = new F();\n  }\n  /**\n   * Returns available Tools\n   */\n  get available() {\n    return this.toolsAvailable;\n  }\n  /**\n   * Returns unavailable Tools\n   */\n  get unavailable() {\n    return this.toolsUnavailable;\n  }\n  /**\n   * Return Tools for the Inline Toolbar\n   */\n  get inlineTools() {\n    return this.available.inlineTools;\n  }\n  /**\n   * Return editor block tools\n   */\n  get blockTools() {\n    return this.available.blockTools;\n  }\n  /**\n   * Return available Block Tunes\n   *\n   * @returns {object} - object of Inline Tool's classes\n   */\n  get blockTunes() {\n    return this.available.blockTunes;\n  }\n  /**\n   * Returns default Tool object\n   */\n  get defaultTool() {\n    return this.blockTools.get(this.config.defaultBlock);\n  }\n  /**\n   * Returns internal tools\n   */\n  get internal() {\n    return this.available.internalTools;\n  }\n  /**\n   * Creates instances via passed or default configuration\n   *\n   * @returns {Promise<void>}\n   */\n  async prepare() {\n    if (this.validateTools(), this.config.tools = qe({}, this.internalTools, this.config.tools), !Object.prototype.hasOwnProperty.call(this.config, \"tools\") || Object.keys(this.config.tools).length === 0)\n      throw Error(\"Can't start without tools\");\n    const e = this.prepareConfig();\n    this.factory = new bs(e, this.config, this.Editor.API);\n    const t = this.getListOfPrepareFunctions(e);\n    if (t.length === 0)\n      return Promise.resolve();\n    await Eo(t, (o) => {\n      this.toolPrepareMethodSuccess(o);\n    }, (o) => {\n      this.toolPrepareMethodFallback(o);\n    }), this.prepareBlockTools();\n  }\n  getAllInlineToolsSanitizeConfig() {\n    const e = {};\n    return Array.from(this.inlineTools.values()).forEach((t) => {\n      Object.assign(e, t.sanitizeConfig);\n    }), e;\n  }\n  /**\n   * Calls each Tool reset method to clean up anything set by Tool\n   */\n  destroy() {\n    Object.values(this.available).forEach(async (e) => {\n      O(e.reset) && await e.reset();\n    });\n  }\n  /**\n   * Returns internal tools\n   * Includes Bold, Italic, Link and Paragraph\n   */\n  get internalTools() {\n    return {\n      convertTo: {\n        class: ao,\n        isInternal: !0\n      },\n      link: {\n        class: ft,\n        isInternal: !0\n      },\n      bold: {\n        class: ut,\n        isInternal: !0\n      },\n      italic: {\n        class: pt,\n        isInternal: !0\n      },\n      paragraph: {\n        class: ht,\n        inlineToolbar: !0,\n        isInternal: !0\n      },\n      stub: {\n        class: co,\n        isInternal: !0\n      },\n      moveUp: {\n        class: fo,\n        isInternal: !0\n      },\n      delete: {\n        class: po,\n        isInternal: !0\n      },\n      moveDown: {\n        class: uo,\n        isInternal: !0\n      }\n    };\n  }\n  /**\n   * Tool prepare method success callback\n   *\n   * @param {object} data - append tool to available list\n   */\n  toolPrepareMethodSuccess(e) {\n    const t = this.factory.get(e.toolName);\n    if (t.isInline()) {\n      const i = [\"render\"].filter((s) => !t.create()[s]);\n      if (i.length) {\n        I(\n          `Incorrect Inline Tool: ${t.name}. Some of required methods is not implemented %o`,\n          \"warn\",\n          i\n        ), this.toolsUnavailable.set(t.name, t);\n        return;\n      }\n    }\n    this.toolsAvailable.set(t.name, t);\n  }\n  /**\n   * Tool prepare method fail callback\n   *\n   * @param {object} data - append tool to unavailable list\n   */\n  toolPrepareMethodFallback(e) {\n    this.toolsUnavailable.set(e.toolName, this.factory.get(e.toolName));\n  }\n  /**\n   * Binds prepare function of plugins with user or default config\n   *\n   * @returns {Array} list of functions that needs to be fired sequentially\n   * @param config - tools config\n   */\n  getListOfPrepareFunctions(e) {\n    const t = [];\n    return Object.entries(e).forEach(([o, i]) => {\n      t.push({\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        function: O(i.class.prepare) ? i.class.prepare : () => {\n        },\n        data: {\n          toolName: o,\n          config: i.config\n        }\n      });\n    }), t;\n  }\n  /**\n   * Assign enabled Inline Tools and Block Tunes for Block Tool\n   */\n  prepareBlockTools() {\n    Array.from(this.blockTools.values()).forEach((e) => {\n      this.assignInlineToolsToBlockTool(e), this.assignBlockTunesToBlockTool(e);\n    });\n  }\n  /**\n   * Assign enabled Inline Tools for Block Tool\n   *\n   * @param tool - Block Tool\n   */\n  assignInlineToolsToBlockTool(e) {\n    if (this.config.inlineToolbar !== !1) {\n      if (e.enabledInlineTools === !0) {\n        e.inlineTools = new F(\n          Array.isArray(this.config.inlineToolbar) ? this.config.inlineToolbar.map((t) => [t, this.inlineTools.get(t)]) : Array.from(this.inlineTools.entries())\n        );\n        return;\n      }\n      Array.isArray(e.enabledInlineTools) && (e.inlineTools = new F(\n        /** Prepend ConvertTo Inline Tool */\n        [\"convertTo\", ...e.enabledInlineTools].map((t) => [t, this.inlineTools.get(t)])\n      ));\n    }\n  }\n  /**\n   * Assign enabled Block Tunes for Block Tool\n   *\n   * @param tool — Block Tool\n   */\n  assignBlockTunesToBlockTool(e) {\n    if (e.enabledBlockTunes !== !1) {\n      if (Array.isArray(e.enabledBlockTunes)) {\n        const t = new F(\n          e.enabledBlockTunes.map((o) => [o, this.blockTunes.get(o)])\n        );\n        e.tunes = new F([...t, ...this.blockTunes.internalTools]);\n        return;\n      }\n      if (Array.isArray(this.config.tunes)) {\n        const t = new F(\n          this.config.tunes.map((o) => [o, this.blockTunes.get(o)])\n        );\n        e.tunes = new F([...t, ...this.blockTunes.internalTools]);\n        return;\n      }\n      e.tunes = this.blockTunes.internalTools;\n    }\n  }\n  /**\n   * Validate Tools configuration objects and throw Error for user if it is invalid\n   */\n  validateTools() {\n    for (const e in this.config.tools)\n      if (Object.prototype.hasOwnProperty.call(this.config.tools, e)) {\n        if (e in this.internalTools)\n          return;\n        const t = this.config.tools[e];\n        if (!O(t) && !O(t.class))\n          throw Error(\n            `Tool «${e}» must be a constructor function or an object with function in the «class» property`\n          );\n      }\n  }\n  /**\n   * Unify tools config\n   */\n  prepareConfig() {\n    const e = {};\n    for (const t in this.config.tools)\n      R(this.config.tools[t]) ? e[t] = this.config.tools[t] : e[t] = { class: this.config.tools[t] };\n    return e;\n  }\n}\nws([\n  ue\n], go.prototype, \"getAllInlineToolsSanitizeConfig\", 1);\nconst xs = `:root{--selectionColor: #e1f2ff;--inlineSelectionColor: #d4ecff;--bg-light: #eff2f5;--grayText: #707684;--color-dark: #1D202B;--color-active-icon: #388AE5;--color-gray-border: rgba(201, 201, 204, .48);--content-width: 650px;--narrow-mode-right-padding: 50px;--toolbox-buttons-size: 26px;--toolbox-buttons-size--mobile: 36px;--icon-size: 20px;--icon-size--mobile: 28px;--block-padding-vertical: .4em;--color-line-gray: #EFF0F1 }.codex-editor{position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;z-index:1}.codex-editor .hide{display:none}.codex-editor__redactor [contenteditable]:empty:after{content:\"\\\\feff\"}@media (min-width: 651px){.codex-editor--narrow .codex-editor__redactor{margin-right:50px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .codex-editor__redactor{margin-left:50px;margin-right:0}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__actions{right:-5px}}.codex-editor-copyable{position:absolute;height:1px;width:1px;top:-400%;opacity:.001}.codex-editor-overlay{position:fixed;top:0;left:0;right:0;bottom:0;z-index:999;pointer-events:none;overflow:hidden}.codex-editor-overlay__container{position:relative;pointer-events:auto;z-index:0}.codex-editor-overlay__rectangle{position:absolute;pointer-events:none;background-color:#2eaadc33;border:1px solid transparent}.codex-editor svg{max-height:100%}.codex-editor path{stroke:currentColor}.codex-editor ::-moz-selection{background-color:#d4ecff}.codex-editor ::selection{background-color:#d4ecff}.codex-editor--toolbox-opened [contentEditable=true][data-placeholder]:focus:before{opacity:0!important}.ce-scroll-locked{overflow:hidden}.ce-scroll-locked--hard{overflow:hidden;top:calc(-1 * var(--window-scroll-offset));position:fixed;width:100%}.ce-toolbar{position:absolute;left:0;right:0;top:0;-webkit-transition:opacity .1s ease;transition:opacity .1s ease;will-change:opacity,top;display:none}.ce-toolbar--opened{display:block}.ce-toolbar__content{max-width:650px;margin:0 auto;position:relative}.ce-toolbar__plus{color:#1d202b;cursor:pointer;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-ms-flex-negative:0;flex-shrink:0}@media (max-width: 650px){.ce-toolbar__plus{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__plus:hover{background-color:#eff2f5}}.ce-toolbar__plus--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-toolbar__plus-shortcut{opacity:.6;word-spacing:-2px;margin-top:5px}@media (max-width: 650px){.ce-toolbar__plus{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__plus--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__plus--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__actions{position:absolute;right:100%;opacity:0;display:-webkit-box;display:-ms-flexbox;display:flex;padding-right:5px}.ce-toolbar__actions--opened{opacity:1}@media (max-width: 650px){.ce-toolbar__actions{right:auto}}.ce-toolbar__settings-btn{color:#1d202b;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;margin-left:3px;cursor:pointer;user-select:none}@media (max-width: 650px){.ce-toolbar__settings-btn{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__settings-btn:hover{background-color:#eff2f5}}.ce-toolbar__settings-btn--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}@media (min-width: 651px){.ce-toolbar__settings-btn{width:24px}}.ce-toolbar__settings-btn--hidden{display:none}@media (max-width: 650px){.ce-toolbar__settings-btn{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__settings-btn--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__settings-btn--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__plus svg,.ce-toolbar__settings-btn svg{width:24px;height:24px}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__plus{left:5px}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbox .ce-popover{right:0;left:auto;left:initial}}.ce-inline-toolbar{--y-offset: 8px;--color-background-icon-active: rgba(56, 138, 229, .1);--color-text-icon-active: #388AE5;--color-text-primary: black;position:absolute;visibility:hidden;-webkit-transition:opacity .25s ease;transition:opacity .25s ease;will-change:opacity,left,top;top:0;left:0;z-index:3;opacity:1;visibility:visible}.ce-inline-toolbar [hidden]{display:none!important}.ce-inline-toolbar__toggler-and-button-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;padding:0 6px}.ce-inline-toolbar__buttons{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown{display:-webkit-box;display:-ms-flexbox;display:flex;padding:6px;margin:0 6px 0 -6px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;border-right:1px solid rgba(201,201,204,.48);-webkit-box-sizing:border-box;box-sizing:border-box}@media (hover: hover){.ce-inline-toolbar__dropdown:hover{background:#eff2f5}}.ce-inline-toolbar__dropdown--hidden{display:none}.ce-inline-toolbar__dropdown-content,.ce-inline-toolbar__dropdown-arrow{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown-content svg,.ce-inline-toolbar__dropdown-arrow svg{width:20px;height:20px}.ce-inline-toolbar__shortcut{opacity:.6;word-spacing:-3px;margin-top:3px}.ce-inline-tool{color:var(--color-text-primary);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border:0;border-radius:4px;line-height:normal;height:100%;padding:0;width:28px;background-color:transparent;cursor:pointer}@media (max-width: 650px){.ce-inline-tool{width:36px;height:36px}}@media (hover: hover){.ce-inline-tool:hover{background-color:#f8f8f8}}.ce-inline-tool svg{display:block;width:20px;height:20px}@media (max-width: 650px){.ce-inline-tool svg{width:28px;height:28px}}.ce-inline-tool--link .icon--unlink,.ce-inline-tool--unlink .icon--link{display:none}.ce-inline-tool--unlink .icon--unlink{display:inline-block;margin-bottom:-1px}.ce-inline-tool-input{background:#F8F8F8;border:1px solid rgba(226,226,229,.2);border-radius:6px;padding:4px 8px;font-size:14px;line-height:22px;outline:none;margin:0;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box;display:none;font-weight:500;-webkit-appearance:none;font-family:inherit}@media (max-width: 650px){.ce-inline-tool-input{font-size:15px;font-weight:500}}.ce-inline-tool-input::-webkit-input-placeholder{color:#707684}.ce-inline-tool-input::-moz-placeholder{color:#707684}.ce-inline-tool-input:-ms-input-placeholder{color:#707684}.ce-inline-tool-input::-ms-input-placeholder{color:#707684}.ce-inline-tool-input::placeholder{color:#707684}.ce-inline-tool-input--showed{display:block}.ce-inline-tool--active{background:var(--color-background-icon-active);color:var(--color-text-icon-active)}@-webkit-keyframes fade-in{0%{opacity:0}to{opacity:1}}@keyframes fade-in{0%{opacity:0}to{opacity:1}}.ce-block{-webkit-animation:fade-in .3s ease;animation:fade-in .3s ease;-webkit-animation-fill-mode:none;animation-fill-mode:none;-webkit-animation-fill-mode:initial;animation-fill-mode:initial}.ce-block:first-of-type{margin-top:0}.ce-block--selected .ce-block__content{background:#e1f2ff}.ce-block--selected .ce-block__content [contenteditable]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ce-block--selected .ce-block__content img,.ce-block--selected .ce-block__content .ce-stub{opacity:.55}.ce-block--stretched .ce-block__content{max-width:none}.ce-block__content{position:relative;max-width:650px;margin:0 auto;-webkit-transition:background-color .15s ease;transition:background-color .15s ease}.ce-block--drop-target .ce-block__content:before{content:\"\";position:absolute;top:100%;left:-20px;margin-top:-1px;height:8px;width:8px;border:solid #388AE5;border-width:1px 1px 0 0;-webkit-transform-origin:right;transform-origin:right;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.ce-block--drop-target .ce-block__content:after{content:\"\";position:absolute;top:100%;height:1px;width:100%;color:#388ae5;background:repeating-linear-gradient(90deg,#388AE5,#388AE5 1px,#fff 1px,#fff 6px)}.ce-block a{cursor:pointer;-webkit-text-decoration:underline;text-decoration:underline}.ce-block b{font-weight:700}.ce-block i{font-style:italic}@-webkit-keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}.cdx-block{padding:.4em 0}.cdx-block::-webkit-input-placeholder{line-height:normal!important}.cdx-input{border:1px solid rgba(201,201,204,.48);-webkit-box-shadow:inset 0 1px 2px 0 rgba(35,44,72,.06);box-shadow:inset 0 1px 2px #232c480f;border-radius:3px;padding:10px 12px;outline:none;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box}.cdx-input[data-placeholder]:before{position:static!important}.cdx-input[data-placeholder]:before{display:inline-block;width:0;white-space:nowrap;pointer-events:none}.cdx-settings-button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;min-width:26px;min-height:26px}.cdx-settings-button--focused{background:rgba(34,186,255,.08)!important}.cdx-settings-button--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.cdx-settings-button--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.cdx-settings-button--active{color:#388ae5}.cdx-settings-button svg{width:auto;height:auto}@media (max-width: 650px){.cdx-settings-button svg{width:28px;height:28px}}@media (max-width: 650px){.cdx-settings-button{width:36px;height:36px;border-radius:8px}}@media (hover: hover){.cdx-settings-button:hover{background-color:#eff2f5}}.cdx-loader{position:relative;border:1px solid rgba(201,201,204,.48)}.cdx-loader:before{content:\"\";position:absolute;left:50%;top:50%;width:18px;height:18px;margin:-11px 0 0 -11px;border:2px solid rgba(201,201,204,.48);border-left-color:#388ae5;border-radius:50%;-webkit-animation:cdxRotation 1.2s infinite linear;animation:cdxRotation 1.2s infinite linear}@-webkit-keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.cdx-button{padding:13px;border-radius:3px;border:1px solid rgba(201,201,204,.48);font-size:14.9px;background:#fff;-webkit-box-shadow:0 2px 2px 0 rgba(18,30,57,.04);box-shadow:0 2px 2px #121e390a;color:#707684;text-align:center;cursor:pointer}@media (hover: hover){.cdx-button:hover{background:#FBFCFE;-webkit-box-shadow:0 1px 3px 0 rgba(18,30,57,.08);box-shadow:0 1px 3px #121e3914}}.cdx-button svg{height:20px;margin-right:.2em;margin-top:-2px}.ce-stub{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:12px 18px;margin:10px 0;border-radius:10px;background:#eff2f5;border:1px solid #EFF0F1;color:#707684;font-size:14px}.ce-stub svg{width:20px;height:20px}.ce-stub__info{margin-left:14px}.ce-stub__title{font-weight:500;text-transform:capitalize}.codex-editor.codex-editor--rtl{direction:rtl}.codex-editor.codex-editor--rtl .cdx-list{padding-left:0;padding-right:40px}.codex-editor.codex-editor--rtl .ce-toolbar__plus{right:-26px;left:auto}.codex-editor.codex-editor--rtl .ce-toolbar__actions{right:auto;left:-26px}@media (max-width: 650px){.codex-editor.codex-editor--rtl .ce-toolbar__actions{margin-left:0;margin-right:auto;padding-right:0;padding-left:10px}}.codex-editor.codex-editor--rtl .ce-settings{left:5px;right:auto}.codex-editor.codex-editor--rtl .ce-settings:before{right:auto;left:25px}.codex-editor.codex-editor--rtl .ce-settings__button:not(:nth-child(3n+3)){margin-left:3px;margin-right:0}.codex-editor.codex-editor--rtl .ce-conversion-tool__icon{margin-right:0;margin-left:10px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown{border-right:0px solid transparent;border-left:1px solid rgba(201,201,204,.48);margin:0 -6px 0 6px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown .icon--toggler-down{margin-left:0;margin-right:4px}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__plus{left:0;right:5px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__actions{left:-5px}}.cdx-search-field{--icon-margin-right: 10px;background:#F8F8F8;border:1px solid rgba(226,226,229,.2);border-radius:6px;padding:2px;display:grid;grid-template-columns:auto auto 1fr;grid-template-rows:auto}.cdx-search-field__icon{width:26px;height:26px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:var(--icon-margin-right)}.cdx-search-field__icon svg{width:20px;height:20px;color:#707684}.cdx-search-field__input{font-size:14px;outline:none;font-weight:500;font-family:inherit;border:0;background:transparent;margin:0;padding:0;line-height:22px;min-width:calc(100% - 26px - var(--icon-margin-right))}.cdx-search-field__input::-webkit-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-moz-placeholder{color:#707684;font-weight:500}.cdx-search-field__input:-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::placeholder{color:#707684;font-weight:500}.ce-popover{--border-radius: 6px;--width: 200px;--max-height: 270px;--padding: 6px;--offset-from-target: 8px;--color-border: #EFF0F1;--color-shadow: rgba(13, 20, 33, .1);--color-background: white;--color-text-primary: black;--color-text-secondary: #707684;--color-border-icon: rgba(201, 201, 204, .48);--color-border-icon-disabled: #EFF0F1;--color-text-icon-active: #388AE5;--color-background-icon-active: rgba(56, 138, 229, .1);--color-background-item-focus: rgba(34, 186, 255, .08);--color-shadow-item-focus: rgba(7, 161, 227, .08);--color-background-item-hover: #F8F8F8;--color-background-item-confirm: #E24A4A;--color-background-item-confirm-hover: #CE4343;--popover-top: calc(100% + var(--offset-from-target));--popover-left: 0;--nested-popover-overlap: 4px;--icon-size: 20px;--item-padding: 3px;--item-height: calc(var(--icon-size) + 2 * var(--item-padding))}.ce-popover__container{min-width:var(--width);width:var(--width);max-height:var(--max-height);border-radius:var(--border-radius);overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-shadow:0px 3px 15px -3px var(--color-shadow);box-shadow:0 3px 15px -3px var(--color-shadow);position:absolute;left:var(--popover-left);top:var(--popover-top);background:var(--color-background);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;z-index:4;opacity:0;max-height:0;pointer-events:none;padding:0;border:none}.ce-popover--opened>.ce-popover__container{opacity:1;padding:var(--padding);max-height:var(--max-height);pointer-events:auto;-webkit-animation:panelShowing .1s ease;animation:panelShowing .1s ease;border:1px solid var(--color-border)}@media (max-width: 650px){.ce-popover--opened>.ce-popover__container{-webkit-animation:panelShowingMobile .25s ease;animation:panelShowingMobile .25s ease}}.ce-popover--open-top .ce-popover__container{--popover-top: calc(-1 * (var(--offset-from-target) + var(--popover-height)))}.ce-popover--open-left .ce-popover__container{--popover-left: calc(-1 * var(--width) + 100%)}.ce-popover__items{overflow-y:auto;-ms-scroll-chaining:none;overscroll-behavior:contain}@media (max-width: 650px){.ce-popover__overlay{position:fixed;top:0;bottom:0;left:0;right:0;background:#1D202B;z-index:3;opacity:.5;-webkit-transition:opacity .12s ease-in;transition:opacity .12s ease-in;will-change:opacity;visibility:visible}}.ce-popover__overlay--hidden{display:none}@media (max-width: 650px){.ce-popover .ce-popover__container{--offset: 5px;position:fixed;max-width:none;min-width:calc(100% - var(--offset) * 2);left:var(--offset);right:var(--offset);bottom:calc(var(--offset) + env(safe-area-inset-bottom));top:auto;border-radius:10px}}.ce-popover__search{margin-bottom:5px}.ce-popover__nothing-found-message{color:#707684;display:none;cursor:default;padding:3px;font-size:14px;line-height:20px;font-weight:500;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ce-popover__nothing-found-message--displayed{display:block}.ce-popover--nested .ce-popover__container{--popover-left: calc(var(--nesting-level) * (var(--width) - var(--nested-popover-overlap)));top:calc(var(--trigger-item-top) - var(--nested-popover-overlap));position:absolute}.ce-popover--open-top.ce-popover--nested .ce-popover__container{top:calc(var(--trigger-item-top) - var(--popover-height) + var(--item-height) + var(--offset-from-target) + var(--nested-popover-overlap))}.ce-popover--open-left .ce-popover--nested .ce-popover__container{--popover-left: calc(-1 * (var(--nesting-level) + 1) * var(--width) + 100%)}.ce-popover-item-separator{padding:4px 3px}.ce-popover-item-separator--hidden{display:none}.ce-popover-item-separator__line{height:1px;background:var(--color-border);width:100%}.ce-popover-item-html--hidden{display:none}.ce-popover-item{--border-radius: 6px;border-radius:var(--border-radius);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:var(--item-padding);color:var(--color-text-primary);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:none;background:transparent}@media (max-width: 650px){.ce-popover-item{padding:4px}}.ce-popover-item:not(:last-of-type){margin-bottom:1px}.ce-popover-item__icon{width:26px;height:26px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.ce-popover-item__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-popover-item__icon{width:36px;height:36px;border-radius:8px}.ce-popover-item__icon svg{width:28px;height:28px}}.ce-popover-item__icon--tool{margin-right:4px}.ce-popover-item__title{font-size:14px;line-height:20px;font-weight:500;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin-right:auto}@media (max-width: 650px){.ce-popover-item__title{font-size:16px}}.ce-popover-item__secondary-title{color:var(--color-text-secondary);font-size:12px;white-space:nowrap;letter-spacing:-.1em;padding-right:5px;opacity:.6}@media (max-width: 650px){.ce-popover-item__secondary-title{display:none}}.ce-popover-item--active{background:var(--color-background-icon-active);color:var(--color-text-icon-active)}.ce-popover-item--disabled{color:var(--color-text-secondary);cursor:default;pointer-events:none}.ce-popover-item--focused:not(.ce-popover-item--no-focus){background:var(--color-background-item-focus)!important}.ce-popover-item--hidden{display:none}@media (hover: hover){.ce-popover-item:hover{cursor:pointer}.ce-popover-item:hover:not(.ce-popover-item--no-hover){background-color:var(--color-background-item-hover)}}.ce-popover-item--confirmation{background:var(--color-background-item-confirm)}.ce-popover-item--confirmation .ce-popover-item__title,.ce-popover-item--confirmation .ce-popover-item__icon{color:#fff}@media (hover: hover){.ce-popover-item--confirmation:not(.ce-popover-item--no-hover):hover{background:var(--color-background-item-confirm-hover)}}.ce-popover-item--confirmation:not(.ce-popover-item--no-focus).ce-popover-item--focused{background:var(--color-background-item-confirm-hover)!important}@-webkit-keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@-webkit-keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}.wobble{-webkit-animation-name:wobble;animation-name:wobble;-webkit-animation-duration:.4s;animation-duration:.4s}@-webkit-keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}@keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}.ce-popover-header{margin-bottom:8px;margin-top:4px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.ce-popover-header__text{font-size:18px;font-weight:600}.ce-popover-header__back-button{border:0;background:transparent;width:36px;height:36px;color:var(--color-text-primary)}.ce-popover-header__back-button svg{display:block;width:28px;height:28px}.ce-popover--inline{--height: 38px;--height-mobile: 46px;--container-padding: 4px;position:relative}.ce-popover--inline .ce-popover__custom-content{margin-bottom:0}.ce-popover--inline .ce-popover__items{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-popover--inline .ce-popover__container{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;padding:var(--container-padding);height:var(--height);top:0;min-width:-webkit-max-content;min-width:-moz-max-content;min-width:max-content;width:-webkit-max-content;width:-moz-max-content;width:max-content;-webkit-animation:none;animation:none}@media (max-width: 650px){.ce-popover--inline .ce-popover__container{height:var(--height-mobile);position:absolute}}.ce-popover--inline .ce-popover-item-separator{padding:0 4px}.ce-popover--inline .ce-popover-item-separator__line{height:100%;width:1px}.ce-popover--inline .ce-popover-item{border-radius:4px;padding:4px}.ce-popover--inline .ce-popover-item__icon--tool{-webkit-box-shadow:none;box-shadow:none;background:transparent;margin-right:0}.ce-popover--inline .ce-popover-item__icon{width:auto;width:initial;height:auto;height:initial}.ce-popover--inline .ce-popover-item__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-popover--inline .ce-popover-item__icon svg{width:28px;height:28px}}.ce-popover--inline .ce-popover-item:not(:last-of-type){margin-bottom:0;margin-bottom:initial}.ce-popover--inline .ce-popover-item-html{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.ce-popover--inline .ce-popover-item__icon--chevron-right{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.ce-popover--inline .ce-popover--nested-level-1 .ce-popover__container{--offset: 3px;left:0;top:calc(var(--height) + var(--offset))}@media (max-width: 650px){.ce-popover--inline .ce-popover--nested-level-1 .ce-popover__container{top:calc(var(--height-mobile) + var(--offset))}}.ce-popover--inline .ce-popover--nested .ce-popover__container{min-width:var(--width);width:var(--width);height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;padding:6px;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.ce-popover--inline .ce-popover--nested .ce-popover__items{display:block;width:100%}.ce-popover--inline .ce-popover--nested .ce-popover-item{border-radius:6px;padding:3px}@media (max-width: 650px){.ce-popover--inline .ce-popover--nested .ce-popover-item{padding:4px}}.ce-popover--inline .ce-popover--nested .ce-popover-item__icon--tool{margin-right:4px}.ce-popover--inline .ce-popover--nested .ce-popover-item__icon{width:26px;height:26px}.ce-popover--inline .ce-popover--nested .ce-popover-item-separator{padding:4px 3px}.ce-popover--inline .ce-popover--nested .ce-popover-item-separator__line{width:100%;height:1px}.codex-editor [data-placeholder]:empty:before,.codex-editor [data-placeholder][data-empty=true]:before{pointer-events:none;color:#707684;cursor:text;content:attr(data-placeholder)}.codex-editor [data-placeholder-active]:empty:before,.codex-editor [data-placeholder-active][data-empty=true]:before{pointer-events:none;color:#707684;cursor:text}.codex-editor [data-placeholder-active]:empty:focus:before,.codex-editor [data-placeholder-active][data-empty=true]:focus:before{content:attr(data-placeholder-active)}\n`;\nclass ys extends y {\n  constructor() {\n    super(...arguments), this.isMobile = !1, this.contentRectCache = void 0, this.resizeDebouncer = vt(() => {\n      this.windowResize();\n    }, 200);\n  }\n  /**\n   * Editor.js UI CSS class names\n   *\n   * @returns {{editorWrapper: string, editorZone: string}}\n   */\n  get CSS() {\n    return {\n      editorWrapper: \"codex-editor\",\n      editorWrapperNarrow: \"codex-editor--narrow\",\n      editorZone: \"codex-editor__redactor\",\n      editorZoneHidden: \"codex-editor__redactor--hidden\",\n      editorEmpty: \"codex-editor--empty\",\n      editorRtlFix: \"codex-editor--rtl\"\n    };\n  }\n  /**\n   * Return Width of center column of Editor\n   *\n   * @returns {DOMRect}\n   */\n  get contentRect() {\n    if (this.contentRectCache)\n      return this.contentRectCache;\n    const e = this.nodes.wrapper.querySelector(`.${D.CSS.content}`);\n    return e ? (this.contentRectCache = e.getBoundingClientRect(), this.contentRectCache) : {\n      width: 650,\n      left: 0,\n      right: 0\n    };\n  }\n  /**\n   * Making main interface\n   */\n  async prepare() {\n    this.setIsMobile(), this.make(), this.loadStyles();\n  }\n  /**\n   * Toggle read-only state\n   *\n   * If readOnly is true:\n   *  - removes all listeners from main UI module elements\n   *\n   * if readOnly is false:\n   *  - enables all listeners to UI module elements\n   *\n   * @param {boolean} readOnlyEnabled - \"read only\" state\n   */\n  toggleReadOnly(e) {\n    e ? this.disableModuleBindings() : window.requestIdleCallback(() => {\n      this.enableModuleBindings();\n    }, {\n      timeout: 2e3\n    });\n  }\n  /**\n   * Check if Editor is empty and set CSS class to wrapper\n   */\n  checkEmptiness() {\n    const { BlockManager: e } = this.Editor;\n    this.nodes.wrapper.classList.toggle(this.CSS.editorEmpty, e.isEditorEmpty);\n  }\n  /**\n   * Check if one of Toolbar is opened\n   * Used to prevent global keydowns (for example, Enter) conflicts with Enter-on-toolbar\n   *\n   * @returns {boolean}\n   */\n  get someToolbarOpened() {\n    const { Toolbar: e, BlockSettings: t, InlineToolbar: o } = this.Editor;\n    return !!(t.opened || o.opened || e.toolbox.opened);\n  }\n  /**\n   * Check for some Flipper-buttons is under focus\n   */\n  get someFlipperButtonFocused() {\n    return this.Editor.Toolbar.toolbox.hasFocus() ? !0 : Object.entries(this.Editor).filter(([e, t]) => t.flipper instanceof le).some(([e, t]) => t.flipper.hasFocus());\n  }\n  /**\n   * Clean editor`s UI\n   */\n  destroy() {\n    this.nodes.holder.innerHTML = \"\";\n  }\n  /**\n   * Close all Editor's toolbars\n   */\n  closeAllToolbars() {\n    const { Toolbar: e, BlockSettings: t, InlineToolbar: o } = this.Editor;\n    t.close(), o.close(), e.toolbox.close();\n  }\n  /**\n   * Check for mobile mode and save the result\n   */\n  setIsMobile() {\n    const e = window.innerWidth < Ot;\n    e !== this.isMobile && this.eventsDispatcher.emit(ye, {\n      isEnabled: this.isMobile\n    }), this.isMobile = e;\n  }\n  /**\n   * Makes Editor.js interface\n   */\n  make() {\n    this.nodes.holder = d.getHolder(this.config.holder), this.nodes.wrapper = d.make(\"div\", [\n      this.CSS.editorWrapper,\n      ...this.isRtl ? [this.CSS.editorRtlFix] : []\n    ]), this.nodes.redactor = d.make(\"div\", this.CSS.editorZone), this.nodes.holder.offsetWidth < this.contentRect.width && this.nodes.wrapper.classList.add(this.CSS.editorWrapperNarrow), this.nodes.redactor.style.paddingBottom = this.config.minHeight + \"px\", this.nodes.wrapper.appendChild(this.nodes.redactor), this.nodes.holder.appendChild(this.nodes.wrapper);\n  }\n  /**\n   * Appends CSS\n   */\n  loadStyles() {\n    const e = \"editor-js-styles\";\n    if (d.get(e))\n      return;\n    const t = d.make(\"style\", null, {\n      id: e,\n      textContent: xs.toString()\n    });\n    this.config.style && !V(this.config.style) && this.config.style.nonce && t.setAttribute(\"nonce\", this.config.style.nonce), d.prepend(document.head, t);\n  }\n  /**\n   * Bind events on the Editor.js interface\n   */\n  enableModuleBindings() {\n    this.readOnlyMutableListeners.on(this.nodes.redactor, \"click\", (t) => {\n      this.redactorClicked(t);\n    }, !1), this.readOnlyMutableListeners.on(this.nodes.redactor, \"mousedown\", (t) => {\n      this.documentTouched(t);\n    }, {\n      capture: !0,\n      passive: !0\n    }), this.readOnlyMutableListeners.on(this.nodes.redactor, \"touchstart\", (t) => {\n      this.documentTouched(t);\n    }, {\n      capture: !0,\n      passive: !0\n    }), this.readOnlyMutableListeners.on(document, \"keydown\", (t) => {\n      this.documentKeydown(t);\n    }, !0), this.readOnlyMutableListeners.on(document, \"mousedown\", (t) => {\n      this.documentClicked(t);\n    }, !0);\n    const e = vt(() => {\n      this.selectionChanged();\n    }, ss);\n    this.readOnlyMutableListeners.on(document, \"selectionchange\", e, !0), this.readOnlyMutableListeners.on(window, \"resize\", () => {\n      this.resizeDebouncer();\n    }, {\n      passive: !0\n    }), this.watchBlockHoveredEvents(), this.enableInputsEmptyMark();\n  }\n  /**\n   * Listen redactor mousemove to emit 'block-hovered' event\n   */\n  watchBlockHoveredEvents() {\n    let e;\n    this.readOnlyMutableListeners.on(this.nodes.redactor, \"mousemove\", Ve((t) => {\n      const o = t.target.closest(\".ce-block\");\n      this.Editor.BlockSelection.anyBlockSelected || o && e !== o && (e = o, this.eventsDispatcher.emit(oo, {\n        block: this.Editor.BlockManager.getBlockByChildNode(o)\n      }));\n    }, 20), {\n      passive: !0\n    });\n  }\n  /**\n   * Unbind events on the Editor.js interface\n   */\n  disableModuleBindings() {\n    this.readOnlyMutableListeners.clearAll();\n  }\n  /**\n   * Resize window handler\n   */\n  windowResize() {\n    this.contentRectCache = null, this.setIsMobile();\n  }\n  /**\n   * All keydowns on document\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  documentKeydown(e) {\n    switch (e.keyCode) {\n      case w.ENTER:\n        this.enterPressed(e);\n        break;\n      case w.BACKSPACE:\n      case w.DELETE:\n        this.backspacePressed(e);\n        break;\n      case w.ESC:\n        this.escapePressed(e);\n        break;\n      default:\n        this.defaultBehaviour(e);\n        break;\n    }\n  }\n  /**\n   * Ignore all other document's keydown events\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  defaultBehaviour(e) {\n    const { currentBlock: t } = this.Editor.BlockManager, o = e.target.closest(`.${this.CSS.editorWrapper}`), i = e.altKey || e.ctrlKey || e.metaKey || e.shiftKey;\n    if (t !== void 0 && o === null) {\n      this.Editor.BlockEvents.keydown(e);\n      return;\n    }\n    o || t && i || (this.Editor.BlockManager.unsetCurrentBlock(), this.Editor.Toolbar.close());\n  }\n  /**\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  backspacePressed(e) {\n    const { BlockManager: t, BlockSelection: o, Caret: i } = this.Editor;\n    if (o.anyBlockSelected && !b.isSelectionExists) {\n      const s = t.removeSelectedBlocks(), r = t.insertDefaultBlockAtIndex(s, !0);\n      i.setToBlock(r, i.positions.START), o.clearSelection(e), e.preventDefault(), e.stopPropagation(), e.stopImmediatePropagation();\n    }\n  }\n  /**\n   * Escape pressed\n   * If some of Toolbar components are opened, then close it otherwise close Toolbar\n   *\n   * @param {Event} event - escape keydown event\n   */\n  escapePressed(e) {\n    this.Editor.BlockSelection.clearSelection(e), this.Editor.Toolbar.toolbox.opened ? (this.Editor.Toolbar.toolbox.close(), this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock, this.Editor.Caret.positions.END)) : this.Editor.BlockSettings.opened ? this.Editor.BlockSettings.close() : this.Editor.InlineToolbar.opened ? this.Editor.InlineToolbar.close() : this.Editor.Toolbar.close();\n  }\n  /**\n   * Enter pressed on document\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  enterPressed(e) {\n    const { BlockManager: t, BlockSelection: o } = this.Editor;\n    if (this.someToolbarOpened)\n      return;\n    const i = t.currentBlockIndex >= 0;\n    if (o.anyBlockSelected && !b.isSelectionExists) {\n      o.clearSelection(e), e.preventDefault(), e.stopImmediatePropagation(), e.stopPropagation();\n      return;\n    }\n    if (!this.someToolbarOpened && i && e.target.tagName === \"BODY\") {\n      const s = this.Editor.BlockManager.insert();\n      e.preventDefault(), this.Editor.Caret.setToBlock(s), this.Editor.Toolbar.moveAndOpen(s);\n    }\n    this.Editor.BlockSelection.clearSelection(e);\n  }\n  /**\n   * All clicks on document\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  documentClicked(e) {\n    var l, a;\n    if (!e.isTrusted)\n      return;\n    const t = e.target;\n    this.nodes.holder.contains(t) || b.isAtEditor || (this.Editor.BlockManager.unsetCurrentBlock(), this.Editor.Toolbar.close());\n    const i = (l = this.Editor.BlockSettings.nodes.wrapper) == null ? void 0 : l.contains(t), s = (a = this.Editor.Toolbar.nodes.settingsToggler) == null ? void 0 : a.contains(t), r = i || s;\n    if (this.Editor.BlockSettings.opened && !r) {\n      this.Editor.BlockSettings.close();\n      const c = this.Editor.BlockManager.getBlockByChildNode(t);\n      this.Editor.Toolbar.moveAndOpen(c);\n    }\n    this.Editor.BlockSelection.clearSelection(e);\n  }\n  /**\n   * First touch on editor\n   * Fired before click\n   *\n   * Used to change current block — we need to do it before 'selectionChange' event.\n   * Also:\n   * - Move and show the Toolbar\n   * - Set a Caret\n   *\n   * @param {MouseEvent | TouchEvent} event - touch or mouse event\n   */\n  documentTouched(e) {\n    let t = e.target;\n    if (t === this.nodes.redactor) {\n      const o = e instanceof MouseEvent ? e.clientX : e.touches[0].clientX, i = e instanceof MouseEvent ? e.clientY : e.touches[0].clientY;\n      t = document.elementFromPoint(o, i);\n    }\n    try {\n      this.Editor.BlockManager.setCurrentBlockByChildNode(t);\n    } catch {\n      this.Editor.RectangleSelection.isRectActivated() || this.Editor.Caret.setToTheLastBlock();\n    }\n    this.Editor.Toolbar.moveAndOpen();\n  }\n  /**\n   * All clicks on the redactor zone\n   *\n   * @param {MouseEvent} event - click event\n   * @description\n   * - By clicks on the Editor's bottom zone:\n   *      - if last Block is empty, set a Caret to this\n   *      - otherwise, add a new empty Block and set a Caret to that\n   */\n  redactorClicked(e) {\n    if (!b.isCollapsed)\n      return;\n    const t = e.target, o = e.metaKey || e.ctrlKey;\n    if (d.isAnchor(t) && o) {\n      e.stopImmediatePropagation(), e.stopPropagation();\n      const i = t.getAttribute(\"href\"), s = So(i);\n      Mo(s);\n      return;\n    }\n    this.processBottomZoneClick(e);\n  }\n  /**\n   * Check if user clicks on the Editor's bottom zone:\n   *  - set caret to the last block\n   *  - or add new empty block\n   *\n   * @param event - click event\n   */\n  processBottomZoneClick(e) {\n    const t = this.Editor.BlockManager.getBlockByIndex(-1), o = d.offset(t.holder).bottom, i = e.pageY, { BlockSelection: s } = this.Editor;\n    if (e.target instanceof Element && e.target.isEqualNode(this.nodes.redactor) && /**\n    * If there is cross block selection started, target will be equal to redactor so we need additional check\n    */\n    !s.anyBlockSelected && /**\n    * Prevent caret jumping (to last block) when clicking between blocks\n    */\n    o < i) {\n      e.stopImmediatePropagation(), e.stopPropagation();\n      const { BlockManager: l, Caret: a, Toolbar: c } = this.Editor;\n      (!l.lastBlock.tool.isDefault || !l.lastBlock.isEmpty) && l.insertAtEnd(), a.setToTheLastBlock(), c.moveAndOpen(l.lastBlock);\n    }\n  }\n  /**\n   * Handle selection changes on mobile devices\n   * Uses for showing the Inline Toolbar\n   */\n  selectionChanged() {\n    const { CrossBlockSelection: e, BlockSelection: t } = this.Editor, o = b.anchorElement;\n    if (e.isCrossBlockSelectionStarted && t.anyBlockSelected && b.get().removeAllRanges(), !o) {\n      b.range || this.Editor.InlineToolbar.close();\n      return;\n    }\n    const i = o.closest(`.${D.CSS.content}`);\n    (i === null || i.closest(`.${b.CSS.editorWrapper}`) !== this.nodes.wrapper) && (this.Editor.InlineToolbar.containsNode(o) || this.Editor.InlineToolbar.close(), !(o.dataset.inlineToolbar === \"true\")) || (this.Editor.BlockManager.currentBlock || this.Editor.BlockManager.setCurrentBlockByChildNode(o), this.Editor.InlineToolbar.tryToShow(!0));\n  }\n  /**\n   * Editor.js provides and ability to show placeholders for empty contenteditable elements\n   *\n   * This method watches for input and focus events and toggles 'data-empty' attribute\n   * to workaroud the case, when inputs contains only <br>s and has no visible content\n   * Then, CSS could rely on this attribute to show placeholders\n   */\n  enableInputsEmptyMark() {\n    function e(t) {\n      const o = t.target;\n      Lt(o);\n    }\n    this.readOnlyMutableListeners.on(this.nodes.wrapper, \"input\", e), this.readOnlyMutableListeners.on(this.nodes.wrapper, \"focusin\", e), this.readOnlyMutableListeners.on(this.nodes.wrapper, \"focusout\", e);\n  }\n}\nconst Es = {\n  // API Modules\n  BlocksAPI: zo,\n  CaretAPI: jo,\n  EventsAPI: $o,\n  I18nAPI: ot,\n  API: Yo,\n  InlineToolbarAPI: Wo,\n  ListenersAPI: Ko,\n  NotifierAPI: Zo,\n  ReadOnlyAPI: Go,\n  SanitizerAPI: si,\n  SaverAPI: ni,\n  SelectionAPI: ri,\n  ToolsAPI: li,\n  StylesAPI: ai,\n  ToolbarAPI: ci,\n  TooltipAPI: fi,\n  UiAPI: gi,\n  // Toolbar Modules\n  BlockSettings: Ui,\n  Toolbar: qi,\n  InlineToolbar: Zi,\n  // Modules\n  BlockEvents: Gi,\n  BlockManager: es,\n  BlockSelection: ts,\n  Caret: Re,\n  CrossBlockSelection: os,\n  DragNDrop: is,\n  ModificationsObserver: rs,\n  Paste: ls,\n  ReadOnly: as,\n  RectangleSelection: xe,\n  Renderer: cs,\n  Saver: ds,\n  Tools: go,\n  UI: ys\n};\nclass Bs {\n  /**\n   * @param {EditorConfig} config - user configuration\n   */\n  constructor(e) {\n    this.moduleInstances = {}, this.eventsDispatcher = new Te();\n    let t, o;\n    this.isReady = new Promise((i, s) => {\n      t = i, o = s;\n    }), Promise.resolve().then(async () => {\n      this.configuration = e, this.validate(), this.init(), await this.start(), await this.render();\n      const { BlockManager: i, Caret: s, UI: r, ModificationsObserver: l } = this.moduleInstances;\n      r.checkEmptiness(), l.enable(), this.configuration.autofocus && s.setToBlock(i.blocks[0], s.positions.START), t();\n    }).catch((i) => {\n      I(`Editor.js is not ready because of ${i}`, \"error\"), o(i);\n    });\n  }\n  /**\n   * Setting for configuration\n   *\n   * @param {EditorConfig|string} config - Editor's config to set\n   */\n  set configuration(e) {\n    var o, i;\n    R(e) ? this.config = {\n      ...e\n    } : this.config = {\n      holder: e\n    }, Ze(!!this.config.holderId, \"config.holderId\", \"config.holder\"), this.config.holderId && !this.config.holder && (this.config.holder = this.config.holderId, this.config.holderId = null), this.config.holder == null && (this.config.holder = \"editorjs\"), this.config.logLevel || (this.config.logLevel = It.VERBOSE), xo(this.config.logLevel), Ze(!!this.config.initialBlock, \"config.initialBlock\", \"config.defaultBlock\"), this.config.defaultBlock = this.config.defaultBlock || this.config.initialBlock || \"paragraph\", this.config.minHeight = this.config.minHeight !== void 0 ? this.config.minHeight : 300;\n    const t = {\n      type: this.config.defaultBlock,\n      data: {}\n    };\n    this.config.placeholder = this.config.placeholder || !1, this.config.sanitizer = this.config.sanitizer || {\n      p: !0,\n      b: !0,\n      a: !0\n    }, this.config.hideToolbar = this.config.hideToolbar ? this.config.hideToolbar : !1, this.config.tools = this.config.tools || {}, this.config.i18n = this.config.i18n || {}, this.config.data = this.config.data || { blocks: [] }, this.config.onReady = this.config.onReady || (() => {\n    }), this.config.onChange = this.config.onChange || (() => {\n    }), this.config.inlineToolbar = this.config.inlineToolbar !== void 0 ? this.config.inlineToolbar : !0, (V(this.config.data) || !this.config.data.blocks || this.config.data.blocks.length === 0) && (this.config.data = { blocks: [t] }), this.config.readOnly = this.config.readOnly || !1, (o = this.config.i18n) != null && o.messages && z.setDictionary(this.config.i18n.messages), this.config.i18n.direction = ((i = this.config.i18n) == null ? void 0 : i.direction) || \"ltr\";\n  }\n  /**\n   * Returns private property\n   *\n   * @returns {EditorConfig}\n   */\n  get configuration() {\n    return this.config;\n  }\n  /**\n   * Checks for required fields in Editor's config\n   */\n  validate() {\n    const { holderId: e, holder: t } = this.config;\n    if (e && t)\n      throw Error(\"«holderId» and «holder» param can't assign at the same time.\");\n    if (Q(t) && !d.get(t))\n      throw Error(`element with ID «${t}» is missing. Pass correct holder's ID.`);\n    if (t && R(t) && !d.isElement(t))\n      throw Error(\"«holder» value must be an Element node\");\n  }\n  /**\n   * Initializes modules:\n   *  - make and save instances\n   *  - configure\n   */\n  init() {\n    this.constructModules(), this.configureModules();\n  }\n  /**\n   * Start Editor!\n   *\n   * Get list of modules that needs to be prepared and return a sequence (Promise)\n   *\n   * @returns {Promise<void>}\n   */\n  async start() {\n    await [\n      \"Tools\",\n      \"UI\",\n      \"BlockManager\",\n      \"Paste\",\n      \"BlockSelection\",\n      \"RectangleSelection\",\n      \"CrossBlockSelection\",\n      \"ReadOnly\"\n    ].reduce(\n      (t, o) => t.then(async () => {\n        try {\n          await this.moduleInstances[o].prepare();\n        } catch (i) {\n          if (i instanceof Pt)\n            throw new Error(i.message);\n          I(`Module ${o} was skipped because of %o`, \"warn\", i);\n        }\n      }),\n      Promise.resolve()\n    );\n  }\n  /**\n   * Render initial data\n   */\n  render() {\n    return this.moduleInstances.Renderer.render(this.config.data.blocks);\n  }\n  /**\n   * Make modules instances and save it to the @property this.moduleInstances\n   */\n  constructModules() {\n    Object.entries(Es).forEach(([e, t]) => {\n      try {\n        this.moduleInstances[e] = new t({\n          config: this.configuration,\n          eventsDispatcher: this.eventsDispatcher\n        });\n      } catch (o) {\n        I(\"[constructModules]\", `Module ${e} skipped because`, \"error\", o);\n      }\n    });\n  }\n  /**\n   * Modules instances configuration:\n   *  - pass other modules to the 'state' property\n   *  - ...\n   */\n  configureModules() {\n    for (const e in this.moduleInstances)\n      Object.prototype.hasOwnProperty.call(this.moduleInstances, e) && (this.moduleInstances[e].state = this.getModulesDiff(e));\n  }\n  /**\n   * Return modules without passed name\n   *\n   * @param {string} name - module for witch modules difference should be calculated\n   */\n  getModulesDiff(e) {\n    const t = {};\n    for (const o in this.moduleInstances)\n      o !== e && (t[o] = this.moduleInstances[o]);\n    return t;\n  }\n}\n/**\n * Editor.js\n *\n * @license Apache-2.0\n * @see Editor.js <https://editorjs.io>\n * @author CodeX Team <https://codex.so>\n */\nclass Ts {\n  /** Editor version */\n  static get version() {\n    return \"2.30.6\";\n  }\n  /**\n   * @param {EditorConfig|string|undefined} [configuration] - user configuration\n   */\n  constructor(e) {\n    let t = () => {\n    };\n    R(e) && O(e.onReady) && (t = e.onReady);\n    const o = new Bs(e);\n    this.isReady = o.isReady.then(() => {\n      this.exportAPI(o), t();\n    });\n  }\n  /**\n   * Export external API methods\n   *\n   * @param {Core} editor — Editor's instance\n   */\n  exportAPI(e) {\n    const t = [\"configuration\"], o = () => {\n      Object.values(e.moduleInstances).forEach((s) => {\n        O(s.destroy) && s.destroy(), s.listeners.removeAll();\n      }), pi(), e = null;\n      for (const s in this)\n        Object.prototype.hasOwnProperty.call(this, s) && delete this[s];\n      Object.setPrototypeOf(this, null);\n    };\n    t.forEach((s) => {\n      this[s] = e[s];\n    }), this.destroy = o, Object.setPrototypeOf(this, e.moduleInstances.API.methods), delete this.exportAPI, Object.entries({\n      blocks: {\n        clear: \"clear\",\n        render: \"render\"\n      },\n      caret: {\n        focus: \"focus\"\n      },\n      events: {\n        on: \"on\",\n        off: \"off\",\n        emit: \"emit\"\n      },\n      saver: {\n        save: \"save\"\n      }\n    }).forEach(([s, r]) => {\n      Object.entries(r).forEach(([l, a]) => {\n        this[a] = e.moduleInstances.API.methods[s][l];\n      });\n    });\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@editorjs/editorjs/dist/editorjs.mjs\n");

/***/ }),

/***/ "./node_modules/@editorjs/embed/dist/embed.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@editorjs/embed/dist/embed.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ m)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode('.embed-tool--loading .embed-tool__caption{display:none}.embed-tool--loading .embed-tool__preloader{display:block}.embed-tool--loading .embed-tool__content{display:none}.embed-tool__preloader{display:none;position:relative;height:200px;box-sizing:border-box;border-radius:5px;border:1px solid #e6e9eb}.embed-tool__preloader:before{content:\"\";position:absolute;z-index:3;left:50%;top:50%;width:30px;height:30px;margin-top:-25px;margin-left:-15px;border-radius:50%;border:2px solid #cdd1e0;border-top-color:#388ae5;box-sizing:border-box;animation:embed-preloader-spin 2s infinite linear}.embed-tool__url{position:absolute;bottom:20px;left:50%;transform:translate(-50%);max-width:250px;color:#7b7e89;font-size:11px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.embed-tool__content{width:100%}.embed-tool__caption{margin-top:7px}.embed-tool__caption[contentEditable=true][data-placeholder]:before{position:absolute;content:attr(data-placeholder);color:#707684;font-weight:400;opacity:0}.embed-tool__caption[contentEditable=true][data-placeholder]:empty:before{opacity:1}.embed-tool__caption[contentEditable=true][data-placeholder]:empty:focus:before{opacity:0}@keyframes embed-preloader-spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}')),document.head.appendChild(e)}}catch(o){console.error(\"vite-plugin-css-injected-by-js\",o)}})();\nconst g = {\n  vimeo: {\n    regex: /(?:http[s]?:\\/\\/)?(?:www.)?(?:player.)?vimeo\\.co(?:.+\\/([^\\/]\\d+)(?:#t=[\\d]+)?s?$)/,\n    embedUrl: \"https://player.vimeo.com/video/<%= remote_id %>?title=0&byline=0\",\n    html: '<iframe style=\"width:100%;\" height=\"320\" frameborder=\"0\"></iframe>',\n    height: 320,\n    width: 580\n  },\n  youtube: {\n    regex: /(?:https?:\\/\\/)?(?:www\\.)?(?:(?:youtu\\.be\\/)|(?:youtube\\.com)\\/(?:v\\/|u\\/\\w\\/|embed\\/|watch))(?:(?:\\?v=)?([^#&?=]*))?((?:[?&]\\w*=\\w*)*)/,\n    embedUrl: \"https://www.youtube.com/embed/<%= remote_id %>\",\n    html: '<iframe style=\"width:100%;\" height=\"320\" frameborder=\"0\" allowfullscreen></iframe>',\n    height: 320,\n    width: 580,\n    id: ([s, i]) => {\n      if (!i && s)\n        return s;\n      const r = {\n        start: \"start\",\n        end: \"end\",\n        t: \"start\",\n        // eslint-disable-next-line camelcase\n        time_continue: \"start\",\n        list: \"list\"\n      };\n      let e = i.slice(1).split(\"&\").map((o) => {\n        const [l, t] = o.split(\"=\");\n        return !s && l === \"v\" ? (s = t, null) : !r[l] || t === \"LL\" || t.startsWith(\"RDMM\") || t.startsWith(\"FL\") ? null : `${r[l]}=${t}`;\n      }).filter((o) => !!o);\n      return s + \"?\" + e.join(\"&\");\n    }\n  },\n  coub: {\n    regex: /https?:\\/\\/coub\\.com\\/view\\/([^\\/\\?\\&]+)/,\n    embedUrl: \"https://coub.com/embed/<%= remote_id %>\",\n    html: '<iframe style=\"width:100%;\" height=\"320\" frameborder=\"0\" allowfullscreen></iframe>',\n    height: 320,\n    width: 580\n  },\n  vine: {\n    regex: /https?:\\/\\/vine\\.co\\/v\\/([^\\/\\?\\&]+)/,\n    embedUrl: \"https://vine.co/v/<%= remote_id %>/embed/simple/\",\n    html: '<iframe style=\"width:100%;\" height=\"320\" frameborder=\"0\" allowfullscreen></iframe>',\n    height: 320,\n    width: 580\n  },\n  imgur: {\n    regex: /https?:\\/\\/(?:i\\.)?imgur\\.com.*\\/([a-zA-Z0-9]+)(?:\\.gifv)?/,\n    embedUrl: \"http://imgur.com/<%= remote_id %>/embed\",\n    html: '<iframe allowfullscreen=\"true\" scrolling=\"no\" id=\"imgur-embed-iframe-pub-<%= remote_id %>\" class=\"imgur-embed-iframe-pub\" style=\"height: 500px; width: 100%; border: 1px solid #000\"></iframe>',\n    height: 500,\n    width: 540\n  },\n  gfycat: {\n    regex: /https?:\\/\\/gfycat\\.com(?:\\/detail)?\\/([a-zA-Z]+)/,\n    embedUrl: \"https://gfycat.com/ifr/<%= remote_id %>\",\n    html: `<iframe frameborder='0' scrolling='no' style=\"width:100%;\" height='436' allowfullscreen ></iframe>`,\n    height: 436,\n    width: 580\n  },\n  \"twitch-channel\": {\n    regex: /https?:\\/\\/www\\.twitch\\.tv\\/([^\\/\\?\\&]*)\\/?$/,\n    embedUrl: \"https://player.twitch.tv/?channel=<%= remote_id %>\",\n    html: '<iframe frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\" height=\"366\" style=\"width:100%;\"></iframe>',\n    height: 366,\n    width: 600\n  },\n  \"twitch-video\": {\n    regex: /https?:\\/\\/www\\.twitch\\.tv\\/(?:[^\\/\\?\\&]*\\/v|videos)\\/([0-9]*)/,\n    embedUrl: \"https://player.twitch.tv/?video=v<%= remote_id %>\",\n    html: '<iframe frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\" height=\"366\" style=\"width:100%;\"></iframe>',\n    height: 366,\n    width: 600\n  },\n  \"yandex-music-album\": {\n    regex: /https?:\\/\\/music\\.yandex\\.ru\\/album\\/([0-9]*)\\/?$/,\n    embedUrl: \"https://music.yandex.ru/iframe/#album/<%= remote_id %>/\",\n    html: '<iframe frameborder=\"0\" style=\"border:none;width:540px;height:400px;\" style=\"width:100%;\" height=\"400\"></iframe>',\n    height: 400,\n    width: 540\n  },\n  \"yandex-music-track\": {\n    regex: /https?:\\/\\/music\\.yandex\\.ru\\/album\\/([0-9]*)\\/track\\/([0-9]*)/,\n    embedUrl: \"https://music.yandex.ru/iframe/#track/<%= remote_id %>/\",\n    html: '<iframe frameborder=\"0\" style=\"border:none;width:540px;height:100px;\" style=\"width:100%;\" height=\"100\"></iframe>',\n    height: 100,\n    width: 540,\n    id: (s) => s.join(\"/\")\n  },\n  \"yandex-music-playlist\": {\n    regex: /https?:\\/\\/music\\.yandex\\.ru\\/users\\/([^\\/\\?\\&]*)\\/playlists\\/([0-9]*)/,\n    embedUrl: \"https://music.yandex.ru/iframe/#playlist/<%= remote_id %>/show/cover/description/\",\n    html: '<iframe frameborder=\"0\" style=\"border:none;width:540px;height:400px;\" width=\"540\" height=\"400\"></iframe>',\n    height: 400,\n    width: 540,\n    id: (s) => s.join(\"/\")\n  },\n  codepen: {\n    regex: /https?:\\/\\/codepen\\.io\\/([^\\/\\?\\&]*)\\/pen\\/([^\\/\\?\\&]*)/,\n    embedUrl: \"https://codepen.io/<%= remote_id %>?height=300&theme-id=0&default-tab=css,result&embed-version=2\",\n    html: \"<iframe height='300' scrolling='no' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'></iframe>\",\n    height: 300,\n    width: 600,\n    id: (s) => s.join(\"/embed/\")\n  },\n  instagram: {\n    //it support both reel and post\n    regex: /^https:\\/\\/(?:www\\.)?instagram\\.com\\/(?:reel|p)\\/(.*)/,\n    embedUrl: \"https://www.instagram.com/p/<%= remote_id %>/embed\",\n    html: '<iframe width=\"400\" height=\"505\" style=\"margin: 0 auto;\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>',\n    height: 505,\n    width: 400,\n    id: (s) => {\n      var i;\n      return (i = s == null ? void 0 : s[0]) == null ? void 0 : i.split(\"/\")[0];\n    }\n  },\n  twitter: {\n    regex: /^https?:\\/\\/(www\\.)?(?:twitter\\.com|x\\.com)\\/.+\\/status\\/(\\d+)/,\n    embedUrl: \"https://platform.twitter.com/embed/Tweet.html?id=<%= remote_id %>\",\n    html: '<iframe width=\"600\" height=\"600\" style=\"margin: 0 auto;\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>',\n    height: 300,\n    width: 600,\n    id: (s) => s[1]\n  },\n  pinterest: {\n    regex: /https?:\\/\\/([^\\/\\?\\&]*).pinterest.com\\/pin\\/([^\\/\\?\\&]*)\\/?$/,\n    embedUrl: \"https://assets.pinterest.com/ext/embed.html?id=<%= remote_id %>\",\n    html: \"<iframe scrolling='no' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%; min-height: 400px; max-height: 1000px;'></iframe>\",\n    id: (s) => s[1]\n  },\n  facebook: {\n    regex: /https?:\\/\\/www.facebook.com\\/([^\\/\\?\\&]*)\\/(.*)/,\n    embedUrl: \"https://www.facebook.com/plugins/post.php?href=https://www.facebook.com/<%= remote_id %>&width=500\",\n    html: \"<iframe scrolling='no' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%; min-height: 500px; max-height: 1000px;'></iframe>\",\n    id: (s) => s.join(\"/\")\n  },\n  aparat: {\n    regex: /(?:http[s]?:\\/\\/)?(?:www.)?aparat\\.com\\/v\\/([^\\/\\?\\&]+)\\/?/,\n    embedUrl: \"https://www.aparat.com/video/video/embed/videohash/<%= remote_id %>/vt/frame\",\n    html: '<iframe width=\"600\" height=\"300\" style=\"margin: 0 auto;\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>',\n    height: 300,\n    width: 600\n  },\n  miro: {\n    regex: /https:\\/\\/miro.com\\/\\S+(\\S{12})\\/(\\S+)?/,\n    embedUrl: \"https://miro.com/app/live-embed/<%= remote_id %>\",\n    html: '<iframe width=\"700\" height=\"500\" style=\"margin: 0 auto;\" allowFullScreen frameBorder=\"0\" scrolling=\"no\"></iframe>'\n  },\n  github: {\n    regex: /https?:\\/\\/gist.github.com\\/([^\\/\\?\\&]*)\\/([^\\/\\?\\&]*)/,\n    embedUrl: 'data:text/html;charset=utf-8,<head><base target=\"_blank\" /></head><body><script src=\"https://gist.github.com/<%= remote_id %>\" ><\\/script></body>',\n    html: '<iframe width=\"100%\" height=\"350\" frameborder=\"0\" style=\"margin: 0 auto;\"></iframe>',\n    height: 300,\n    width: 600,\n    id: (s) => `${s.join(\"/\")}.js`\n  }\n};\nfunction p(s, i, r) {\n  var e, o, l, t, a;\n  i == null && (i = 100);\n  function n() {\n    var d = Date.now() - t;\n    d < i && d >= 0 ? e = setTimeout(n, i - d) : (e = null, r || (a = s.apply(l, o), l = o = null));\n  }\n  var h = function() {\n    l = this, o = arguments, t = Date.now();\n    var d = r && !e;\n    return e || (e = setTimeout(n, i)), d && (a = s.apply(l, o), l = o = null), a;\n  };\n  return h.clear = function() {\n    e && (clearTimeout(e), e = null);\n  }, h.flush = function() {\n    e && (a = s.apply(l, o), l = o = null, clearTimeout(e), e = null);\n  }, h;\n}\np.debounce = p;\nvar w = p;\nclass m {\n  /**\n   * @param {{data: EmbedData, config: EmbedConfig, api: object}}\n   *   data — previously saved data\n   *   config - user config for Tool\n   *   api - Editor.js API\n   *   readOnly - read-only mode flag\n   */\n  constructor({ data: i, api: r, readOnly: e }) {\n    this.api = r, this._data = {}, this.element = null, this.readOnly = e, this.data = i;\n  }\n  /**\n   * @param {EmbedData} data - embed data\n   * @param {RegExp} [data.regex] - pattern of source URLs\n   * @param {string} [data.embedUrl] - URL scheme to embedded page. Use '<%= remote_id %>' to define a place to insert resource id\n   * @param {string} [data.html] - iframe which contains embedded content\n   * @param {number} [data.height] - iframe height\n   * @param {number} [data.width] - iframe width\n   * @param {string} [data.caption] - caption\n   */\n  set data(i) {\n    var h;\n    if (!(i instanceof Object))\n      throw Error(\"Embed Tool data should be object\");\n    const { service: r, source: e, embed: o, width: l, height: t, caption: a = \"\" } = i;\n    this._data = {\n      service: r || this.data.service,\n      source: e || this.data.source,\n      embed: o || this.data.embed,\n      width: l || this.data.width,\n      height: t || this.data.height,\n      caption: a || this.data.caption || \"\"\n    };\n    const n = this.element;\n    n && ((h = n.parentNode) == null || h.replaceChild(this.render(), n));\n  }\n  /**\n   * @returns {EmbedData}\n   */\n  get data() {\n    if (this.element) {\n      const i = this.element.querySelector(`.${this.api.styles.input}`);\n      this._data.caption = i ? i.innerHTML : \"\";\n    }\n    return this._data;\n  }\n  /**\n   * Get plugin styles\n   *\n   * @returns {object}\n   */\n  get CSS() {\n    return {\n      baseClass: this.api.styles.block,\n      input: this.api.styles.input,\n      container: \"embed-tool\",\n      containerLoading: \"embed-tool--loading\",\n      preloader: \"embed-tool__preloader\",\n      caption: \"embed-tool__caption\",\n      url: \"embed-tool__url\",\n      content: \"embed-tool__content\"\n    };\n  }\n  /**\n   * Render Embed tool content\n   *\n   * @returns {HTMLElement}\n   */\n  render() {\n    if (!this.data.service) {\n      const a = document.createElement(\"div\");\n      return this.element = a, a;\n    }\n    const { html: i } = m.services[this.data.service], r = document.createElement(\"div\"), e = document.createElement(\"div\"), o = document.createElement(\"template\"), l = this.createPreloader();\n    r.classList.add(this.CSS.baseClass, this.CSS.container, this.CSS.containerLoading), e.classList.add(this.CSS.input, this.CSS.caption), r.appendChild(l), e.contentEditable = (!this.readOnly).toString(), e.dataset.placeholder = this.api.i18n.t(\"Enter a caption\"), e.innerHTML = this.data.caption || \"\", o.innerHTML = i, o.content.firstChild.setAttribute(\"src\", this.data.embed), o.content.firstChild.classList.add(this.CSS.content);\n    const t = this.embedIsReady(r);\n    return o.content.firstChild && r.appendChild(o.content.firstChild), r.appendChild(e), t.then(() => {\n      r.classList.remove(this.CSS.containerLoading);\n    }), this.element = r, r;\n  }\n  /**\n   * Creates preloader to append to container while data is loading\n   *\n   * @returns {HTMLElement}\n   */\n  createPreloader() {\n    const i = document.createElement(\"preloader\"), r = document.createElement(\"div\");\n    return r.textContent = this.data.source, i.classList.add(this.CSS.preloader), r.classList.add(this.CSS.url), i.appendChild(r), i;\n  }\n  /**\n   * Save current content and return EmbedData object\n   *\n   * @returns {EmbedData}\n   */\n  save() {\n    return this.data;\n  }\n  /**\n   * Handle pasted url and return Service object\n   *\n   * @param {PasteEvent} event - event with pasted data\n   */\n  onPaste(i) {\n    var c;\n    const { key: r, data: e } = i.detail, { regex: o, embedUrl: l, width: t, height: a, id: n = (u) => u.shift() || \"\" } = m.services[r], h = (c = o.exec(e)) == null ? void 0 : c.slice(1), d = h ? l.replace(/<%= remote_id %>/g, n(h)) : \"\";\n    this.data = {\n      service: r,\n      source: e,\n      embed: d,\n      width: t,\n      height: a\n    };\n  }\n  /**\n   * Analyze provided config and make object with services to use\n   *\n   * @param {EmbedConfig} config - configuration of embed block element\n   */\n  static prepare({ config: i = {} }) {\n    const { services: r = {} } = i;\n    let e = Object.entries(g);\n    const o = Object.entries(r).filter(([t, a]) => typeof a == \"boolean\" && a === !0).map(([t]) => t), l = Object.entries(r).filter(([t, a]) => typeof a == \"object\").filter(([t, a]) => m.checkServiceConfig(a)).map(([t, a]) => {\n      const { regex: n, embedUrl: h, html: d, height: c, width: u, id: f } = a;\n      return [t, {\n        regex: n,\n        embedUrl: h,\n        html: d,\n        height: c,\n        width: u,\n        id: f\n      }];\n    });\n    o.length && (e = e.filter(([t]) => o.includes(t))), e = e.concat(l), m.services = e.reduce((t, [a, n]) => a in t ? (t[a] = Object.assign({}, t[a], n), t) : (t[a] = n, t), {}), m.patterns = e.reduce((t, [a, n]) => (n && typeof n != \"boolean\" && (t[a] = n.regex), t), {});\n  }\n  /**\n   * Check if Service config is valid\n   *\n   * @param {Service} config - configuration of embed block element\n   * @returns {boolean}\n   */\n  static checkServiceConfig(i) {\n    const { regex: r, embedUrl: e, html: o, height: l, width: t, id: a } = i;\n    let n = !!(r && r instanceof RegExp) && !!(e && typeof e == \"string\") && !!(o && typeof o == \"string\");\n    return n = n && (a !== void 0 ? a instanceof Function : !0), n = n && (l !== void 0 ? Number.isFinite(l) : !0), n = n && (t !== void 0 ? Number.isFinite(t) : !0), n;\n  }\n  /**\n   * Paste configuration to enable pasted URLs processing by Editor\n   *\n   * @returns {object} - object of patterns which contain regx for pasteConfig\n   */\n  static get pasteConfig() {\n    return {\n      patterns: m.patterns\n    };\n  }\n  /**\n   * Notify core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Checks that mutations in DOM have finished after appending iframe content\n   *\n   * @param {HTMLElement} targetNode - HTML-element mutations of which to listen\n   * @returns {Promise<any>} - result that all mutations have finished\n   */\n  embedIsReady(i) {\n    let e;\n    return new Promise((o, l) => {\n      e = new MutationObserver(w.debounce(o, 450)), e.observe(i, {\n        childList: !0,\n        subtree: !0\n      });\n    }).then(() => {\n      e.disconnect();\n    });\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@editorjs/embed/dist/embed.mjs\n");

/***/ }),

/***/ "./node_modules/@editorjs/header/dist/header.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@editorjs/header/dist/header.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ v)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".ce-header{padding:.6em 0 3px;margin:0;line-height:1.25em;outline:none}.ce-header p,.ce-header div{padding:0!important;margin:0!important}\")),document.head.appendChild(e)}}catch(n){console.error(\"vite-plugin-css-injected-by-js\",n)}})();\nconst a = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M19 17V10.2135C19 10.1287 18.9011 10.0824 18.836 10.1367L16 12.5\"/></svg>', l = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 11C16 10 19 9.5 19 12C19 13.9771 16.0684 13.9997 16.0012 16.8981C15.9999 16.9533 16.0448 17 16.1 17L19.3 17\"/></svg>', o = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 11C16 10.5 16.8323 10 17.6 10C18.3677 10 19.5 10.311 19.5 11.5C19.5 12.5315 18.7474 12.9022 18.548 12.9823C18.5378 12.9864 18.5395 13.0047 18.5503 13.0063C18.8115 13.0456 20 13.3065 20 14.8C20 16 19.5 17 17.8 17C17.8 17 16 17 16 16.3\"/></svg>', h = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M18 10L15.2834 14.8511C15.246 14.9178 15.294 15 15.3704 15C16.8489 15 18.7561 15 20.2 15M19 17C19 15.7187 19 14.8813 19 13.6\"/></svg>', d = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 15.9C16 15.9 16.3768 17 17.8 17C19.5 17 20 15.6199 20 14.7C20 12.7323 17.6745 12.0486 16.1635 12.9894C16.094 13.0327 16 12.9846 16 12.9027V10.1C16 10.0448 16.0448 10 16.1 10H19.8\"/></svg>', u = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M19.5 10C16.5 10.5 16 13.3285 16 15M16 15V15C16 16.1046 16.8954 17 18 17H18.3246C19.3251 17 20.3191 16.3492 20.2522 15.3509C20.0612 12.4958 16 12.6611 16 15Z\"/></svg>', g = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9 7L9 12M9 17V12M9 12L15 12M15 7V12M15 17L15 12\"/></svg>';\n/**\n * Header block for the Editor.js.\n *\n * @author CodeX (team@ifmo.su)\n * @copyright CodeX 2018\n * @license MIT\n * @version 2.0.0\n */\nclass v {\n  constructor({ data: e, config: t, api: s, readOnly: r }) {\n    this.api = s, this.readOnly = r, this._settings = t, this._data = this.normalizeData(e), this._element = this.getTag();\n  }\n  /**\n   * Styles\n   */\n  get _CSS() {\n    return {\n      block: this.api.styles.block,\n      wrapper: \"ce-header\"\n    };\n  }\n  /**\n   * Check if data is valid\n   * \n   * @param {any} data - data to check\n   * @returns {data is HeaderData}\n   * @private\n   */\n  isHeaderData(e) {\n    return e.text !== void 0;\n  }\n  /**\n   * Normalize input data\n   *\n   * @param {HeaderData} data - saved data to process\n   *\n   * @returns {HeaderData}\n   * @private\n   */\n  normalizeData(e) {\n    const t = { text: \"\", level: this.defaultLevel.number };\n    return this.isHeaderData(e) && (t.text = e.text || \"\", e.level !== void 0 && !isNaN(parseInt(e.level.toString())) && (t.level = parseInt(e.level.toString()))), t;\n  }\n  /**\n   * Return Tool's view\n   *\n   * @returns {HTMLHeadingElement}\n   * @public\n   */\n  render() {\n    return this._element;\n  }\n  /**\n   * Returns header block tunes config\n   *\n   * @returns {Array}\n   */\n  renderSettings() {\n    return this.levels.map((e) => ({\n      icon: e.svg,\n      label: this.api.i18n.t(`Heading ${e.number}`),\n      onActivate: () => this.setLevel(e.number),\n      closeOnActivate: !0,\n      isActive: this.currentLevel.number === e.number,\n      render: () => document.createElement(\"div\")\n    }));\n  }\n  /**\n   * Callback for Block's settings buttons\n   *\n   * @param {number} level - level to set\n   */\n  setLevel(e) {\n    this.data = {\n      level: e,\n      text: this.data.text\n    };\n  }\n  /**\n   * Method that specified how to merge two Text blocks.\n   * Called by Editor.js by backspace at the beginning of the Block\n   *\n   * @param {HeaderData} data - saved data to merger with current block\n   * @public\n   */\n  merge(e) {\n    this._element.insertAdjacentHTML(\"beforeend\", e.text);\n  }\n  /**\n   * Validate Text block data:\n   * - check for emptiness\n   *\n   * @param {HeaderData} blockData — data received after saving\n   * @returns {boolean} false if saved data is not correct, otherwise true\n   * @public\n   */\n  validate(e) {\n    return e.text.trim() !== \"\";\n  }\n  /**\n   * Extract Tool's data from the view\n   *\n   * @param {HTMLHeadingElement} toolsContent - Text tools rendered view\n   * @returns {HeaderData} - saved data\n   * @public\n   */\n  save(e) {\n    return {\n      text: e.innerHTML,\n      level: this.currentLevel.number\n    };\n  }\n  /**\n   * Allow Header to be converted to/from other blocks\n   */\n  static get conversionConfig() {\n    return {\n      export: \"text\",\n      // use 'text' property for other blocks\n      import: \"text\"\n      // fill 'text' property from other block's export string\n    };\n  }\n  /**\n   * Sanitizer Rules\n   */\n  static get sanitize() {\n    return {\n      level: !1,\n      text: {}\n    };\n  }\n  /**\n   * Returns true to notify core that read-only is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Get current Tools`s data\n   *\n   * @returns {HeaderData} Current data\n   * @private\n   */\n  get data() {\n    return this._data.text = this._element.innerHTML, this._data.level = this.currentLevel.number, this._data;\n  }\n  /**\n   * Store data in plugin:\n   * - at the this._data property\n   * - at the HTML\n   *\n   * @param {HeaderData} data — data to set\n   * @private\n   */\n  set data(e) {\n    if (this._data = this.normalizeData(e), e.level !== void 0 && this._element.parentNode) {\n      const t = this.getTag();\n      t.innerHTML = this._element.innerHTML, this._element.parentNode.replaceChild(t, this._element), this._element = t;\n    }\n    e.text !== void 0 && (this._element.innerHTML = this._data.text || \"\");\n  }\n  /**\n   * Get tag for target level\n   * By default returns second-leveled header\n   *\n   * @returns {HTMLElement}\n   */\n  getTag() {\n    const e = document.createElement(this.currentLevel.tag);\n    return e.innerHTML = this._data.text || \"\", e.classList.add(this._CSS.wrapper), e.contentEditable = this.readOnly ? \"false\" : \"true\", e.dataset.placeholder = this.api.i18n.t(this._settings.placeholder || \"\"), e;\n  }\n  /**\n   * Get current level\n   *\n   * @returns {level}\n   */\n  get currentLevel() {\n    let e = this.levels.find((t) => t.number === this._data.level);\n    return e || (e = this.defaultLevel), e;\n  }\n  /**\n   * Return default level\n   *\n   * @returns {level}\n   */\n  get defaultLevel() {\n    if (this._settings.defaultLevel) {\n      const e = this.levels.find((t) => t.number === this._settings.defaultLevel);\n      if (e)\n        return e;\n      console.warn(\"(ง'̀-'́)ง Heading Tool: the default level specified was not found in available levels\");\n    }\n    return this.levels[1];\n  }\n  /**\n   * @typedef {object} level\n   * @property {number} number - level number\n   * @property {string} tag - tag corresponds with level number\n   * @property {string} svg - icon\n   */\n  /**\n   * Available header levels\n   *\n   * @returns {level[]}\n   */\n  get levels() {\n    const e = [\n      {\n        number: 1,\n        tag: \"H1\",\n        svg: a\n      },\n      {\n        number: 2,\n        tag: \"H2\",\n        svg: l\n      },\n      {\n        number: 3,\n        tag: \"H3\",\n        svg: o\n      },\n      {\n        number: 4,\n        tag: \"H4\",\n        svg: h\n      },\n      {\n        number: 5,\n        tag: \"H5\",\n        svg: d\n      },\n      {\n        number: 6,\n        tag: \"H6\",\n        svg: u\n      }\n    ];\n    return this._settings.levels ? e.filter(\n      (t) => this._settings.levels.includes(t.number)\n    ) : e;\n  }\n  /**\n   * Handle H1-H6 tags on paste to substitute it with header Tool\n   *\n   * @param {PasteEvent} event - event with pasted content\n   */\n  onPaste(e) {\n    const t = e.detail;\n    if (\"data\" in t) {\n      const s = t.data;\n      let r = this.defaultLevel.number;\n      switch (s.tagName) {\n        case \"H1\":\n          r = 1;\n          break;\n        case \"H2\":\n          r = 2;\n          break;\n        case \"H3\":\n          r = 3;\n          break;\n        case \"H4\":\n          r = 4;\n          break;\n        case \"H5\":\n          r = 5;\n          break;\n        case \"H6\":\n          r = 6;\n          break;\n      }\n      this._settings.levels && (r = this._settings.levels.reduce((n, i) => Math.abs(i - r) < Math.abs(n - r) ? i : n)), this.data = {\n        level: r,\n        text: s.innerHTML\n      };\n    }\n  }\n  /**\n   * Used by Editor.js paste handling API.\n   * Provides configuration to handle H1-H6 tags.\n   *\n   * @returns {{handler: (function(HTMLElement): {text: string}), tags: string[]}}\n   */\n  static get pasteConfig() {\n    return {\n      tags: [\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\"]\n    };\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: g,\n      title: \"Heading\"\n    };\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@editorjs/header/dist/header.mjs\n");

/***/ }),

/***/ "./node_modules/@editorjs/list/dist/list.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@editorjs/list/dist/list.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ d)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".cdx-list{margin:0;padding-left:40px;outline:none}.cdx-list__item{padding:5.5px 0 5.5px 3px;line-height:1.6em}.cdx-list--unordered{list-style:disc}.cdx-list--ordered{list-style:decimal}.cdx-list-settings{display:flex}.cdx-list-settings .cdx-settings-button{width:50%}\")),document.head.appendChild(e)}}catch(t){console.error(\"vite-plugin-css-injected-by-js\",t)}})();\nconst a = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><line x1=\"9\" x2=\"19\" y1=\"7\" y2=\"7\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"9\" x2=\"19\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"9\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 17H4.99002\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 12H4.99002\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 7H4.99002\"/></svg>', o = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><line x1=\"12\" x2=\"19\" y1=\"7\" y2=\"7\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"12\" x2=\"19\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"12\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7.79999 14L7.79999 7.2135C7.79999 7.12872 7.7011 7.0824 7.63597 7.13668L4.79999 9.5\"/></svg>';\nclass d {\n  /**\n   * Notify core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Allow to use native Enter behaviour\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: a,\n      title: \"List\"\n    };\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {object} params - tool constructor options\n   * @param {ListData} params.data - previously saved data\n   * @param {object} params.config - user config for Tool\n   * @param {object} params.api - Editor.js API\n   * @param {boolean} params.readOnly - read-only mode flag\n   */\n  constructor({ data: e, config: t, api: r, readOnly: s }) {\n    this._elements = {\n      wrapper: null\n    }, this.api = r, this.readOnly = s, this.settings = [\n      {\n        name: \"unordered\",\n        label: this.api.i18n.t(\"Unordered\"),\n        icon: a,\n        default: t.defaultStyle === \"unordered\" || !1\n      },\n      {\n        name: \"ordered\",\n        label: this.api.i18n.t(\"Ordered\"),\n        icon: o,\n        default: t.defaultStyle === \"ordered\" || !0\n      }\n    ], this._data = {\n      style: this.settings.find((i) => i.default === !0).name,\n      items: []\n    }, this.data = e;\n  }\n  /**\n   * Returns list tag with items\n   *\n   * @returns {Element}\n   * @public\n   */\n  render() {\n    return this._elements.wrapper = this.makeMainTag(this._data.style), this._data.items.length ? this._data.items.forEach((e) => {\n      this._elements.wrapper.appendChild(this._make(\"li\", this.CSS.item, {\n        innerHTML: e\n      }));\n    }) : this._elements.wrapper.appendChild(this._make(\"li\", this.CSS.item)), this.readOnly || this._elements.wrapper.addEventListener(\"keydown\", (e) => {\n      const [t, r] = [13, 8];\n      switch (e.keyCode) {\n        case t:\n          this.getOutofList(e);\n          break;\n        case r:\n          this.backspace(e);\n          break;\n      }\n    }, !1), this._elements.wrapper;\n  }\n  /**\n   * @returns {ListData}\n   * @public\n   */\n  save() {\n    return this.data;\n  }\n  /**\n   * Allow List Tool to be converted to/from other block\n   *\n   * @returns {{export: Function, import: Function}}\n   */\n  static get conversionConfig() {\n    return {\n      /**\n       * To create exported string from list, concatenate items by dot-symbol.\n       *\n       * @param {ListData} data - list data to create a string from thats\n       * @returns {string}\n       */\n      export: (e) => e.items.join(\". \"),\n      /**\n       * To create a list from other block's string, just put it at the first item\n       *\n       * @param {string} string - string to create list tool data from that\n       * @returns {ListData}\n       */\n      import: (e) => ({\n        items: [e],\n        style: \"unordered\"\n      })\n    };\n  }\n  /**\n   * Sanitizer rules\n   *\n   * @returns {object}\n   */\n  static get sanitize() {\n    return {\n      style: {},\n      items: {\n        br: !0\n      }\n    };\n  }\n  /**\n   * Settings\n   *\n   * @public\n   * @returns {Array}\n   */\n  renderSettings() {\n    return this.settings.map((e) => ({\n      ...e,\n      isActive: this._data.style === e.name,\n      closeOnActivate: !0,\n      onActivate: () => this.toggleTune(e.name)\n    }));\n  }\n  /**\n   * On paste callback that is fired from Editor\n   *\n   * @param {PasteEvent} event - event with pasted data\n   */\n  onPaste(e) {\n    const t = e.detail.data;\n    this.data = this.pasteHandler(t);\n  }\n  /**\n   * List Tool on paste configuration\n   *\n   * @public\n   */\n  static get pasteConfig() {\n    return {\n      tags: [\"OL\", \"UL\", \"LI\"]\n    };\n  }\n  /**\n   * Creates main <ul> or <ol> tag depended on style\n   *\n   * @param {string} style - 'ordered' or 'unordered'\n   * @returns {HTMLOListElement|HTMLUListElement}\n   */\n  makeMainTag(e) {\n    const t = e === \"ordered\" ? this.CSS.wrapperOrdered : this.CSS.wrapperUnordered, r = e === \"ordered\" ? \"ol\" : \"ul\";\n    return this._make(r, [this.CSS.baseBlock, this.CSS.wrapper, t], {\n      contentEditable: !this.readOnly\n    });\n  }\n  /**\n   * Toggles List style\n   *\n   * @param {string} style - 'ordered'|'unordered'\n   */\n  toggleTune(e) {\n    const t = this.makeMainTag(e);\n    for (; this._elements.wrapper.hasChildNodes(); )\n      t.appendChild(this._elements.wrapper.firstChild);\n    this._elements.wrapper.replaceWith(t), this._elements.wrapper = t, this._data.style = e;\n  }\n  /**\n   * Styles\n   *\n   * @private\n   */\n  get CSS() {\n    return {\n      baseBlock: this.api.styles.block,\n      wrapper: \"cdx-list\",\n      wrapperOrdered: \"cdx-list--ordered\",\n      wrapperUnordered: \"cdx-list--unordered\",\n      item: \"cdx-list__item\"\n    };\n  }\n  /**\n   * List data setter\n   *\n   * @param {ListData} listData\n   */\n  set data(e) {\n    e || (e = {}), this._data.style = e.style || this.settings.find((r) => r.default === !0).name, this._data.items = e.items || [];\n    const t = this._elements.wrapper;\n    t && t.parentNode.replaceChild(this.render(), t);\n  }\n  /**\n   * Return List data\n   *\n   * @returns {ListData}\n   */\n  get data() {\n    this._data.items = [];\n    const e = this._elements.wrapper.querySelectorAll(`.${this.CSS.item}`);\n    for (let t = 0; t < e.length; t++)\n      e[t].innerHTML.replace(\"<br>\", \" \").trim() && this._data.items.push(e[t].innerHTML);\n    return this._data;\n  }\n  /**\n   * Helper for making Elements with attributes\n   *\n   * @param  {string} tagName           - new Element tag name\n   * @param  {Array|string} classNames  - list or name of CSS classname(s)\n   * @param  {object} attributes        - any attributes\n   * @returns {Element}\n   */\n  _make(e, t = null, r = {}) {\n    const s = document.createElement(e);\n    Array.isArray(t) ? s.classList.add(...t) : t && s.classList.add(t);\n    for (const i in r)\n      s[i] = r[i];\n    return s;\n  }\n  /**\n   * Returns current List item by the caret position\n   *\n   * @returns {Element}\n   */\n  get currentItem() {\n    let e = window.getSelection().anchorNode;\n    return e.nodeType !== Node.ELEMENT_NODE && (e = e.parentNode), e.closest(`.${this.CSS.item}`);\n  }\n  /**\n   * Get out from List Tool\n   * by Enter on the empty last item\n   *\n   * @param {KeyboardEvent} event\n   */\n  getOutofList(e) {\n    const t = this._elements.wrapper.querySelectorAll(\".\" + this.CSS.item);\n    if (t.length < 2)\n      return;\n    const r = t[t.length - 1], s = this.currentItem;\n    s === r && !r.textContent.trim().length && (s.parentElement.removeChild(s), this.api.blocks.insert(), this.api.caret.setToBlock(this.api.blocks.getCurrentBlockIndex()), e.preventDefault(), e.stopPropagation());\n  }\n  /**\n   * Handle backspace\n   *\n   * @param {KeyboardEvent} event\n   */\n  backspace(e) {\n    const t = this._elements.wrapper.querySelectorAll(\".\" + this.CSS.item), r = t[0];\n    r && t.length < 2 && !r.innerHTML.replace(\"<br>\", \" \").trim() && e.preventDefault();\n  }\n  /**\n   * Select LI content by CMD+A\n   *\n   * @param {KeyboardEvent} event\n   */\n  selectItem(e) {\n    e.preventDefault();\n    const t = window.getSelection(), r = t.anchorNode.parentNode, s = r.closest(\".\" + this.CSS.item), i = new Range();\n    i.selectNodeContents(s), t.removeAllRanges(), t.addRange(i);\n  }\n  /**\n   * Handle UL, OL and LI tags paste and returns List data\n   *\n   * @param {HTMLUListElement|HTMLOListElement|HTMLLIElement} element\n   * @returns {ListData}\n   */\n  pasteHandler(e) {\n    const { tagName: t } = e;\n    let r;\n    switch (t) {\n      case \"OL\":\n        r = \"ordered\";\n        break;\n      case \"UL\":\n      case \"LI\":\n        r = \"unordered\";\n    }\n    const s = {\n      style: r,\n      items: []\n    };\n    if (t === \"LI\")\n      s.items = [e.innerHTML];\n    else {\n      const i = Array.from(e.querySelectorAll(\"LI\"));\n      s.items = i.map((n) => n.innerHTML).filter((n) => !!n.trim());\n    }\n    return s;\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@editorjs/list/dist/list.mjs\n");

/***/ }),

/***/ "./node_modules/@editorjs/nested-list/dist/nested-list.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@editorjs/nested-list/dist/nested-list.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ f)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode('.cdx-nested-list{margin:0;padding:0;outline:none;counter-reset:item;list-style:none}.cdx-nested-list__item{line-height:1.6em;display:flex;margin:2px 0}.cdx-nested-list__item [contenteditable]{outline:none}.cdx-nested-list__item-body{flex-grow:2}.cdx-nested-list__item-content,.cdx-nested-list__item-children{flex-basis:100%}.cdx-nested-list__item-content{word-break:break-word;white-space:pre-wrap}.cdx-nested-list__item:before{counter-increment:item;margin-right:5px;white-space:nowrap}.cdx-nested-list--ordered>.cdx-nested-list__item:before{content:counters(item,\".\") \". \"}.cdx-nested-list--unordered>.cdx-nested-list__item:before{content:\"•\"}.cdx-nested-list__settings{display:flex}.cdx-nested-list__settings .cdx-settings-button{width:50%}')),document.head.appendChild(e)}}catch(t){console.error(\"vite-plugin-css-injected-by-js\",t)}})();\nfunction c(d) {\n  return d.nodeType === Node.ELEMENT_NODE;\n}\nfunction p(d, e = null, t) {\n  const r = document.createElement(d);\n  Array.isArray(e) ? r.classList.add(...e) : e && r.classList.add(e);\n  for (const n in t)\n    r[n] = t[n];\n  return r;\n}\nfunction g(d) {\n  const e = p(\"div\");\n  return e.appendChild(d), e.innerHTML;\n}\nfunction C(d) {\n  let e;\n  return d.nodeType !== Node.ELEMENT_NODE ? e = d.textContent : (e = d.innerHTML, e = e.replaceAll(\"<br>\", \"\")), (e == null ? void 0 : e.trim().length) === 0;\n}\nclass u {\n  /**\n   * Store internal properties\n   */\n  constructor() {\n    this.savedFakeCaret = void 0;\n  }\n  /**\n   * Saves caret position using hidden <span>\n   *\n   * @returns {void}\n   */\n  save() {\n    const e = u.range, t = p(\"span\");\n    t.hidden = !0, e && (e.insertNode(t), this.savedFakeCaret = t);\n  }\n  /**\n   * Restores the caret position saved by the save() method\n   *\n   * @returns {void}\n   */\n  restore() {\n    if (!this.savedFakeCaret)\n      return;\n    const e = window.getSelection();\n    if (!e)\n      return;\n    const t = new Range();\n    t.setStartAfter(this.savedFakeCaret), t.setEndAfter(this.savedFakeCaret), e.removeAllRanges(), e.addRange(t), setTimeout(() => {\n      var r;\n      (r = this.savedFakeCaret) == null || r.remove();\n    }, 150);\n  }\n  /**\n   * Returns the first range\n   *\n   * @returns {Range|null}\n   */\n  static get range() {\n    const e = window.getSelection();\n    return e && e.rangeCount ? e.getRangeAt(0) : null;\n  }\n  /**\n   * Extract content fragment from Caret position to the end of contenteditable element\n   *\n   * @returns {DocumentFragment|void}\n   */\n  static extractFragmentFromCaretPositionTillTheEnd() {\n    const e = window.getSelection();\n    if (!e || !e.rangeCount)\n      return;\n    const t = e.getRangeAt(0);\n    let r = t.startContainer;\n    if (r.nodeType !== Node.ELEMENT_NODE) {\n      if (!r.parentNode)\n        return;\n      r = r.parentNode;\n    }\n    if (!c(r))\n      return;\n    const n = r.closest(\"[contenteditable]\");\n    if (!n)\n      return;\n    t.deleteContents();\n    const s = t.cloneRange();\n    return s.selectNodeContents(n), s.setStart(t.endContainer, t.endOffset), s.extractContents();\n  }\n  /**\n   * Set focus to contenteditable or native input element\n   *\n   * @param {HTMLElement} element - element where to set focus\n   * @param {boolean} atStart - where to set focus: at the start or at the end\n   * @returns {void}\n   */\n  static focus(e, t = !0) {\n    const r = document.createRange(), n = window.getSelection();\n    n && (r.selectNodeContents(e), r.collapse(t), n.removeAllRanges(), n.addRange(r));\n  }\n  /**\n   * Check if the caret placed at the start of the contenteditable element\n   *\n   * @returns {boolean}\n   */\n  static isAtStart() {\n    const e = window.getSelection();\n    if (!e || e.focusOffset > 0)\n      return !1;\n    const t = e.focusNode;\n    return !t || !c(t) ? !1 : u.getHigherLevelSiblings(t, \"left\").every((s) => C(s));\n  }\n  /**\n   * Get all first-level (first child of [contenteditabel]) siblings from passed node\n   * Then you can check it for emptiness\n   *\n   * @example\n   * <div contenteditable>\n   * <p></p>                            |\n   * <p></p>                            | left first-level siblings\n   * <p></p>                            |\n   * <blockquote><a><b>adaddad</b><a><blockquote>       <-- passed node for example <b>\n   * <p></p>                            |\n   * <p></p>                            | right first-level siblings\n   * <p></p>                            |\n   * </div>\n   * @param {HTMLElement} from - element from which siblings should be searched\n   * @param {'left' | 'right'} direction - direction of search\n   * @returns {HTMLElement[]}\n   */\n  static getHigherLevelSiblings(e, t = \"left\") {\n    let r = e;\n    const n = [];\n    for (; r.parentNode && r.parentNode.contentEditable !== \"true\"; )\n      r = r.parentNode;\n    const s = t === \"left\" ? \"previousSibling\" : \"nextSibling\";\n    for (; r[s]; )\n      r = r[s], n.push(r);\n    return n;\n  }\n}\nconst w = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><line x1=\"9\" x2=\"19\" y1=\"7\" y2=\"7\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"9\" x2=\"19\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"9\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 17H4.99002\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 12H4.99002\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 7H4.99002\"/></svg>', S = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><line x1=\"12\" x2=\"19\" y1=\"7\" y2=\"7\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"12\" x2=\"19\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"12\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7.79999 14L7.79999 7.2135C7.79999 7.12872 7.7011 7.0824 7.63597 7.13668L4.79999 9.5\"/></svg>';\nclass f {\n  /**\n   * Notify core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Allow to use native Enter behaviour\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {ToolboxConfig}\n   */\n  static get toolbox() {\n    return {\n      icon: S,\n      title: \"List\"\n    };\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {object} params - tool constructor options\n   * @param {ListData} params.data - previously saved data\n   * @param {object} params.config - user config for Tool\n   * @param {object} params.api - Editor.js API\n   * @param {boolean} params.readOnly - read-only mode flag\n   */\n  constructor({ data: e, config: t, api: r, readOnly: n }) {\n    var i;\n    this.nodes = {\n      wrapper: null\n    }, this.api = r, this.readOnly = n, this.config = t, this.defaultListStyle = ((i = this.config) == null ? void 0 : i.defaultStyle) === \"ordered\" ? \"ordered\" : \"unordered\";\n    const s = {\n      style: this.defaultListStyle,\n      items: []\n    };\n    this.data = e && Object.keys(e).length ? e : s, this.caret = new u();\n  }\n  /**\n   * Returns list tag with items\n   *\n   * @returns {Element}\n   * @public\n   */\n  render() {\n    return this.nodes.wrapper = this.makeListWrapper(this.data.style, [\n      this.CSS.baseBlock\n    ]), this.data.items.length ? this.appendItems(this.data.items, this.nodes.wrapper) : this.appendItems(\n      [\n        {\n          content: \"\",\n          items: []\n        }\n      ],\n      this.nodes.wrapper\n    ), this.readOnly || this.nodes.wrapper.addEventListener(\n      \"keydown\",\n      (e) => {\n        switch (e.key) {\n          case \"Enter\":\n            this.enterPressed(e);\n            break;\n          case \"Backspace\":\n            this.backspace(e);\n            break;\n          case \"Tab\":\n            e.shiftKey ? this.shiftTab(e) : this.addTab(e);\n            break;\n        }\n      },\n      !1\n    ), this.nodes.wrapper;\n  }\n  /**\n   * Creates Block Tune allowing to change the list style\n   *\n   * @public\n   * @returns {Array}\n   */\n  renderSettings() {\n    return [\n      {\n        name: \"unordered\",\n        label: this.api.i18n.t(\"Unordered\"),\n        icon: w\n      },\n      {\n        name: \"ordered\",\n        label: this.api.i18n.t(\"Ordered\"),\n        icon: S\n      }\n    ].map((t) => ({\n      name: t.name,\n      icon: t.icon,\n      label: t.label,\n      isActive: this.data.style === t.name,\n      closeOnActivate: !0,\n      onActivate: () => {\n        this.listStyle = t.name;\n      }\n    }));\n  }\n  /**\n   * On paste sanitzation config. Allow only tags that are allowed in the Tool.\n   *\n   * @returns {PasteConfig} - paste config.\n   */\n  static get pasteConfig() {\n    return {\n      tags: [\"OL\", \"UL\", \"LI\"]\n    };\n  }\n  /**\n   * On paste callback that is fired from Editor.\n   *\n   * @param {PasteEvent} event - event with pasted data\n   */\n  onPaste(e) {\n    const t = e.detail.data;\n    this.data = this.pasteHandler(t);\n    const r = this.nodes.wrapper;\n    r && r.parentNode && r.parentNode.replaceChild(this.render(), r);\n  }\n  /**\n   * Handle UL, OL and LI tags paste and returns List data\n   *\n   * @param {HTMLUListElement|HTMLOListElement|HTMLLIElement} element\n   * @returns {ListData}\n   */\n  pasteHandler(e) {\n    const { tagName: t } = e;\n    let r = \"unordered\", n;\n    switch (t) {\n      case \"OL\":\n        r = \"ordered\", n = \"ol\";\n        break;\n      case \"UL\":\n      case \"LI\":\n        r = \"unordered\", n = \"ul\";\n    }\n    const s = {\n      style: r,\n      items: []\n    }, i = (l) => Array.from(l.querySelectorAll(\":scope > li\")).map((o) => {\n      var m;\n      const a = o.querySelector(`:scope > ${n}`), y = a ? i(a) : [];\n      return {\n        content: ((m = o == null ? void 0 : o.firstChild) == null ? void 0 : m.textContent) || \"\",\n        items: y\n      };\n    });\n    return s.items = i(e), s;\n  }\n  /**\n   * Renders children list\n   *\n   * @param {ListItem[]} items - items data to append\n   * @param {Element} parentItem - where to append\n   * @returns {void}\n   */\n  appendItems(e, t) {\n    e.forEach((r) => {\n      const n = this.createItem(r.content, r.items);\n      t.appendChild(n);\n    });\n  }\n  /**\n   * Renders the single item\n   *\n   * @param {string} content - item content to render\n   * @param {ListItem[]} [items] - children\n   * @returns {Element}\n   */\n  createItem(e, t = []) {\n    const r = p(\"li\", this.CSS.item), n = p(\"div\", this.CSS.itemBody), s = p(\"div\", this.CSS.itemContent, {\n      innerHTML: e,\n      contentEditable: (!this.readOnly).toString()\n    });\n    return n.appendChild(s), r.appendChild(n), t && t.length > 0 && this.addChildrenList(r, t), r;\n  }\n  /**\n   * Extracts tool's data from the DOM\n   *\n   * @returns {ListData}\n   */\n  save() {\n    const e = (t) => Array.from(\n      t.querySelectorAll(`:scope > .${this.CSS.item}`)\n    ).map((n) => {\n      const s = n.querySelector(`.${this.CSS.itemChildren}`), i = this.getItemContent(n), l = s ? e(s) : [];\n      return {\n        content: i,\n        items: l\n      };\n    });\n    return {\n      style: this.data.style,\n      items: this.nodes.wrapper ? e(this.nodes.wrapper) : []\n    };\n  }\n  /**\n   * Append children list to passed item\n   *\n   * @param {Element} parentItem - item that should contain passed sub-items\n   * @param {ListItem[]} items - sub items to append\n   */\n  addChildrenList(e, t) {\n    const r = e.querySelector(`.${this.CSS.itemBody}`), n = this.makeListWrapper(void 0, [\n      this.CSS.itemChildren\n    ]);\n    this.appendItems(t, n), r && r.appendChild(n);\n  }\n  /**\n   * Creates main <ul> or <ol> tag depended on style\n   *\n   * @param {string} [style] - 'ordered' or 'unordered'\n   * @param {string[]} [classes] - additional classes to append\n   * @returns {HTMLOListElement|HTMLUListElement}\n   */\n  makeListWrapper(e = this.listStyle, t = []) {\n    const r = e === \"ordered\" ? \"ol\" : \"ul\", n = e === \"ordered\" ? this.CSS.wrapperOrdered : this.CSS.wrapperUnordered;\n    return t.push(n), p(r, [this.CSS.wrapper, ...t]);\n  }\n  /**\n   * Styles\n   *\n   * @returns {NestedListCssClasses} - CSS classes names by keys\n   * @private\n   */\n  get CSS() {\n    return {\n      baseBlock: this.api.styles.block,\n      wrapper: \"cdx-nested-list\",\n      wrapperOrdered: \"cdx-nested-list--ordered\",\n      wrapperUnordered: \"cdx-nested-list--unordered\",\n      item: \"cdx-nested-list__item\",\n      itemBody: \"cdx-nested-list__item-body\",\n      itemContent: \"cdx-nested-list__item-content\",\n      itemChildren: \"cdx-nested-list__item-children\",\n      settingsWrapper: \"cdx-nested-list__settings\",\n      settingsButton: this.api.styles.settingsButton,\n      settingsButtonActive: this.api.styles.settingsButtonActive\n    };\n  }\n  /**\n   * Get list style name\n   *\n   * @returns {string}\n   */\n  get listStyle() {\n    return this.data.style || this.defaultListStyle;\n  }\n  /**\n   * Set list style\n   *\n   * @param {ListDataStyle} style - new style to set\n   */\n  set listStyle(e) {\n    if (!this.nodes || !this.nodes.wrapper)\n      return;\n    const t = Array.from(\n      this.nodes.wrapper.querySelectorAll(`.${this.CSS.wrapper}`)\n    );\n    t.push(this.nodes.wrapper), t.forEach((r) => {\n      r.classList.toggle(this.CSS.wrapperUnordered, e === \"unordered\"), r.classList.toggle(this.CSS.wrapperOrdered, e === \"ordered\");\n    }), this.data.style = e;\n  }\n  /**\n   * Returns current List item by the caret position\n   *\n   * @returns {Element}\n   */\n  get currentItem() {\n    const e = window.getSelection();\n    if (!e)\n      return null;\n    let t = e.anchorNode;\n    return !t || (c(t) || (t = t.parentNode), !t) || !c(t) ? null : t.closest(`.${this.CSS.item}`);\n  }\n  /**\n   * Handles Enter keypress\n   *\n   * @param {KeyboardEvent} event - keydown\n   * @returns {void}\n   */\n  enterPressed(e) {\n    const t = this.currentItem;\n    if (e.stopPropagation(), e.preventDefault(), e.isComposing)\n      return;\n    const r = t ? this.getItemContent(t).trim().length === 0 : !0, n = (t == null ? void 0 : t.parentNode) === this.nodes.wrapper, s = (t == null ? void 0 : t.nextElementSibling) === null;\n    if (n && s && r) {\n      this.getOutOfList();\n      return;\n    } else if (s && r) {\n      this.unshiftItem();\n      return;\n    }\n    const i = u.extractFragmentFromCaretPositionTillTheEnd();\n    if (!i)\n      return;\n    const l = g(i), h = t == null ? void 0 : t.querySelector(\n      `.${this.CSS.itemChildren}`\n    ), o = this.createItem(l, void 0);\n    h && Array.from(h.querySelectorAll(`.${this.CSS.item}`)).length > 0 ? h.prepend(o) : t == null || t.after(o), this.focusItem(o);\n  }\n  /**\n   * Decrease indentation of the current item\n   *\n   * @returns {void}\n   */\n  unshiftItem() {\n    const e = this.currentItem;\n    if (!e || !e.parentNode || !c(e.parentNode))\n      return;\n    const t = e.parentNode.closest(`.${this.CSS.item}`);\n    if (!t)\n      return;\n    this.caret.save(), t.after(e), this.caret.restore();\n    const r = t.querySelector(\n      `.${this.CSS.itemChildren}`\n    );\n    if (!r)\n      return;\n    r.children.length === 0 && r.remove();\n  }\n  /**\n   * Return the item content\n   *\n   * @param {Element} item - item wrapper (<li>)\n   * @returns {string}\n   */\n  getItemContent(e) {\n    const t = e.querySelector(`.${this.CSS.itemContent}`);\n    return !t || C(t) ? \"\" : t.innerHTML;\n  }\n  /**\n   * Sets focus to the item's content\n   *\n   * @param {Element} item - item (<li>) to select\n   * @param {boolean} atStart - where to set focus: at the start or at the end\n   * @returns {void}\n   */\n  focusItem(e, t = !0) {\n    const r = e.querySelector(\n      `.${this.CSS.itemContent}`\n    );\n    r && u.focus(r, t);\n  }\n  /**\n   * Get out from List Tool by Enter on the empty last item\n   *\n   * @returns {void}\n   */\n  getOutOfList() {\n    var e;\n    (e = this.currentItem) == null || e.remove(), this.api.blocks.insert(), this.api.caret.setToBlock(this.api.blocks.getCurrentBlockIndex());\n  }\n  /**\n   * Handle backspace\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  backspace(e) {\n    if (!u.isAtStart())\n      return;\n    e.preventDefault();\n    const t = this.currentItem;\n    if (!t)\n      return;\n    const r = t.previousSibling;\n    if (!t.parentNode || !c(t.parentNode))\n      return;\n    const n = t.parentNode.closest(`.${this.CSS.item}`);\n    if (!r && !n || r && !c(r))\n      return;\n    e.stopPropagation();\n    let s;\n    if (r) {\n      const a = r.querySelectorAll(\n        `.${this.CSS.item}`\n      );\n      s = Array.from(a).pop() || r;\n    } else\n      s = n;\n    const i = u.extractFragmentFromCaretPositionTillTheEnd();\n    if (!i)\n      return;\n    const l = g(i);\n    if (!s)\n      return;\n    const h = s.querySelector(\n      `.${this.CSS.itemContent}`\n    );\n    if (!h)\n      return;\n    u.focus(h, !1), this.caret.save(), h.insertAdjacentHTML(\"beforeend\", l);\n    let o = t.querySelectorAll(\n      `.${this.CSS.itemChildren} > .${this.CSS.item}`\n    );\n    o = Array.from(o), o = o.filter((a) => !a.parentNode || !c(a.parentNode) ? !1 : a.parentNode.closest(`.${this.CSS.item}`) === t), o.reverse().forEach((a) => {\n      r ? s.after(a) : t.after(a);\n    }), t.remove(), this.caret.restore();\n  }\n  /**\n   * Add indentation to current item\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  addTab(e) {\n    e.stopPropagation(), e.preventDefault();\n    const t = this.currentItem;\n    if (!t)\n      return;\n    const r = t.previousSibling;\n    if (!r || !c(r) || !r)\n      return;\n    const s = r.querySelector(\n      `.${this.CSS.itemChildren}`\n    );\n    if (this.caret.save(), s)\n      s.appendChild(t);\n    else {\n      const i = this.makeListWrapper(void 0, [\n        this.CSS.itemChildren\n      ]), l = r.querySelector(`.${this.CSS.itemBody}`);\n      i.appendChild(t), l == null || l.appendChild(i);\n    }\n    this.caret.restore();\n  }\n  /**\n   * Reduce indentation for current item\n   *\n   * @param {KeyboardEvent} event - keydown\n   * @returns {void}\n   */\n  shiftTab(e) {\n    e.stopPropagation(), e.preventDefault(), this.unshiftItem();\n  }\n  /**\n   * Convert from list to text for conversionConfig\n   *\n   * @param {ListData} data\n   * @returns {string}\n   */\n  static joinRecursive(e) {\n    return e.items.map((t) => `${t.content} ${f.joinRecursive(t)}`).join(\"\");\n  }\n  /**\n   * Convert from text to list with import and export list to text\n   */\n  static get conversionConfig() {\n    return {\n      export: (e) => f.joinRecursive(e),\n      import: (e) => ({\n        items: [\n          {\n            content: e,\n            items: []\n          }\n        ],\n        style: \"unordered\"\n      })\n    };\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@editorjs/nested-list/dist/nested-list.mjs\n");

/***/ }),

/***/ "./node_modules/@editorjs/paragraph/dist/paragraph.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@editorjs/paragraph/dist/paragraph.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ n)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".ce-paragraph{line-height:1.6em;outline:none}.ce-block:only-of-type .ce-paragraph[data-placeholder-active]:empty:before,.ce-block:only-of-type .ce-paragraph[data-placeholder-active][data-empty=true]:before{content:attr(data-placeholder-active)}.ce-paragraph p:first-of-type{margin-top:0}.ce-paragraph p:last-of-type{margin-bottom:0}\")),document.head.appendChild(e)}}catch(a){console.error(\"vite-plugin-css-injected-by-js\",a)}})();\nconst a = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8 9V7.2C8 7.08954 8.08954 7 8.2 7L12 7M16 9V7.2C16 7.08954 15.9105 7 15.8 7L12 7M12 7L12 17M12 17H10M12 17H14\"/></svg>';\nfunction l(r) {\n  const t = document.createElement(\"div\");\n  t.innerHTML = r.trim();\n  const e = document.createDocumentFragment();\n  return e.append(...Array.from(t.childNodes)), e;\n}\n/**\n * Base Paragraph Block for the Editor.js.\n * Represents a regular text block\n *\n * @author CodeX (team@codex.so)\n * @copyright CodeX 2018\n * @license The MIT License (MIT)\n */\nclass n {\n  /**\n   * Default placeholder for Paragraph Tool\n   *\n   * @returns {string}\n   * @class\n   */\n  static get DEFAULT_PLACEHOLDER() {\n    return \"\";\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {object} params - constructor params\n   * @param {ParagraphData} params.data - previously saved data\n   * @param {ParagraphConfig} params.config - user config for Tool\n   * @param {object} params.api - editor.js api\n   * @param {boolean} readOnly - read only mode flag\n   */\n  constructor({ data: t, config: e, api: i, readOnly: s }) {\n    this.api = i, this.readOnly = s, this._CSS = {\n      block: this.api.styles.block,\n      wrapper: \"ce-paragraph\"\n    }, this.readOnly || (this.onKeyUp = this.onKeyUp.bind(this)), this._placeholder = e.placeholder ? e.placeholder : n.DEFAULT_PLACEHOLDER, this._data = t ?? {}, this._element = null, this._preserveBlank = e.preserveBlank ?? !1;\n  }\n  /**\n   * Check if text content is empty and set empty string to inner html.\n   * We need this because some browsers (e.g. Safari) insert <br> into empty contenteditanle elements\n   *\n   * @param {KeyboardEvent} e - key up event\n   */\n  onKeyUp(t) {\n    if (t.code !== \"Backspace\" && t.code !== \"Delete\" || !this._element)\n      return;\n    const { textContent: e } = this._element;\n    e === \"\" && (this._element.innerHTML = \"\");\n  }\n  /**\n   * Create Tool's view\n   *\n   * @returns {HTMLDivElement}\n   * @private\n   */\n  drawView() {\n    const t = document.createElement(\"DIV\");\n    return t.classList.add(this._CSS.wrapper, this._CSS.block), t.contentEditable = \"false\", t.dataset.placeholderActive = this.api.i18n.t(this._placeholder), this._data.text && (t.innerHTML = this._data.text), this.readOnly || (t.contentEditable = \"true\", t.addEventListener(\"keyup\", this.onKeyUp)), t;\n  }\n  /**\n   * Return Tool's view\n   *\n   * @returns {HTMLDivElement}\n   */\n  render() {\n    return this._element = this.drawView(), this._element;\n  }\n  /**\n   * Method that specified how to merge two Text blocks.\n   * Called by Editor.js by backspace at the beginning of the Block\n   *\n   * @param {ParagraphData} data\n   * @public\n   */\n  merge(t) {\n    if (!this._element)\n      return;\n    this._data.text += t.text;\n    const e = l(t.text);\n    this._element.appendChild(e), this._element.normalize();\n  }\n  /**\n   * Validate Paragraph block data:\n   * - check for emptiness\n   *\n   * @param {ParagraphData} savedData — data received after saving\n   * @returns {boolean} false if saved data is not correct, otherwise true\n   * @public\n   */\n  validate(t) {\n    return !(t.text.trim() === \"\" && !this._preserveBlank);\n  }\n  /**\n   * Extract Tool's data from the view\n   *\n   * @param {HTMLDivElement} toolsContent - Paragraph tools rendered view\n   * @returns {ParagraphData} - saved data\n   * @public\n   */\n  save(t) {\n    return {\n      text: t.innerHTML\n    };\n  }\n  /**\n   * On paste callback fired from Editor.\n   *\n   * @param {HTMLPasteEvent} event - event with pasted data\n   */\n  onPaste(t) {\n    const e = {\n      text: t.detail.data.innerHTML\n    };\n    this._data = e, window.requestAnimationFrame(() => {\n      this._element && (this._element.innerHTML = this._data.text || \"\");\n    });\n  }\n  /**\n   * Enable Conversion Toolbar. Paragraph can be converted to/from other tools\n   * @returns {ConversionConfig}\n   */\n  static get conversionConfig() {\n    return {\n      export: \"text\",\n      // to convert Paragraph to other block, use 'text' property of saved data\n      import: \"text\"\n      // to covert other block's exported string to Paragraph, fill 'text' property of tool data\n    };\n  }\n  /**\n   * Sanitizer rules\n   * @returns {SanitizerConfig} - Edtior.js sanitizer config\n   */\n  static get sanitize() {\n    return {\n      text: {\n        br: !0\n      }\n    };\n  }\n  /**\n   * Returns true to notify the core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Used by Editor paste handling API.\n   * Provides configuration to handle P tags.\n   *\n   * @returns {PasteConfig} - Paragraph Paste Setting\n   */\n  static get pasteConfig() {\n    return {\n      tags: [\"P\"]\n    };\n  }\n  /**\n   * Icon and title for displaying at the Toolbox\n   *\n   * @returns {ToolboxConfig} - Paragraph Toolbox Setting\n   */\n  static get toolbox() {\n    return {\n      icon: a,\n      title: \"Text\"\n    };\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@editorjs/paragraph/dist/paragraph.mjs\n");

/***/ }),

/***/ "./node_modules/@editorjs/quote/dist/quote.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@editorjs/quote/dist/quote.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ m)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var t=document.createElement(\"style\");t.appendChild(document.createTextNode(\".cdx-quote-icon svg{transform:rotate(180deg)}.cdx-quote{margin:0}.cdx-quote__text{min-height:158px;margin-bottom:10px}.cdx-quote [contentEditable=true][data-placeholder]:before{position:absolute;content:attr(data-placeholder);color:#707684;font-weight:400;opacity:0}.cdx-quote [contentEditable=true][data-placeholder]:empty:before{opacity:1}.cdx-quote [contentEditable=true][data-placeholder]:empty:focus:before{opacity:0}.cdx-quote-settings{display:flex}.cdx-quote-settings .cdx-settings-button{width:50%}\")),document.head.appendChild(t)}}catch(e){console.error(\"vite-plugin-css-injected-by-js\",e)}})();\nconst De = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M18 7L6 7\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M18 17H6\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 12L8 12\"/></svg>', He = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M17 7L5 7\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M17 17H5\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M13 12L5 12\"/></svg>', Re = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 10.8182L9 10.8182C8.80222 10.8182 8.60888 10.7649 8.44443 10.665C8.27998 10.5651 8.15181 10.4231 8.07612 10.257C8.00043 10.0909 7.98063 9.90808 8.01922 9.73174C8.0578 9.55539 8.15304 9.39341 8.29289 9.26627C8.43275 9.13913 8.61093 9.05255 8.80491 9.01747C8.99889 8.98239 9.19996 9.00039 9.38268 9.0692C9.56541 9.13801 9.72159 9.25453 9.83147 9.40403C9.94135 9.55353 10 9.72929 10 9.90909L10 12.1818C10 12.664 9.78929 13.1265 9.41421 13.4675C9.03914 13.8084 8.53043 14 8 14\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 10.8182L15 10.8182C14.8022 10.8182 14.6089 10.7649 14.4444 10.665C14.28 10.5651 14.1518 10.4231 14.0761 10.257C14.0004 10.0909 13.9806 9.90808 14.0192 9.73174C14.0578 9.55539 14.153 9.39341 14.2929 9.26627C14.4327 9.13913 14.6109 9.05255 14.8049 9.01747C14.9989 8.98239 15.2 9.00039 15.3827 9.0692C15.5654 9.13801 15.7216 9.25453 15.8315 9.40403C15.9414 9.55353 16 9.72929 16 9.90909L16 12.1818C16 12.664 15.7893 13.1265 15.4142 13.4675C15.0391 13.8084 14.5304 14 14 14\"/></svg>';\nvar b = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction Fe(e) {\n  if (e.__esModule)\n    return e;\n  var t = e.default;\n  if (typeof t == \"function\") {\n    var n = function r() {\n      return this instanceof r ? Reflect.construct(t, arguments, this.constructor) : t.apply(this, arguments);\n    };\n    n.prototype = t.prototype;\n  } else\n    n = {};\n  return Object.defineProperty(n, \"__esModule\", { value: !0 }), Object.keys(e).forEach(function(r) {\n    var i = Object.getOwnPropertyDescriptor(e, r);\n    Object.defineProperty(n, r, i.get ? i : {\n      enumerable: !0,\n      get: function() {\n        return e[r];\n      }\n    });\n  }), n;\n}\nvar g = {}, P = {}, j = {};\nObject.defineProperty(j, \"__esModule\", { value: !0 });\nj.allInputsSelector = We;\nfunction We() {\n  var e = [\"text\", \"password\", \"email\", \"number\", \"search\", \"tel\", \"url\"];\n  return \"[contenteditable=true], textarea, input:not([type]), \" + e.map(function(t) {\n    return 'input[type=\"'.concat(t, '\"]');\n  }).join(\", \");\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.allInputsSelector = void 0;\n  var t = j;\n  Object.defineProperty(e, \"allInputsSelector\", { enumerable: !0, get: function() {\n    return t.allInputsSelector;\n  } });\n})(P);\nvar s = {}, T = {};\nObject.defineProperty(T, \"__esModule\", { value: !0 });\nT.isNativeInput = Ue;\nfunction Ue(e) {\n  var t = [\n    \"INPUT\",\n    \"TEXTAREA\"\n  ];\n  return e && e.tagName ? t.includes(e.tagName) : !1;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isNativeInput = void 0;\n  var t = T;\n  Object.defineProperty(e, \"isNativeInput\", { enumerable: !0, get: function() {\n    return t.isNativeInput;\n  } });\n})(s);\nvar ie = {}, S = {};\nObject.defineProperty(S, \"__esModule\", { value: !0 });\nS.append = qe;\nfunction qe(e, t) {\n  Array.isArray(t) ? t.forEach(function(n) {\n    e.appendChild(n);\n  }) : e.appendChild(t);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.append = void 0;\n  var t = S;\n  Object.defineProperty(e, \"append\", { enumerable: !0, get: function() {\n    return t.append;\n  } });\n})(ie);\nvar C = {}, L = {};\nObject.defineProperty(L, \"__esModule\", { value: !0 });\nL.blockElements = ze;\nfunction ze() {\n  return [\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"blockquote\",\n    \"canvas\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"li\",\n    \"main\",\n    \"nav\",\n    \"noscript\",\n    \"ol\",\n    \"output\",\n    \"p\",\n    \"pre\",\n    \"ruby\",\n    \"section\",\n    \"table\",\n    \"tbody\",\n    \"thead\",\n    \"tr\",\n    \"tfoot\",\n    \"ul\",\n    \"video\"\n  ];\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.blockElements = void 0;\n  var t = L;\n  Object.defineProperty(e, \"blockElements\", { enumerable: !0, get: function() {\n    return t.blockElements;\n  } });\n})(C);\nvar ae = {}, M = {};\nObject.defineProperty(M, \"__esModule\", { value: !0 });\nM.calculateBaseline = Ge;\nfunction Ge(e) {\n  var t = window.getComputedStyle(e), n = parseFloat(t.fontSize), r = parseFloat(t.lineHeight) || n * 1.2, i = parseFloat(t.paddingTop), a = parseFloat(t.borderTopWidth), l = parseFloat(t.marginTop), u = n * 0.8, d = (r - n) / 2, c = l + a + i + d + u;\n  return c;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.calculateBaseline = void 0;\n  var t = M;\n  Object.defineProperty(e, \"calculateBaseline\", { enumerable: !0, get: function() {\n    return t.calculateBaseline;\n  } });\n})(ae);\nvar le = {}, k = {}, w = {}, N = {};\nObject.defineProperty(N, \"__esModule\", { value: !0 });\nN.isContentEditable = Ke;\nfunction Ke(e) {\n  return e.contentEditable === \"true\";\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isContentEditable = void 0;\n  var t = N;\n  Object.defineProperty(e, \"isContentEditable\", { enumerable: !0, get: function() {\n    return t.isContentEditable;\n  } });\n})(w);\nObject.defineProperty(k, \"__esModule\", { value: !0 });\nk.canSetCaret = Qe;\nvar Xe = s, Ye = w;\nfunction Qe(e) {\n  var t = !0;\n  if ((0, Xe.isNativeInput)(e))\n    switch (e.type) {\n      case \"file\":\n      case \"checkbox\":\n      case \"radio\":\n      case \"hidden\":\n      case \"submit\":\n      case \"button\":\n      case \"image\":\n      case \"reset\":\n        t = !1;\n        break;\n    }\n  else\n    t = (0, Ye.isContentEditable)(e);\n  return t;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.canSetCaret = void 0;\n  var t = k;\n  Object.defineProperty(e, \"canSetCaret\", { enumerable: !0, get: function() {\n    return t.canSetCaret;\n  } });\n})(le);\nvar _ = {}, I = {};\nfunction Ve(e, t, n) {\n  const r = n.value !== void 0 ? \"value\" : \"get\", i = n[r], a = `#${t}Cache`;\n  if (n[r] = function(...l) {\n    return this[a] === void 0 && (this[a] = i.apply(this, l)), this[a];\n  }, r === \"get\" && n.set) {\n    const l = n.set;\n    n.set = function(u) {\n      delete e[a], l.apply(this, u);\n    };\n  }\n  return n;\n}\nfunction ue() {\n  const e = {\n    win: !1,\n    mac: !1,\n    x11: !1,\n    linux: !1\n  }, t = Object.keys(e).find((n) => window.navigator.appVersion.toLowerCase().indexOf(n) !== -1);\n  return t !== void 0 && (e[t] = !0), e;\n}\nfunction A(e) {\n  return e != null && e !== \"\" && (typeof e != \"object\" || Object.keys(e).length > 0);\n}\nfunction Ze(e) {\n  return !A(e);\n}\nconst Je = () => typeof window < \"u\" && window.navigator !== null && A(window.navigator.platform) && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === \"MacIntel\" && window.navigator.maxTouchPoints > 1);\nfunction xe(e) {\n  const t = ue();\n  return e = e.replace(/shift/gi, \"⇧\").replace(/backspace/gi, \"⌫\").replace(/enter/gi, \"⏎\").replace(/up/gi, \"↑\").replace(/left/gi, \"→\").replace(/down/gi, \"↓\").replace(/right/gi, \"←\").replace(/escape/gi, \"⎋\").replace(/insert/gi, \"Ins\").replace(/delete/gi, \"␡\").replace(/\\+/gi, \"+\"), t.mac ? e = e.replace(/ctrl|cmd/gi, \"⌘\").replace(/alt/gi, \"⌥\") : e = e.replace(/cmd/gi, \"Ctrl\").replace(/windows/gi, \"WIN\"), e;\n}\nfunction et(e) {\n  return e[0].toUpperCase() + e.slice(1);\n}\nfunction tt(e) {\n  const t = document.createElement(\"div\");\n  t.style.position = \"absolute\", t.style.left = \"-999px\", t.style.bottom = \"-999px\", t.innerHTML = e, document.body.appendChild(t);\n  const n = window.getSelection(), r = document.createRange();\n  if (r.selectNode(t), n === null)\n    throw new Error(\"Cannot copy text to clipboard\");\n  n.removeAllRanges(), n.addRange(r), document.execCommand(\"copy\"), document.body.removeChild(t);\n}\nfunction nt(e, t, n) {\n  let r;\n  return (...i) => {\n    const a = this, l = () => {\n      r = void 0, n !== !0 && e.apply(a, i);\n    }, u = n === !0 && r !== void 0;\n    window.clearTimeout(r), r = window.setTimeout(l, t), u && e.apply(a, i);\n  };\n}\nfunction o(e) {\n  return Object.prototype.toString.call(e).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n}\nfunction rt(e) {\n  return o(e) === \"boolean\";\n}\nfunction oe(e) {\n  return o(e) === \"function\" || o(e) === \"asyncfunction\";\n}\nfunction it(e) {\n  return oe(e) && /^\\s*class\\s+/.test(e.toString());\n}\nfunction at(e) {\n  return o(e) === \"number\";\n}\nfunction v(e) {\n  return o(e) === \"object\";\n}\nfunction lt(e) {\n  return Promise.resolve(e) === e;\n}\nfunction ut(e) {\n  return o(e) === \"string\";\n}\nfunction ot(e) {\n  return o(e) === \"undefined\";\n}\nfunction O(e, ...t) {\n  if (!t.length)\n    return e;\n  const n = t.shift();\n  if (v(e) && v(n))\n    for (const r in n)\n      v(n[r]) ? (e[r] === void 0 && Object.assign(e, { [r]: {} }), O(e[r], n[r])) : Object.assign(e, { [r]: n[r] });\n  return O(e, ...t);\n}\nfunction ct(e, t, n) {\n  const r = `«${t}» is deprecated and will be removed in the next major release. Please use the «${n}» instead.`;\n  e && console.warn(r);\n}\nfunction st(e) {\n  try {\n    return new URL(e).href;\n  } catch {\n  }\n  return e.substring(0, 2) === \"//\" ? window.location.protocol + e : window.location.origin + e;\n}\nfunction dt(e) {\n  return e > 47 && e < 58 || e === 32 || e === 13 || e === 229 || e > 64 && e < 91 || e > 95 && e < 112 || e > 185 && e < 193 || e > 218 && e < 223;\n}\nconst ft = {\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  ESC: 27,\n  SPACE: 32,\n  LEFT: 37,\n  UP: 38,\n  DOWN: 40,\n  RIGHT: 39,\n  DELETE: 46,\n  META: 91,\n  SLASH: 191\n}, pt = {\n  LEFT: 0,\n  WHEEL: 1,\n  RIGHT: 2,\n  BACKWARD: 3,\n  FORWARD: 4\n};\nclass gt {\n  constructor() {\n    this.completed = Promise.resolve();\n  }\n  /**\n   * Add new promise to queue\n   * @param operation - promise should be added to queue\n   */\n  add(t) {\n    return new Promise((n, r) => {\n      this.completed = this.completed.then(t).then(n).catch(r);\n    });\n  }\n}\nfunction vt(e, t, n = void 0) {\n  let r, i, a, l = null, u = 0;\n  n || (n = {});\n  const d = function() {\n    u = n.leading === !1 ? 0 : Date.now(), l = null, a = e.apply(r, i), l === null && (r = i = null);\n  };\n  return function() {\n    const c = Date.now();\n    !u && n.leading === !1 && (u = c);\n    const f = t - (c - u);\n    return r = this, i = arguments, f <= 0 || f > t ? (l && (clearTimeout(l), l = null), u = c, a = e.apply(r, i), l === null && (r = i = null)) : !l && n.trailing !== !1 && (l = setTimeout(d, f)), a;\n  };\n}\nconst mt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  PromiseQueue: gt,\n  beautifyShortcut: xe,\n  cacheable: Ve,\n  capitalize: et,\n  copyTextToClipboard: tt,\n  debounce: nt,\n  deepMerge: O,\n  deprecationAssert: ct,\n  getUserOS: ue,\n  getValidUrl: st,\n  isBoolean: rt,\n  isClass: it,\n  isEmpty: Ze,\n  isFunction: oe,\n  isIosDevice: Je,\n  isNumber: at,\n  isObject: v,\n  isPrintableKey: dt,\n  isPromise: lt,\n  isString: ut,\n  isUndefined: ot,\n  keyCodes: ft,\n  mouseButtons: pt,\n  notEmpty: A,\n  throttle: vt,\n  typeOf: o\n}, Symbol.toStringTag, { value: \"Module\" })), $ = /* @__PURE__ */ Fe(mt);\nObject.defineProperty(I, \"__esModule\", { value: !0 });\nI.containsOnlyInlineElements = yt;\nvar bt = $, _t = C;\nfunction yt(e) {\n  var t;\n  (0, bt.isString)(e) ? (t = document.createElement(\"div\"), t.innerHTML = e) : t = e;\n  var n = function(r) {\n    return !(0, _t.blockElements)().includes(r.tagName.toLowerCase()) && Array.from(r.children).every(n);\n  };\n  return Array.from(t.children).every(n);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.containsOnlyInlineElements = void 0;\n  var t = I;\n  Object.defineProperty(e, \"containsOnlyInlineElements\", { enumerable: !0, get: function() {\n    return t.containsOnlyInlineElements;\n  } });\n})(_);\nvar ce = {}, B = {}, y = {}, D = {};\nObject.defineProperty(D, \"__esModule\", { value: !0 });\nD.make = ht;\nfunction ht(e, t, n) {\n  var r;\n  t === void 0 && (t = null), n === void 0 && (n = {});\n  var i = document.createElement(e);\n  if (Array.isArray(t)) {\n    var a = t.filter(function(u) {\n      return u !== void 0;\n    });\n    (r = i.classList).add.apply(r, a);\n  } else\n    t !== null && i.classList.add(t);\n  for (var l in n)\n    Object.prototype.hasOwnProperty.call(n, l) && (i[l] = n[l]);\n  return i;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.make = void 0;\n  var t = D;\n  Object.defineProperty(e, \"make\", { enumerable: !0, get: function() {\n    return t.make;\n  } });\n})(y);\nObject.defineProperty(B, \"__esModule\", { value: !0 });\nB.fragmentToString = Ot;\nvar Et = y;\nfunction Ot(e) {\n  var t = (0, Et.make)(\"div\");\n  return t.appendChild(e), t.innerHTML;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.fragmentToString = void 0;\n  var t = B;\n  Object.defineProperty(e, \"fragmentToString\", { enumerable: !0, get: function() {\n    return t.fragmentToString;\n  } });\n})(ce);\nvar se = {}, H = {};\nObject.defineProperty(H, \"__esModule\", { value: !0 });\nH.getContentLength = jt;\nvar Pt = s;\nfunction jt(e) {\n  var t, n;\n  return (0, Pt.isNativeInput)(e) ? e.value.length : e.nodeType === Node.TEXT_NODE ? e.length : (n = (t = e.textContent) === null || t === void 0 ? void 0 : t.length) !== null && n !== void 0 ? n : 0;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.getContentLength = void 0;\n  var t = H;\n  Object.defineProperty(e, \"getContentLength\", { enumerable: !0, get: function() {\n    return t.getContentLength;\n  } });\n})(se);\nvar R = {}, F = {}, re = b && b.__spreadArray || function(e, t, n) {\n  if (n || arguments.length === 2)\n    for (var r = 0, i = t.length, a; r < i; r++)\n      (a || !(r in t)) && (a || (a = Array.prototype.slice.call(t, 0, r)), a[r] = t[r]);\n  return e.concat(a || Array.prototype.slice.call(t));\n};\nObject.defineProperty(F, \"__esModule\", { value: !0 });\nF.getDeepestBlockElements = de;\nvar Tt = _;\nfunction de(e) {\n  return (0, Tt.containsOnlyInlineElements)(e) ? [e] : Array.from(e.children).reduce(function(t, n) {\n    return re(re([], t, !0), de(n), !0);\n  }, []);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.getDeepestBlockElements = void 0;\n  var t = F;\n  Object.defineProperty(e, \"getDeepestBlockElements\", { enumerable: !0, get: function() {\n    return t.getDeepestBlockElements;\n  } });\n})(R);\nvar fe = {}, W = {}, h = {}, U = {};\nObject.defineProperty(U, \"__esModule\", { value: !0 });\nU.isLineBreakTag = St;\nfunction St(e) {\n  return [\n    \"BR\",\n    \"WBR\"\n  ].includes(e.tagName);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isLineBreakTag = void 0;\n  var t = U;\n  Object.defineProperty(e, \"isLineBreakTag\", { enumerable: !0, get: function() {\n    return t.isLineBreakTag;\n  } });\n})(h);\nvar E = {}, q = {};\nObject.defineProperty(q, \"__esModule\", { value: !0 });\nq.isSingleTag = Ct;\nfunction Ct(e) {\n  return [\n    \"AREA\",\n    \"BASE\",\n    \"BR\",\n    \"COL\",\n    \"COMMAND\",\n    \"EMBED\",\n    \"HR\",\n    \"IMG\",\n    \"INPUT\",\n    \"KEYGEN\",\n    \"LINK\",\n    \"META\",\n    \"PARAM\",\n    \"SOURCE\",\n    \"TRACK\",\n    \"WBR\"\n  ].includes(e.tagName);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isSingleTag = void 0;\n  var t = q;\n  Object.defineProperty(e, \"isSingleTag\", { enumerable: !0, get: function() {\n    return t.isSingleTag;\n  } });\n})(E);\nObject.defineProperty(W, \"__esModule\", { value: !0 });\nW.getDeepestNode = pe;\nvar Lt = s, Mt = h, kt = E;\nfunction pe(e, t) {\n  t === void 0 && (t = !1);\n  var n = t ? \"lastChild\" : \"firstChild\", r = t ? \"previousSibling\" : \"nextSibling\";\n  if (e.nodeType === Node.ELEMENT_NODE && e[n]) {\n    var i = e[n];\n    if ((0, kt.isSingleTag)(i) && !(0, Lt.isNativeInput)(i) && !(0, Mt.isLineBreakTag)(i))\n      if (i[r])\n        i = i[r];\n      else if (i.parentNode !== null && i.parentNode[r])\n        i = i.parentNode[r];\n      else\n        return i.parentNode;\n    return pe(i, t);\n  }\n  return e;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.getDeepestNode = void 0;\n  var t = W;\n  Object.defineProperty(e, \"getDeepestNode\", { enumerable: !0, get: function() {\n    return t.getDeepestNode;\n  } });\n})(fe);\nvar ge = {}, z = {}, p = b && b.__spreadArray || function(e, t, n) {\n  if (n || arguments.length === 2)\n    for (var r = 0, i = t.length, a; r < i; r++)\n      (a || !(r in t)) && (a || (a = Array.prototype.slice.call(t, 0, r)), a[r] = t[r]);\n  return e.concat(a || Array.prototype.slice.call(t));\n};\nObject.defineProperty(z, \"__esModule\", { value: !0 });\nz.findAllInputs = $t;\nvar wt = _, Nt = R, It = P, At = s;\nfunction $t(e) {\n  return Array.from(e.querySelectorAll((0, It.allInputsSelector)())).reduce(function(t, n) {\n    return (0, At.isNativeInput)(n) || (0, wt.containsOnlyInlineElements)(n) ? p(p([], t, !0), [n], !1) : p(p([], t, !0), (0, Nt.getDeepestBlockElements)(n), !0);\n  }, []);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.findAllInputs = void 0;\n  var t = z;\n  Object.defineProperty(e, \"findAllInputs\", { enumerable: !0, get: function() {\n    return t.findAllInputs;\n  } });\n})(ge);\nvar ve = {}, G = {};\nObject.defineProperty(G, \"__esModule\", { value: !0 });\nG.isCollapsedWhitespaces = Bt;\nfunction Bt(e) {\n  return !/[^\\t\\n\\r ]/.test(e);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isCollapsedWhitespaces = void 0;\n  var t = G;\n  Object.defineProperty(e, \"isCollapsedWhitespaces\", { enumerable: !0, get: function() {\n    return t.isCollapsedWhitespaces;\n  } });\n})(ve);\nvar K = {}, X = {};\nObject.defineProperty(X, \"__esModule\", { value: !0 });\nX.isElement = Ht;\nvar Dt = $;\nfunction Ht(e) {\n  return (0, Dt.isNumber)(e) ? !1 : !!e && !!e.nodeType && e.nodeType === Node.ELEMENT_NODE;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isElement = void 0;\n  var t = X;\n  Object.defineProperty(e, \"isElement\", { enumerable: !0, get: function() {\n    return t.isElement;\n  } });\n})(K);\nvar me = {}, Y = {}, Q = {}, V = {};\nObject.defineProperty(V, \"__esModule\", { value: !0 });\nV.isLeaf = Rt;\nfunction Rt(e) {\n  return e === null ? !1 : e.childNodes.length === 0;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isLeaf = void 0;\n  var t = V;\n  Object.defineProperty(e, \"isLeaf\", { enumerable: !0, get: function() {\n    return t.isLeaf;\n  } });\n})(Q);\nvar Z = {}, J = {};\nObject.defineProperty(J, \"__esModule\", { value: !0 });\nJ.isNodeEmpty = zt;\nvar Ft = h, Wt = K, Ut = s, qt = E;\nfunction zt(e, t) {\n  var n = \"\";\n  return (0, qt.isSingleTag)(e) && !(0, Ft.isLineBreakTag)(e) ? !1 : ((0, Wt.isElement)(e) && (0, Ut.isNativeInput)(e) ? n = e.value : e.textContent !== null && (n = e.textContent.replace(\"​\", \"\")), t !== void 0 && (n = n.replace(new RegExp(t, \"g\"), \"\")), n.trim().length === 0);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isNodeEmpty = void 0;\n  var t = J;\n  Object.defineProperty(e, \"isNodeEmpty\", { enumerable: !0, get: function() {\n    return t.isNodeEmpty;\n  } });\n})(Z);\nObject.defineProperty(Y, \"__esModule\", { value: !0 });\nY.isEmpty = Xt;\nvar Gt = Q, Kt = Z;\nfunction Xt(e, t) {\n  e.normalize();\n  for (var n = [e]; n.length > 0; ) {\n    var r = n.shift();\n    if (r) {\n      if (e = r, (0, Gt.isLeaf)(e) && !(0, Kt.isNodeEmpty)(e, t))\n        return !1;\n      n.push.apply(n, Array.from(e.childNodes));\n    }\n  }\n  return !0;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isEmpty = void 0;\n  var t = Y;\n  Object.defineProperty(e, \"isEmpty\", { enumerable: !0, get: function() {\n    return t.isEmpty;\n  } });\n})(me);\nvar be = {}, x = {};\nObject.defineProperty(x, \"__esModule\", { value: !0 });\nx.isFragment = Qt;\nvar Yt = $;\nfunction Qt(e) {\n  return (0, Yt.isNumber)(e) ? !1 : !!e && !!e.nodeType && e.nodeType === Node.DOCUMENT_FRAGMENT_NODE;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isFragment = void 0;\n  var t = x;\n  Object.defineProperty(e, \"isFragment\", { enumerable: !0, get: function() {\n    return t.isFragment;\n  } });\n})(be);\nvar _e = {}, ee = {};\nObject.defineProperty(ee, \"__esModule\", { value: !0 });\nee.isHTMLString = Zt;\nvar Vt = y;\nfunction Zt(e) {\n  var t = (0, Vt.make)(\"div\");\n  return t.innerHTML = e, t.childElementCount > 0;\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.isHTMLString = void 0;\n  var t = ee;\n  Object.defineProperty(e, \"isHTMLString\", { enumerable: !0, get: function() {\n    return t.isHTMLString;\n  } });\n})(_e);\nvar ye = {}, te = {};\nObject.defineProperty(te, \"__esModule\", { value: !0 });\nte.offset = Jt;\nfunction Jt(e) {\n  var t = e.getBoundingClientRect(), n = window.pageXOffset || document.documentElement.scrollLeft, r = window.pageYOffset || document.documentElement.scrollTop, i = t.top + r, a = t.left + n;\n  return {\n    top: i,\n    left: a,\n    bottom: i + t.height,\n    right: a + t.width\n  };\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.offset = void 0;\n  var t = te;\n  Object.defineProperty(e, \"offset\", { enumerable: !0, get: function() {\n    return t.offset;\n  } });\n})(ye);\nvar he = {}, ne = {};\nObject.defineProperty(ne, \"__esModule\", { value: !0 });\nne.prepend = xt;\nfunction xt(e, t) {\n  Array.isArray(t) ? (t = t.reverse(), t.forEach(function(n) {\n    return e.prepend(n);\n  })) : e.prepend(t);\n}\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.prepend = void 0;\n  var t = ne;\n  Object.defineProperty(e, \"prepend\", { enumerable: !0, get: function() {\n    return t.prepend;\n  } });\n})(he);\n(function(e) {\n  Object.defineProperty(e, \"__esModule\", { value: !0 }), e.prepend = e.offset = e.make = e.isLineBreakTag = e.isSingleTag = e.isNodeEmpty = e.isLeaf = e.isHTMLString = e.isFragment = e.isEmpty = e.isElement = e.isContentEditable = e.isCollapsedWhitespaces = e.findAllInputs = e.isNativeInput = e.allInputsSelector = e.getDeepestNode = e.getDeepestBlockElements = e.getContentLength = e.fragmentToString = e.containsOnlyInlineElements = e.canSetCaret = e.calculateBaseline = e.blockElements = e.append = void 0;\n  var t = P;\n  Object.defineProperty(e, \"allInputsSelector\", { enumerable: !0, get: function() {\n    return t.allInputsSelector;\n  } });\n  var n = s;\n  Object.defineProperty(e, \"isNativeInput\", { enumerable: !0, get: function() {\n    return n.isNativeInput;\n  } });\n  var r = ie;\n  Object.defineProperty(e, \"append\", { enumerable: !0, get: function() {\n    return r.append;\n  } });\n  var i = C;\n  Object.defineProperty(e, \"blockElements\", { enumerable: !0, get: function() {\n    return i.blockElements;\n  } });\n  var a = ae;\n  Object.defineProperty(e, \"calculateBaseline\", { enumerable: !0, get: function() {\n    return a.calculateBaseline;\n  } });\n  var l = le;\n  Object.defineProperty(e, \"canSetCaret\", { enumerable: !0, get: function() {\n    return l.canSetCaret;\n  } });\n  var u = _;\n  Object.defineProperty(e, \"containsOnlyInlineElements\", { enumerable: !0, get: function() {\n    return u.containsOnlyInlineElements;\n  } });\n  var d = ce;\n  Object.defineProperty(e, \"fragmentToString\", { enumerable: !0, get: function() {\n    return d.fragmentToString;\n  } });\n  var c = se;\n  Object.defineProperty(e, \"getContentLength\", { enumerable: !0, get: function() {\n    return c.getContentLength;\n  } });\n  var f = R;\n  Object.defineProperty(e, \"getDeepestBlockElements\", { enumerable: !0, get: function() {\n    return f.getDeepestBlockElements;\n  } });\n  var Oe = fe;\n  Object.defineProperty(e, \"getDeepestNode\", { enumerable: !0, get: function() {\n    return Oe.getDeepestNode;\n  } });\n  var Pe = ge;\n  Object.defineProperty(e, \"findAllInputs\", { enumerable: !0, get: function() {\n    return Pe.findAllInputs;\n  } });\n  var je = ve;\n  Object.defineProperty(e, \"isCollapsedWhitespaces\", { enumerable: !0, get: function() {\n    return je.isCollapsedWhitespaces;\n  } });\n  var Te = w;\n  Object.defineProperty(e, \"isContentEditable\", { enumerable: !0, get: function() {\n    return Te.isContentEditable;\n  } });\n  var Se = K;\n  Object.defineProperty(e, \"isElement\", { enumerable: !0, get: function() {\n    return Se.isElement;\n  } });\n  var Ce = me;\n  Object.defineProperty(e, \"isEmpty\", { enumerable: !0, get: function() {\n    return Ce.isEmpty;\n  } });\n  var Le = be;\n  Object.defineProperty(e, \"isFragment\", { enumerable: !0, get: function() {\n    return Le.isFragment;\n  } });\n  var Me = _e;\n  Object.defineProperty(e, \"isHTMLString\", { enumerable: !0, get: function() {\n    return Me.isHTMLString;\n  } });\n  var ke = Q;\n  Object.defineProperty(e, \"isLeaf\", { enumerable: !0, get: function() {\n    return ke.isLeaf;\n  } });\n  var we = Z;\n  Object.defineProperty(e, \"isNodeEmpty\", { enumerable: !0, get: function() {\n    return we.isNodeEmpty;\n  } });\n  var Ne = h;\n  Object.defineProperty(e, \"isLineBreakTag\", { enumerable: !0, get: function() {\n    return Ne.isLineBreakTag;\n  } });\n  var Ie = E;\n  Object.defineProperty(e, \"isSingleTag\", { enumerable: !0, get: function() {\n    return Ie.isSingleTag;\n  } });\n  var Ae = y;\n  Object.defineProperty(e, \"make\", { enumerable: !0, get: function() {\n    return Ae.make;\n  } });\n  var $e = ye;\n  Object.defineProperty(e, \"offset\", { enumerable: !0, get: function() {\n    return $e.offset;\n  } });\n  var Be = he;\n  Object.defineProperty(e, \"prepend\", { enumerable: !0, get: function() {\n    return Be.prepend;\n  } });\n})(g);\nvar Ee = /* @__PURE__ */ ((e) => (e.Left = \"left\", e.Center = \"center\", e))(Ee || {});\nclass m {\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {object} params - constructor params\n   * @param {QuoteData} params.data - previously saved data\n   * @param {QuoteConfig} params.config - user config for Tool\n   * @param {API} params.api - editor.js api\n   * @param {boolean} params.readOnly - read only mode flag\n   */\n  constructor({ data: t, config: n, api: r, readOnly: i, block: a }) {\n    const { DEFAULT_ALIGNMENT: l } = m;\n    this.api = r, this.readOnly = i, this._quotePlaceholder = n.quotePlaceholder || m.DEFAULT_QUOTE_PLACEHOLDER, this._captionPlaceholder = n.captionPlaceholder || m.DEFAULT_CAPTION_PLACEHOLDER, this._data = {\n      text: t.text || \"\",\n      caption: t.caption || \"\",\n      alignment: Object.values(Ee).includes(t.alignment) && t.alignment || n.defaultAlignment || l\n    }, this._CSS = {\n      baseClass: this.api.styles.block,\n      wrapper: \"cdx-quote\",\n      text: \"cdx-quote__text\",\n      input: this.api.styles.input,\n      caption: \"cdx-quote__caption\"\n    }, this._block = a;\n  }\n  /**\n   * Notify core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: Re,\n      title: \"Quote\"\n    };\n  }\n  /**\n   * Empty Quote is not empty Block\n   *\n   * @public\n   * @returns {boolean}\n   */\n  static get contentless() {\n    return !0;\n  }\n  /**\n   * Allow to press Enter inside the Quote\n   *\n   * @public\n   * @returns {boolean}\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * Default placeholder for quote text\n   *\n   * @public\n   * @returns {string}\n   */\n  static get DEFAULT_QUOTE_PLACEHOLDER() {\n    return \"Enter a quote\";\n  }\n  /**\n   * Default placeholder for quote caption\n   *\n   * @public\n   * @returns {string}\n   */\n  static get DEFAULT_CAPTION_PLACEHOLDER() {\n    return \"Enter a caption\";\n  }\n  /**\n   * Default quote alignment\n   *\n   * @public\n   * @returns {string}\n   */\n  static get DEFAULT_ALIGNMENT() {\n    return \"left\";\n  }\n  /**\n   * Allow Quote to be converted to/from other blocks\n   */\n  static get conversionConfig() {\n    return {\n      /**\n       * To create Quote data from string, simple fill 'text' property\n       */\n      import: \"text\",\n      /**\n       * To create string from Quote data, concatenate text and caption\n       *\n       * @param {QuoteData} quoteData\n       * @returns {string}\n       */\n      export: function(t) {\n        return t.caption ? `${t.text} — ${t.caption}` : t.text;\n      }\n    };\n  }\n  /**\n   * Tool`s styles\n   *\n   * @returns {QuoteCSS}\n   */\n  get CSS() {\n    return {\n      baseClass: this.api.styles.block,\n      wrapper: \"cdx-quote\",\n      text: \"cdx-quote__text\",\n      input: this.api.styles.input,\n      caption: \"cdx-quote__caption\"\n    };\n  }\n  /**\n   * Tool`s settings properties\n   *\n   * @returns {*[]}\n   */\n  get settings() {\n    return [\n      {\n        name: \"left\",\n        icon: He\n      },\n      {\n        name: \"center\",\n        icon: De\n      }\n    ];\n  }\n  /**\n   * Create Quote Tool container with inputs\n   *\n   * @returns {Element}\n   */\n  render() {\n    const t = g.make(\"blockquote\", [\n      this._CSS.baseClass,\n      this._CSS.wrapper\n    ]), n = g.make(\"div\", [this._CSS.input, this._CSS.text], {\n      contentEditable: !this.readOnly,\n      innerHTML: this._data.text\n    }), r = g.make(\"div\", [this._CSS.input, this._CSS.caption], {\n      contentEditable: !this.readOnly,\n      innerHTML: this._data.caption\n    });\n    return n.dataset.placeholder = this._quotePlaceholder, r.dataset.placeholder = this._captionPlaceholder, t.appendChild(n), t.appendChild(r), t;\n  }\n  /**\n   * Extract Quote data from Quote Tool element\n   *\n   * @param {HTMLDivElement} quoteElement - element to save\n   * @returns {QuoteData}\n   */\n  save(t) {\n    const n = t.querySelector(`.${this._CSS.text}`), r = t.querySelector(`.${this._CSS.caption}`);\n    return Object.assign(this._data, {\n      text: (n == null ? void 0 : n.innerHTML) ?? \"\",\n      caption: (r == null ? void 0 : r.innerHTML) ?? \"\"\n    });\n  }\n  /**\n   * Sanitizer rules\n   */\n  static get sanitize() {\n    return {\n      text: {\n        br: !0\n      },\n      caption: {\n        br: !0\n      },\n      alignment: {}\n    };\n  }\n  /**\n   * Create wrapper for Tool`s settings buttons:\n   * 1. Left alignment\n   * 2. Center alignment\n   *\n   * @returns {MenuConfig}\n   *\n   */\n  renderSettings() {\n    const t = (n) => n && n[0].toUpperCase() + n.slice(1);\n    return this.settings.map((n) => ({\n      icon: n.icon,\n      label: this.api.i18n.t(`Align ${t(n.name)}`),\n      onActivate: () => this._toggleTune(n.name),\n      isActive: this._data.alignment === n.name,\n      closeOnActivate: !0\n    }));\n  }\n  /**\n   * Toggle quote`s alignment\n   *\n   * @param {string} tune - alignment\n   * @private\n   */\n  _toggleTune(t) {\n    this._data.alignment = t, this._block.dispatchChange();\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@editorjs/quote/dist/quote.mjs\n");

/***/ }),

/***/ "./node_modules/@editorjs/raw/dist/raw.mjs":
/*!*************************************************!*\
  !*** ./node_modules/@editorjs/raw/dist/raw.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ r)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".ce-rawtool__textarea{min-height:200px;resize:vertical;border-radius:8px;border:0;background-color:#1e2128;font-family:Menlo,Monaco,Consolas,Courier New,monospace;font-size:12px;line-height:1.6;letter-spacing:-.2px;color:#a1a7b6;overscroll-behavior:contain}\")),document.head.appendChild(e)}}catch(o){console.error(\"vite-plugin-css-injected-by-js\",o)}})();\nconst a = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16.6954 5C17.912 5 18.8468 6.07716 18.6755 7.28165L17.426 16.0659C17.3183 16.8229 16.7885 17.4522 16.061 17.6873L12.6151 18.8012C12.2152 18.9304 11.7848 18.9304 11.3849 18.8012L7.93898 17.6873C7.21148 17.4522 6.6817 16.8229 6.57403 16.0659L5.32454 7.28165C5.15322 6.07716 6.088 5 7.30461 5H16.6954Z\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 8.4H9L9.42857 11.7939H14.5714L14.3571 13.2788L14.1429 14.7636L12 15.4L9.85714 14.7636L9.77143 14.3394\"/></svg>';\n/**\n * Raw HTML Tool for CodeX Editor\n *\n * @author CodeX (team@codex.so)\n * @copyright CodeX 2018\n * @license The MIT License (MIT)\n */\nclass r {\n  /**\n   * Notify core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Should this tool be displayed at the Editor's Toolbox\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get displayInToolbox() {\n    return !0;\n  }\n  /**\n   * Allow to press Enter inside the RawTool textarea\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: a,\n      title: \"Raw HTML\"\n    };\n  }\n  /**\n   * @typedef {object} RawData — plugin saved data\n   * @param {string} html - previously saved HTML code\n   * @property\n   */\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {RawData} data — previously saved HTML data\n   * @param {object} config - user config for Tool\n   * @param {object} api - CodeX Editor API\n   * @param {boolean} readOnly - read-only mode flag\n   */\n  constructor({ data: t, config: e, api: s, readOnly: i }) {\n    this.api = s, this.readOnly = i, this.placeholder = e.placeholder || r.DEFAULT_PLACEHOLDER, this.CSS = {\n      baseClass: this.api.styles.block,\n      input: this.api.styles.input,\n      wrapper: \"ce-rawtool\",\n      textarea: \"ce-rawtool__textarea\"\n    }, this.data = {\n      html: t.html || \"\"\n    }, this.textarea = null, this.resizeDebounce = null;\n  }\n  /**\n   * Return Tool's view\n   *\n   * @returns {HTMLDivElement} this.element - RawTool's wrapper\n   * @public\n   */\n  render() {\n    const t = document.createElement(\"div\"), e = 100;\n    return this.textarea = document.createElement(\"textarea\"), t.classList.add(this.CSS.baseClass, this.CSS.wrapper), this.textarea.classList.add(this.CSS.textarea, this.CSS.input), this.textarea.textContent = this.data.html, this.textarea.placeholder = this.placeholder, this.readOnly ? this.textarea.disabled = !0 : this.textarea.addEventListener(\"input\", () => {\n      this.onInput();\n    }), t.appendChild(this.textarea), setTimeout(() => {\n      this.resize();\n    }, e), t;\n  }\n  /**\n   * Extract Tool's data from the view\n   *\n   * @param {HTMLDivElement} rawToolsWrapper - RawTool's wrapper, containing textarea with raw HTML code\n   * @returns {RawData} - raw HTML code\n   * @public\n   */\n  save(t) {\n    return {\n      html: t.querySelector(\"textarea\").value\n    };\n  }\n  /**\n   * Default placeholder for RawTool's textarea\n   *\n   * @public\n   * @returns {string}\n   */\n  static get DEFAULT_PLACEHOLDER() {\n    return \"Enter HTML code\";\n  }\n  /**\n   * Automatic sanitize config\n   */\n  static get sanitize() {\n    return {\n      html: !0\n      // Allow HTML tags\n    };\n  }\n  /**\n   * Textarea change event\n   *\n   * @returns {void}\n   */\n  onInput() {\n    this.resizeDebounce && clearTimeout(this.resizeDebounce), this.resizeDebounce = setTimeout(() => {\n      this.resize();\n    }, 200);\n  }\n  /**\n   * Resize textarea to fit whole height\n   *\n   * @returns {void}\n   */\n  resize() {\n    this.textarea.style.height = \"auto\", this.textarea.style.height = this.textarea.scrollHeight + \"px\";\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@editorjs/raw/dist/raw.mjs\n");

/***/ }),

/***/ "./node_modules/@editorjs/table/dist/table.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@editorjs/table/dist/table.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ F)\n/* harmony export */ });\n(function(){var r;\"use strict\";try{if(typeof document<\"u\"){var o=document.createElement(\"style\");o.nonce=(r=document.head.querySelector(\"meta[property=csp-nonce]\"))==null?void 0:r.content,o.appendChild(document.createTextNode('.tc-wrap{--color-background:#f9f9fb;--color-text-secondary:#7b7e89;--color-border:#e8e8eb;--cell-size:34px;--toolbox-icon-size:18px;--toolbox-padding:6px;--toolbox-aiming-field-size:calc(var(--toolbox-icon-size) + var(--toolbox-padding)*2);border-left:0;position:relative;height:100%;width:100%;margin-top:var(--toolbox-icon-size);box-sizing:border-box;display:grid;grid-template-columns:calc(100% - var(--cell-size)) var(--cell-size)}.tc-wrap--readonly{grid-template-columns:100% var(--cell-size)}.tc-wrap svg{vertical-align:top}@media print{.tc-wrap{border-left-color:var(--color-border);border-left-style:solid;border-left-width:1px;grid-template-columns:100% var(--cell-size)}}@media print{.tc-wrap .tc-row:after{display:none}}.tc-table{position:relative;width:100%;height:100%;display:grid;font-size:14px;border-top:1px solid var(--color-border);line-height:1.4}.tc-table:after{width:calc(var(--cell-size));height:100%;left:calc(var(--cell-size)*-1);top:0}.tc-table:after,.tc-table:before{position:absolute;content:\"\"}.tc-table:before{width:100%;height:var(--toolbox-aiming-field-size);top:calc(var(--toolbox-aiming-field-size)*-1);left:0}.tc-table--heading .tc-row:first-child{font-weight:600;border-bottom:2px solid var(--color-border)}.tc-table--heading .tc-row:first-child [contenteditable]:empty:before{content:attr(heading);color:var(--color-text-secondary)}.tc-table--heading .tc-row:first-child:after{bottom:-2px;border-bottom:2px solid var(--color-border)}.tc-add-column,.tc-add-row{display:flex;color:var(--color-text-secondary)}@media print{.tc-add{display:none}}.tc-add-column{padding:4px 0;justify-content:center;border-top:1px solid var(--color-border)}.tc-add-column--disabled{visibility:hidden}@media print{.tc-add-column{display:none}}.tc-add-row{height:var(--cell-size);align-items:center;padding-left:4px;position:relative}.tc-add-row--disabled{display:none}.tc-add-row:before{content:\"\";position:absolute;right:calc(var(--cell-size)*-1);width:var(--cell-size);height:100%}@media print{.tc-add-row{display:none}}.tc-add-column,.tc-add-row{transition:0s;cursor:pointer;will-change:background-color}.tc-add-column:hover,.tc-add-row:hover{transition:background-color .1s ease;background-color:var(--color-background)}.tc-add-row{margin-top:1px}.tc-add-row:hover:before{transition:.1s;background-color:var(--color-background)}.tc-row{display:grid;grid-template-columns:repeat(auto-fit,minmax(10px,1fr));position:relative;border-bottom:1px solid var(--color-border)}.tc-row:after{content:\"\";pointer-events:none;position:absolute;width:var(--cell-size);height:100%;bottom:-1px;right:calc(var(--cell-size)*-1);border-bottom:1px solid var(--color-border)}.tc-row--selected{background:var(--color-background)}.tc-row--selected:after{background:var(--color-background)}.tc-cell{border-right:1px solid var(--color-border);padding:6px 12px;overflow:hidden;outline:none;line-break:normal}.tc-cell--selected{background:var(--color-background)}.tc-wrap--readonly .tc-row:after{display:none}.tc-toolbox{--toolbox-padding:6px;--popover-margin:30px;--toggler-click-zone-size:30px;--toggler-dots-color:#7b7e89;--toggler-dots-color-hovered:#1d202b;position:absolute;cursor:pointer;z-index:1;opacity:0;transition:opacity .1s;will-change:left,opacity}.tc-toolbox--column{top:calc(var(--toggler-click-zone-size)*-1);transform:translate(calc(var(--toggler-click-zone-size)*-1/2));will-change:left,opacity}.tc-toolbox--row{left:calc(var(--popover-margin)*-1);transform:translateY(calc(var(--toggler-click-zone-size)*-1/2));margin-top:-1px;will-change:top,opacity}.tc-toolbox--showed{opacity:1}.tc-toolbox .tc-popover{position:absolute;top:0;left:var(--popover-margin)}.tc-toolbox__toggler{display:flex;align-items:center;justify-content:center;width:var(--toggler-click-zone-size);height:var(--toggler-click-zone-size);color:var(--toggler-dots-color);opacity:0;transition:opacity .15s ease;will-change:opacity}.tc-toolbox__toggler:hover{color:var(--toggler-dots-color-hovered)}.tc-toolbox__toggler svg{fill:currentColor}.tc-wrap:hover .tc-toolbox__toggler{opacity:1}.tc-settings .cdx-settings-button{width:50%;margin:0}.tc-popover{--color-border:#eaeaea;--color-background:#fff;--color-background-hover:rgba(232,232,235,.49);--color-background-confirm:#e24a4a;--color-background-confirm-hover:#d54040;--color-text-confirm:#fff;background:var(--color-background);border:1px solid var(--color-border);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;padding:6px;display:none;will-change:opacity,transform}.tc-popover--opened{display:block;animation:menuShowing .1s cubic-bezier(.215,.61,.355,1) forwards}.tc-popover__item{display:flex;align-items:center;padding:2px 14px 2px 2px;border-radius:5px;cursor:pointer;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;user-select:none}.tc-popover__item:hover{background:var(--color-background-hover)}.tc-popover__item:not(:last-of-type){margin-bottom:2px}.tc-popover__item-icon{display:inline-flex;width:26px;height:26px;align-items:center;justify-content:center;background:var(--color-background);border-radius:5px;border:1px solid var(--color-border);margin-right:8px}.tc-popover__item-label{line-height:22px;font-size:14px;font-weight:500}.tc-popover__item--confirm{background:var(--color-background-confirm);color:var(--color-text-confirm)}.tc-popover__item--confirm:hover{background-color:var(--color-background-confirm-hover)}.tc-popover__item--confirm .tc-popover__item-icon{background:var(--color-background-confirm);border-color:#0000001a}.tc-popover__item--confirm .tc-popover__item-icon svg{transition:transform .2s ease-in;transform:rotate(90deg) scale(1.2)}.tc-popover__item--hidden{display:none}@keyframes menuShowing{0%{opacity:0;transform:translateY(-8px) scale(.9)}70%{opacity:1;transform:translateY(2px)}to{transform:translateY(0)}}')),document.head.appendChild(o)}}catch(e){console.error(\"vite-plugin-css-injected-by-js\",e)}})();\nfunction c(d, t, e = {}) {\n  const o = document.createElement(d);\n  Array.isArray(t) ? o.classList.add(...t) : t && o.classList.add(t);\n  for (const i in e)\n    Object.prototype.hasOwnProperty.call(e, i) && (o[i] = e[i]);\n  return o;\n}\nfunction f(d) {\n  const t = d.getBoundingClientRect();\n  return {\n    y1: Math.floor(t.top + window.pageYOffset),\n    x1: Math.floor(t.left + window.pageXOffset),\n    x2: Math.floor(t.right + window.pageXOffset),\n    y2: Math.floor(t.bottom + window.pageYOffset)\n  };\n}\nfunction g(d, t) {\n  const e = f(d), o = f(t);\n  return {\n    fromTopBorder: o.y1 - e.y1,\n    fromLeftBorder: o.x1 - e.x1,\n    fromRightBorder: e.x2 - o.x2,\n    fromBottomBorder: e.y2 - o.y2\n  };\n}\nfunction k(d, t) {\n  const e = d.getBoundingClientRect(), { width: o, height: i, x: n, y: r } = e, { clientX: h, clientY: l } = t;\n  return {\n    width: o,\n    height: i,\n    x: h - n,\n    y: l - r\n  };\n}\nfunction m(d, t) {\n  return t.parentNode.insertBefore(d, t);\n}\nfunction C(d, t = !0) {\n  const e = document.createRange(), o = window.getSelection();\n  e.selectNodeContents(d), e.collapse(t), o.removeAllRanges(), o.addRange(e);\n}\nclass a {\n  /**\n   * @param {object} options - constructor options\n   * @param {PopoverItem[]} options.items - constructor options\n   */\n  constructor({ items: t }) {\n    this.items = t, this.wrapper = void 0, this.itemEls = [];\n  }\n  /**\n   * Set of CSS classnames used in popover\n   *\n   * @returns {object}\n   */\n  static get CSS() {\n    return {\n      popover: \"tc-popover\",\n      popoverOpened: \"tc-popover--opened\",\n      item: \"tc-popover__item\",\n      itemHidden: \"tc-popover__item--hidden\",\n      itemConfirmState: \"tc-popover__item--confirm\",\n      itemIcon: \"tc-popover__item-icon\",\n      itemLabel: \"tc-popover__item-label\"\n    };\n  }\n  /**\n   * Returns the popover element\n   *\n   * @returns {Element}\n   */\n  render() {\n    return this.wrapper = c(\"div\", a.CSS.popover), this.items.forEach((t, e) => {\n      const o = c(\"div\", a.CSS.item), i = c(\"div\", a.CSS.itemIcon, {\n        innerHTML: t.icon\n      }), n = c(\"div\", a.CSS.itemLabel, {\n        textContent: t.label\n      });\n      o.dataset.index = e, o.appendChild(i), o.appendChild(n), this.wrapper.appendChild(o), this.itemEls.push(o);\n    }), this.wrapper.addEventListener(\"click\", (t) => {\n      this.popoverClicked(t);\n    }), this.wrapper;\n  }\n  /**\n   * Popover wrapper click listener\n   * Used to delegate clicks in items\n   *\n   * @returns {void}\n   */\n  popoverClicked(t) {\n    const e = t.target.closest(`.${a.CSS.item}`);\n    if (!e)\n      return;\n    const o = e.dataset.index, i = this.items[o];\n    if (i.confirmationRequired && !this.hasConfirmationState(e)) {\n      this.setConfirmationState(e);\n      return;\n    }\n    i.onClick();\n  }\n  /**\n   * Enable the confirmation state on passed item\n   *\n   * @returns {void}\n   */\n  setConfirmationState(t) {\n    t.classList.add(a.CSS.itemConfirmState);\n  }\n  /**\n   * Disable the confirmation state on passed item\n   *\n   * @returns {void}\n   */\n  clearConfirmationState(t) {\n    t.classList.remove(a.CSS.itemConfirmState);\n  }\n  /**\n   * Check if passed item has the confirmation state\n   *\n   * @returns {boolean}\n   */\n  hasConfirmationState(t) {\n    return t.classList.contains(a.CSS.itemConfirmState);\n  }\n  /**\n   * Return an opening state\n   *\n   * @returns {boolean}\n   */\n  get opened() {\n    return this.wrapper.classList.contains(a.CSS.popoverOpened);\n  }\n  /**\n   * Opens the popover\n   *\n   * @returns {void}\n   */\n  open() {\n    this.items.forEach((t, e) => {\n      typeof t.hideIf == \"function\" && this.itemEls[e].classList.toggle(a.CSS.itemHidden, t.hideIf());\n    }), this.wrapper.classList.add(a.CSS.popoverOpened);\n  }\n  /**\n   * Closes the popover\n   *\n   * @returns {void}\n   */\n  close() {\n    this.wrapper.classList.remove(a.CSS.popoverOpened), this.itemEls.forEach((t) => {\n      this.clearConfirmationState(t);\n    });\n  }\n}\nconst R = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 9L10 12M10 12L7 15M10 12H4\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 9L14 12M14 12L17 15M14 12H20\"/></svg>', b = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8 8L12 12M12 12L16 16M12 12L16 8M12 12L8 16\"/></svg>', x = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.8833 9.16666L18.2167 12.5M18.2167 12.5L14.8833 15.8333M18.2167 12.5H10.05C9.16594 12.5 8.31809 12.1488 7.69297 11.5237C7.06785 10.8986 6.71666 10.0507 6.71666 9.16666\"/></svg>', S = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.9167 14.9167L11.5833 18.25M11.5833 18.25L8.25 14.9167M11.5833 18.25L11.5833 10.0833C11.5833 9.19928 11.9345 8.35143 12.5596 7.72631C13.1848 7.10119 14.0326 6.75 14.9167 6.75\"/></svg>', y = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.13333 14.9167L12.4667 18.25M12.4667 18.25L15.8 14.9167M12.4667 18.25L12.4667 10.0833C12.4667 9.19928 12.1155 8.35143 11.4904 7.72631C10.8652 7.10119 10.0174 6.75 9.13333 6.75\"/></svg>', L = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.8833 15.8333L18.2167 12.5M18.2167 12.5L14.8833 9.16667M18.2167 12.5L10.05 12.5C9.16595 12.5 8.31811 12.8512 7.69299 13.4763C7.06787 14.1014 6.71667 14.9493 6.71667 15.8333\"/></svg>', M = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.41 9.66H9.4\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 9.66H14.59\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.31 14.36H9.3\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 14.36H14.59\"/></svg>', v = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M12 7V12M12 17V12M17 12H12M12 12H7\"/></svg>', O = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 9L20 12L17 15\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14 12H20\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 9L4 12L7 15\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 12H10\"/></svg>', T = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M5 10H19\"/><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/></svg>', H = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M10 5V18.5\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M14 5V18.5\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M5 10H19\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M5 14H19\"/><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/></svg>', A = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M10 5V18.5\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M5 10H19\"/><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/></svg>';\nclass w {\n  /**\n   * Creates toolbox buttons and toolbox menus\n   *\n   * @param {object} api - Editor.js api\n   * @param {PopoverItem[]} items - Editor.js api\n   * @param {function} onOpen - callback fired when the Popover is opening\n   * @param {function} onClose - callback fired when the Popover is closing\n   * @param {string} [cssModifier] - the modifier for the Toolbox. Allows to add some specific styles.\n   */\n  constructor({ api: t, items: e, onOpen: o, onClose: i, cssModifier: n = \"\" }) {\n    this.api = t, this.items = e, this.onOpen = o, this.onClose = i, this.cssModifier = n, this.popover = null, this.wrapper = this.createToolbox();\n  }\n  /**\n   * Style classes\n   */\n  static get CSS() {\n    return {\n      toolbox: \"tc-toolbox\",\n      toolboxShowed: \"tc-toolbox--showed\",\n      toggler: \"tc-toolbox__toggler\"\n    };\n  }\n  /**\n   * Returns rendered Toolbox element\n   */\n  get element() {\n    return this.wrapper;\n  }\n  /**\n   * Creating a toolbox to open menu for a manipulating columns\n   *\n   * @returns {Element}\n   */\n  createToolbox() {\n    const t = c(\"div\", [\n      w.CSS.toolbox,\n      this.cssModifier ? `${w.CSS.toolbox}--${this.cssModifier}` : \"\"\n    ]);\n    t.dataset.mutationFree = \"true\";\n    const e = this.createPopover(), o = this.createToggler();\n    return t.appendChild(o), t.appendChild(e), t;\n  }\n  /**\n   * Creates the Toggler\n   *\n   * @returns {Element}\n   */\n  createToggler() {\n    const t = c(\"div\", w.CSS.toggler, {\n      innerHTML: M\n    });\n    return t.addEventListener(\"click\", () => {\n      this.togglerClicked();\n    }), t;\n  }\n  /**\n   * Creates the Popover instance and render it\n   *\n   * @returns {Element}\n   */\n  createPopover() {\n    return this.popover = new a({\n      items: this.items\n    }), this.popover.render();\n  }\n  /**\n   * Toggler click handler. Opens/Closes the popover\n   *\n   * @returns {void}\n   */\n  togglerClicked() {\n    this.popover.opened ? (this.popover.close(), this.onClose()) : (this.popover.open(), this.onOpen());\n  }\n  /**\n   * Shows the Toolbox\n   *\n   * @param {function} computePositionMethod - method that returns the position coordinate\n   * @returns {void}\n   */\n  show(t) {\n    const e = t();\n    Object.entries(e).forEach(([o, i]) => {\n      this.wrapper.style[o] = i;\n    }), this.wrapper.classList.add(w.CSS.toolboxShowed);\n  }\n  /**\n   * Hides the Toolbox\n   *\n   * @returns {void}\n   */\n  hide() {\n    this.popover.close(), this.wrapper.classList.remove(w.CSS.toolboxShowed);\n  }\n}\nfunction B(d, t) {\n  let e = 0;\n  return function(...o) {\n    const i = (/* @__PURE__ */ new Date()).getTime();\n    if (!(i - e < d))\n      return e = i, t(...o);\n  };\n}\nconst s = {\n  wrapper: \"tc-wrap\",\n  wrapperReadOnly: \"tc-wrap--readonly\",\n  table: \"tc-table\",\n  row: \"tc-row\",\n  withHeadings: \"tc-table--heading\",\n  rowSelected: \"tc-row--selected\",\n  cell: \"tc-cell\",\n  cellSelected: \"tc-cell--selected\",\n  addRow: \"tc-add-row\",\n  addRowDisabled: \"tc-add-row--disabled\",\n  addColumn: \"tc-add-column\",\n  addColumnDisabled: \"tc-add-column--disabled\"\n};\nclass E {\n  /**\n   * Creates\n   *\n   * @constructor\n   * @param {boolean} readOnly - read-only mode flag\n   * @param {object} api - Editor.js API\n   * @param {TableData} data - Editor.js API\n   * @param {TableConfig} config - Editor.js API\n   */\n  constructor(t, e, o, i) {\n    this.readOnly = t, this.api = e, this.data = o, this.config = i, this.wrapper = null, this.table = null, this.toolboxColumn = this.createColumnToolbox(), this.toolboxRow = this.createRowToolbox(), this.createTableWrapper(), this.hoveredRow = 0, this.hoveredColumn = 0, this.selectedRow = 0, this.selectedColumn = 0, this.tunes = {\n      withHeadings: !1\n    }, this.resize(), this.fill(), this.focusedCell = {\n      row: 0,\n      column: 0\n    }, this.documentClicked = (n) => {\n      const r = n.target.closest(`.${s.table}`) !== null, h = n.target.closest(`.${s.wrapper}`) === null;\n      (r || h) && this.hideToolboxes();\n      const u = n.target.closest(`.${s.addRow}`), p = n.target.closest(`.${s.addColumn}`);\n      u && u.parentNode === this.wrapper ? (this.addRow(void 0, !0), this.hideToolboxes()) : p && p.parentNode === this.wrapper && (this.addColumn(void 0, !0), this.hideToolboxes());\n    }, this.readOnly || this.bindEvents();\n  }\n  /**\n   * Returns the rendered table wrapper\n   *\n   * @returns {Element}\n   */\n  getWrapper() {\n    return this.wrapper;\n  }\n  /**\n   * Hangs the necessary handlers to events\n   */\n  bindEvents() {\n    document.addEventListener(\"click\", this.documentClicked), this.table.addEventListener(\"mousemove\", B(150, (t) => this.onMouseMoveInTable(t)), { passive: !0 }), this.table.onkeypress = (t) => this.onKeyPressListener(t), this.table.addEventListener(\"keydown\", (t) => this.onKeyDownListener(t)), this.table.addEventListener(\"focusin\", (t) => this.focusInTableListener(t));\n  }\n  /**\n   * Configures and creates the toolbox for manipulating with columns\n   *\n   * @returns {Toolbox}\n   */\n  createColumnToolbox() {\n    return new w({\n      api: this.api,\n      cssModifier: \"column\",\n      items: [\n        {\n          label: this.api.i18n.t(\"Add column to left\"),\n          icon: S,\n          hideIf: () => this.numberOfColumns === this.config.maxcols,\n          onClick: () => {\n            this.addColumn(this.selectedColumn, !0), this.hideToolboxes();\n          }\n        },\n        {\n          label: this.api.i18n.t(\"Add column to right\"),\n          icon: y,\n          hideIf: () => this.numberOfColumns === this.config.maxcols,\n          onClick: () => {\n            this.addColumn(this.selectedColumn + 1, !0), this.hideToolboxes();\n          }\n        },\n        {\n          label: this.api.i18n.t(\"Delete column\"),\n          icon: b,\n          hideIf: () => this.numberOfColumns === 1,\n          confirmationRequired: !0,\n          onClick: () => {\n            this.deleteColumn(this.selectedColumn), this.hideToolboxes();\n          }\n        }\n      ],\n      onOpen: () => {\n        this.selectColumn(this.hoveredColumn), this.hideRowToolbox();\n      },\n      onClose: () => {\n        this.unselectColumn();\n      }\n    });\n  }\n  /**\n   * Configures and creates the toolbox for manipulating with rows\n   *\n   * @returns {Toolbox}\n   */\n  createRowToolbox() {\n    return new w({\n      api: this.api,\n      cssModifier: \"row\",\n      items: [\n        {\n          label: this.api.i18n.t(\"Add row above\"),\n          icon: L,\n          hideIf: () => this.numberOfRows === this.config.maxrows,\n          onClick: () => {\n            this.addRow(this.selectedRow, !0), this.hideToolboxes();\n          }\n        },\n        {\n          label: this.api.i18n.t(\"Add row below\"),\n          icon: x,\n          hideIf: () => this.numberOfRows === this.config.maxrows,\n          onClick: () => {\n            this.addRow(this.selectedRow + 1, !0), this.hideToolboxes();\n          }\n        },\n        {\n          label: this.api.i18n.t(\"Delete row\"),\n          icon: b,\n          hideIf: () => this.numberOfRows === 1,\n          confirmationRequired: !0,\n          onClick: () => {\n            this.deleteRow(this.selectedRow), this.hideToolboxes();\n          }\n        }\n      ],\n      onOpen: () => {\n        this.selectRow(this.hoveredRow), this.hideColumnToolbox();\n      },\n      onClose: () => {\n        this.unselectRow();\n      }\n    });\n  }\n  /**\n   * When you press enter it moves the cursor down to the next row\n   * or creates it if the click occurred on the last one\n   */\n  moveCursorToNextRow() {\n    this.focusedCell.row !== this.numberOfRows ? (this.focusedCell.row += 1, this.focusCell(this.focusedCell)) : (this.addRow(), this.focusedCell.row += 1, this.focusCell(this.focusedCell), this.updateToolboxesPosition(0, 0));\n  }\n  /**\n   * Get table cell by row and col index\n   *\n   * @param {number} row - cell row coordinate\n   * @param {number} column - cell column coordinate\n   * @returns {HTMLElement}\n   */\n  getCell(t, e) {\n    return this.table.querySelectorAll(`.${s.row}:nth-child(${t}) .${s.cell}`)[e - 1];\n  }\n  /**\n   * Get table row by index\n   *\n   * @param {number} row - row coordinate\n   * @returns {HTMLElement}\n   */\n  getRow(t) {\n    return this.table.querySelector(`.${s.row}:nth-child(${t})`);\n  }\n  /**\n   * The parent of the cell which is the row\n   *\n   * @param {HTMLElement} cell - cell element\n   * @returns {HTMLElement}\n   */\n  getRowByCell(t) {\n    return t.parentElement;\n  }\n  /**\n   * Ger row's first cell\n   *\n   * @param {Element} row - row to find its first cell\n   * @returns {Element}\n   */\n  getRowFirstCell(t) {\n    return t.querySelector(`.${s.cell}:first-child`);\n  }\n  /**\n   * Set the sell's content by row and column numbers\n   *\n   * @param {number} row - cell row coordinate\n   * @param {number} column - cell column coordinate\n   * @param {string} content - cell HTML content\n   */\n  setCellContent(t, e, o) {\n    const i = this.getCell(t, e);\n    i.innerHTML = o;\n  }\n  /**\n   * Add column in table on index place\n   * Add cells in each row\n   *\n   * @param {number} columnIndex - number in the array of columns, where new column to insert, -1 if insert at the end\n   * @param {boolean} [setFocus] - pass true to focus the first cell\n   */\n  addColumn(t = -1, e = !1) {\n    var n;\n    let o = this.numberOfColumns;\n    if (this.config && this.config.maxcols && this.numberOfColumns >= this.config.maxcols)\n      return;\n    for (let r = 1; r <= this.numberOfRows; r++) {\n      let h;\n      const l = this.createCell();\n      if (t > 0 && t <= o ? (h = this.getCell(r, t), m(l, h)) : h = this.getRow(r).appendChild(l), r === 1) {\n        const u = this.getCell(r, t > 0 ? t : o + 1);\n        u && e && C(u);\n      }\n    }\n    const i = this.wrapper.querySelector(`.${s.addColumn}`);\n    (n = this.config) != null && n.maxcols && this.numberOfColumns > this.config.maxcols - 1 && i && i.classList.add(s.addColumnDisabled), this.addHeadingAttrToFirstRow();\n  }\n  /**\n   * Add row in table on index place\n   *\n   * @param {number} index - number in the array of rows, where new column to insert, -1 if insert at the end\n   * @param {boolean} [setFocus] - pass true to focus the inserted row\n   * @returns {HTMLElement} row\n   */\n  addRow(t = -1, e = !1) {\n    let o, i = c(\"div\", s.row);\n    this.tunes.withHeadings && this.removeHeadingAttrFromFirstRow();\n    let n = this.numberOfColumns;\n    if (this.config && this.config.maxrows && this.numberOfRows >= this.config.maxrows && h)\n      return;\n    if (t > 0 && t <= this.numberOfRows) {\n      let l = this.getRow(t);\n      o = m(i, l);\n    } else\n      o = this.table.appendChild(i);\n    this.fillRow(o, n), this.tunes.withHeadings && this.addHeadingAttrToFirstRow();\n    const r = this.getRowFirstCell(o);\n    r && e && C(r);\n    const h = this.wrapper.querySelector(`.${s.addRow}`);\n    return this.config && this.config.maxrows && this.numberOfRows >= this.config.maxrows && h && h.classList.add(s.addRowDisabled), o;\n  }\n  /**\n   * Delete a column by index\n   *\n   * @param {number} index\n   */\n  deleteColumn(t) {\n    for (let o = 1; o <= this.numberOfRows; o++) {\n      const i = this.getCell(o, t);\n      if (!i)\n        return;\n      i.remove();\n    }\n    const e = this.wrapper.querySelector(`.${s.addColumn}`);\n    e && e.classList.remove(s.addColumnDisabled);\n  }\n  /**\n   * Delete a row by index\n   *\n   * @param {number} index\n   */\n  deleteRow(t) {\n    this.getRow(t).remove();\n    const e = this.wrapper.querySelector(`.${s.addRow}`);\n    e && e.classList.remove(s.addRowDisabled), this.addHeadingAttrToFirstRow();\n  }\n  /**\n   * Create a wrapper containing a table, toolboxes\n   * and buttons for adding rows and columns\n   *\n   * @returns {HTMLElement} wrapper - where all buttons for a table and the table itself will be\n   */\n  createTableWrapper() {\n    if (this.wrapper = c(\"div\", s.wrapper), this.table = c(\"div\", s.table), this.readOnly && this.wrapper.classList.add(s.wrapperReadOnly), this.wrapper.appendChild(this.toolboxRow.element), this.wrapper.appendChild(this.toolboxColumn.element), this.wrapper.appendChild(this.table), !this.readOnly) {\n      const t = c(\"div\", s.addColumn, {\n        innerHTML: v\n      }), e = c(\"div\", s.addRow, {\n        innerHTML: v\n      });\n      this.wrapper.appendChild(t), this.wrapper.appendChild(e);\n    }\n  }\n  /**\n   * Returns the size of the table based on initial data or config \"size\" property\n   *\n   * @return {{rows: number, cols: number}} - number of cols and rows\n   */\n  computeInitialSize() {\n    const t = this.data && this.data.content, e = Array.isArray(t), o = e ? t.length : !1, i = e ? t.length : void 0, n = o ? t[0].length : void 0, r = Number.parseInt(this.config && this.config.rows), h = Number.parseInt(this.config && this.config.cols), l = !isNaN(r) && r > 0 ? r : void 0, u = !isNaN(h) && h > 0 ? h : void 0;\n    return {\n      rows: i || l || 2,\n      cols: n || u || 2\n    };\n  }\n  /**\n   * Resize table to match config size or transmitted data size\n   *\n   * @return {{rows: number, cols: number}} - number of cols and rows\n   */\n  resize() {\n    const { rows: t, cols: e } = this.computeInitialSize();\n    for (let o = 0; o < t; o++)\n      this.addRow();\n    for (let o = 0; o < e; o++)\n      this.addColumn();\n  }\n  /**\n   * Fills the table with data passed to the constructor\n   *\n   * @returns {void}\n   */\n  fill() {\n    const t = this.data;\n    if (t && t.content)\n      for (let e = 0; e < t.content.length; e++)\n        for (let o = 0; o < t.content[e].length; o++)\n          this.setCellContent(e + 1, o + 1, t.content[e][o]);\n  }\n  /**\n   * Fills a row with cells\n   *\n   * @param {HTMLElement} row - row to fill\n   * @param {number} numberOfColumns - how many cells should be in a row\n   */\n  fillRow(t, e) {\n    for (let o = 1; o <= e; o++) {\n      const i = this.createCell();\n      t.appendChild(i);\n    }\n  }\n  /**\n   * Creating a cell element\n   *\n   * @return {Element}\n   */\n  createCell() {\n    return c(\"div\", s.cell, {\n      contentEditable: !this.readOnly\n    });\n  }\n  /**\n   * Get number of rows in the table\n   */\n  get numberOfRows() {\n    return this.table.childElementCount;\n  }\n  /**\n   * Get number of columns in the table\n   */\n  get numberOfColumns() {\n    return this.numberOfRows ? this.table.querySelectorAll(`.${s.row}:first-child .${s.cell}`).length : 0;\n  }\n  /**\n   * Is the column toolbox menu displayed or not\n   *\n   * @returns {boolean}\n   */\n  get isColumnMenuShowing() {\n    return this.selectedColumn !== 0;\n  }\n  /**\n   * Is the row toolbox menu displayed or not\n   *\n   * @returns {boolean}\n   */\n  get isRowMenuShowing() {\n    return this.selectedRow !== 0;\n  }\n  /**\n   * Recalculate position of toolbox icons\n   *\n   * @param {Event} event - mouse move event\n   */\n  onMouseMoveInTable(t) {\n    const { row: e, column: o } = this.getHoveredCell(t);\n    this.hoveredColumn = o, this.hoveredRow = e, this.updateToolboxesPosition();\n  }\n  /**\n   * Prevents default Enter behaviors\n   * Adds Shift+Enter processing\n   *\n   * @param {KeyboardEvent} event - keypress event\n   */\n  onKeyPressListener(t) {\n    if (t.key === \"Enter\") {\n      if (t.shiftKey)\n        return !0;\n      this.moveCursorToNextRow();\n    }\n    return t.key !== \"Enter\";\n  }\n  /**\n   * Prevents tab keydown event from bubbling\n   * so that it only works inside the table\n   *\n   * @param {KeyboardEvent} event - keydown event\n   */\n  onKeyDownListener(t) {\n    t.key === \"Tab\" && t.stopPropagation();\n  }\n  /**\n   * Set the coordinates of the cell that the focus has moved to\n   *\n   * @param {FocusEvent} event - focusin event\n   */\n  focusInTableListener(t) {\n    const e = t.target, o = this.getRowByCell(e);\n    this.focusedCell = {\n      row: Array.from(this.table.querySelectorAll(`.${s.row}`)).indexOf(o) + 1,\n      column: Array.from(o.querySelectorAll(`.${s.cell}`)).indexOf(e) + 1\n    };\n  }\n  /**\n   * Unselect row/column\n   * Close toolbox menu\n   * Hide toolboxes\n   *\n   * @returns {void}\n   */\n  hideToolboxes() {\n    this.hideRowToolbox(), this.hideColumnToolbox(), this.updateToolboxesPosition();\n  }\n  /**\n   * Unselect row, close toolbox\n   *\n   * @returns {void}\n   */\n  hideRowToolbox() {\n    this.unselectRow(), this.toolboxRow.hide();\n  }\n  /**\n   * Unselect column, close toolbox\n   *\n   * @returns {void}\n   */\n  hideColumnToolbox() {\n    this.unselectColumn(), this.toolboxColumn.hide();\n  }\n  /**\n   * Set the cursor focus to the focused cell\n   *\n   * @returns {void}\n   */\n  focusCell() {\n    this.focusedCellElem.focus();\n  }\n  /**\n   * Get current focused element\n   *\n   * @returns {HTMLElement} - focused cell\n   */\n  get focusedCellElem() {\n    const { row: t, column: e } = this.focusedCell;\n    return this.getCell(t, e);\n  }\n  /**\n   * Update toolboxes position\n   *\n   * @param {number} row - hovered row\n   * @param {number} column - hovered column\n   */\n  updateToolboxesPosition(t = this.hoveredRow, e = this.hoveredColumn) {\n    this.isColumnMenuShowing || e > 0 && e <= this.numberOfColumns && this.toolboxColumn.show(() => ({\n      left: `calc((100% - var(--cell-size)) / (${this.numberOfColumns} * 2) * (1 + (${e} - 1) * 2))`\n    })), this.isRowMenuShowing || t > 0 && t <= this.numberOfRows && this.toolboxRow.show(() => {\n      const o = this.getRow(t), { fromTopBorder: i } = g(this.table, o), { height: n } = o.getBoundingClientRect();\n      return {\n        top: `${Math.ceil(i + n / 2)}px`\n      };\n    });\n  }\n  /**\n   * Makes the first row headings\n   *\n   * @param {boolean} withHeadings - use headings row or not\n   */\n  setHeadingsSetting(t) {\n    this.tunes.withHeadings = t, t ? (this.table.classList.add(s.withHeadings), this.addHeadingAttrToFirstRow()) : (this.table.classList.remove(s.withHeadings), this.removeHeadingAttrFromFirstRow());\n  }\n  /**\n   * Adds an attribute for displaying the placeholder in the cell\n   */\n  addHeadingAttrToFirstRow() {\n    for (let t = 1; t <= this.numberOfColumns; t++) {\n      let e = this.getCell(1, t);\n      e && e.setAttribute(\"heading\", this.api.i18n.t(\"Heading\"));\n    }\n  }\n  /**\n   * Removes an attribute for displaying the placeholder in the cell\n   */\n  removeHeadingAttrFromFirstRow() {\n    for (let t = 1; t <= this.numberOfColumns; t++) {\n      let e = this.getCell(1, t);\n      e && e.removeAttribute(\"heading\");\n    }\n  }\n  /**\n   * Add effect of a selected row\n   *\n   * @param {number} index\n   */\n  selectRow(t) {\n    const e = this.getRow(t);\n    e && (this.selectedRow = t, e.classList.add(s.rowSelected));\n  }\n  /**\n   * Remove effect of a selected row\n   */\n  unselectRow() {\n    if (this.selectedRow <= 0)\n      return;\n    const t = this.table.querySelector(`.${s.rowSelected}`);\n    t && t.classList.remove(s.rowSelected), this.selectedRow = 0;\n  }\n  /**\n   * Add effect of a selected column\n   *\n   * @param {number} index\n   */\n  selectColumn(t) {\n    for (let e = 1; e <= this.numberOfRows; e++) {\n      const o = this.getCell(e, t);\n      o && o.classList.add(s.cellSelected);\n    }\n    this.selectedColumn = t;\n  }\n  /**\n   * Remove effect of a selected column\n   */\n  unselectColumn() {\n    if (this.selectedColumn <= 0)\n      return;\n    let t = this.table.querySelectorAll(`.${s.cellSelected}`);\n    Array.from(t).forEach((e) => {\n      e.classList.remove(s.cellSelected);\n    }), this.selectedColumn = 0;\n  }\n  /**\n   * Calculates the row and column that the cursor is currently hovering over\n   * The search was optimized from O(n) to O (log n) via bin search to reduce the number of calculations\n   *\n   * @param {Event} event - mousemove event\n   * @returns hovered cell coordinates as an integer row and column\n   */\n  getHoveredCell(t) {\n    let e = this.hoveredRow, o = this.hoveredColumn;\n    const { width: i, height: n, x: r, y: h } = k(this.table, t);\n    return r >= 0 && (o = this.binSearch(\n      this.numberOfColumns,\n      (l) => this.getCell(1, l),\n      ({ fromLeftBorder: l }) => r < l,\n      ({ fromRightBorder: l }) => r > i - l\n    )), h >= 0 && (e = this.binSearch(\n      this.numberOfRows,\n      (l) => this.getCell(l, 1),\n      ({ fromTopBorder: l }) => h < l,\n      ({ fromBottomBorder: l }) => h > n - l\n    )), {\n      row: e || this.hoveredRow,\n      column: o || this.hoveredColumn\n    };\n  }\n  /**\n   * Looks for the index of the cell the mouse is hovering over.\n   * Cells can be represented as ordered intervals with left and\n   * right (upper and lower for rows) borders inside the table, if the mouse enters it, then this is our index\n   *\n   * @param {number} numberOfCells - upper bound of binary search\n   * @param {function} getCell - function to take the currently viewed cell\n   * @param {function} beforeTheLeftBorder - determines the cursor position, to the left of the cell or not\n   * @param {function} afterTheRightBorder - determines the cursor position, to the right of the cell or not\n   * @returns {number}\n   */\n  binSearch(t, e, o, i) {\n    let n = 0, r = t + 1, h = 0, l;\n    for (; n < r - 1 && h < 10; ) {\n      l = Math.ceil((n + r) / 2);\n      const u = e(l), p = g(this.table, u);\n      if (o(p))\n        r = l;\n      else if (i(p))\n        n = l;\n      else\n        break;\n      h++;\n    }\n    return l;\n  }\n  /**\n   * Collects data from cells into a two-dimensional array\n   *\n   * @returns {string[][]}\n   */\n  getData() {\n    const t = [];\n    for (let e = 1; e <= this.numberOfRows; e++) {\n      const o = this.table.querySelector(`.${s.row}:nth-child(${e})`), i = Array.from(o.querySelectorAll(`.${s.cell}`));\n      i.every((r) => !r.textContent.trim()) || t.push(i.map((r) => r.innerHTML));\n    }\n    return t;\n  }\n  /**\n   * Remove listeners on the document\n   */\n  destroy() {\n    document.removeEventListener(\"click\", this.documentClicked);\n  }\n}\nclass F {\n  /**\n   * Notify core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Allow to press Enter inside the CodeTool textarea\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {TableConstructor} init\n   */\n  constructor({ data: t, config: e, api: o, readOnly: i, block: n }) {\n    this.api = o, this.readOnly = i, this.config = e, this.data = {\n      withHeadings: this.getConfig(\"withHeadings\", !1, t),\n      stretched: this.getConfig(\"stretched\", !1, t),\n      content: t && t.content ? t.content : []\n    }, this.table = null, this.block = n;\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: A,\n      title: \"Table\"\n    };\n  }\n  /**\n   * Return Tool's view\n   *\n   * @returns {HTMLDivElement}\n   */\n  render() {\n    return this.table = new E(this.readOnly, this.api, this.data, this.config), this.container = c(\"div\", this.api.styles.block), this.container.appendChild(this.table.getWrapper()), this.table.setHeadingsSetting(this.data.withHeadings), this.container;\n  }\n  /**\n   * Returns plugin settings\n   *\n   * @returns {Array}\n   */\n  renderSettings() {\n    return [\n      {\n        label: this.api.i18n.t(\"With headings\"),\n        icon: T,\n        isActive: this.data.withHeadings,\n        closeOnActivate: !0,\n        toggle: !0,\n        onActivate: () => {\n          this.data.withHeadings = !0, this.table.setHeadingsSetting(this.data.withHeadings);\n        }\n      },\n      {\n        label: this.api.i18n.t(\"Without headings\"),\n        icon: H,\n        isActive: !this.data.withHeadings,\n        closeOnActivate: !0,\n        toggle: !0,\n        onActivate: () => {\n          this.data.withHeadings = !1, this.table.setHeadingsSetting(this.data.withHeadings);\n        }\n      },\n      {\n        label: this.data.stretched ? this.api.i18n.t(\"Collapse\") : this.api.i18n.t(\"Stretch\"),\n        icon: this.data.stretched ? R : O,\n        closeOnActivate: !0,\n        toggle: !0,\n        onActivate: () => {\n          this.data.stretched = !this.data.stretched, this.block.stretched = this.data.stretched;\n        }\n      }\n    ];\n  }\n  /**\n   * Extract table data from the view\n   *\n   * @returns {TableData} - saved data\n   */\n  save() {\n    const t = this.table.getData();\n    return {\n      withHeadings: this.data.withHeadings,\n      stretched: this.data.stretched,\n      content: t\n    };\n  }\n  /**\n   * Plugin destroyer\n   *\n   * @returns {void}\n   */\n  destroy() {\n    this.table.destroy();\n  }\n  /**\n   * A helper to get config value.\n   *\n   * @param {string} configName - the key to get from the config.\n   * @param {any} defaultValue - default value if config doesn't have passed key\n   * @param {object} savedData - previously saved data. If passed, the key will be got from there, otherwise from the config\n   * @returns {any} - config value.\n   */\n  getConfig(t, e = void 0, o = void 0) {\n    const i = this.data || o;\n    return i ? i[t] ? i[t] : e : this.config && this.config[t] ? this.config[t] : e;\n  }\n  /**\n   * Table onPaste configuration\n   *\n   * @public\n   */\n  static get pasteConfig() {\n    return { tags: [\"TABLE\", \"TR\", \"TH\", \"TD\"] };\n  }\n  /**\n   * On paste callback that is fired from Editor\n   *\n   * @param {PasteEvent} event - event with pasted data\n   */\n  onPaste(t) {\n    const e = t.detail.data, o = e.querySelector(\":scope > thead, tr:first-of-type th\"), n = Array.from(e.querySelectorAll(\"tr\")).map((r) => Array.from(r.querySelectorAll(\"th, td\")).map((l) => l.innerHTML));\n    this.data = {\n      withHeadings: o !== null,\n      content: n\n    }, this.table.wrapper && this.table.wrapper.replaceWith(this.render());\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@editorjs/table/dist/table.mjs\n");

/***/ }),

/***/ "./node_modules/editorjs-text-color-plugin/dist/bundle.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/editorjs-text-color-plugin/dist/bundle.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ J)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".picker_wrapper.popup{z-index:99;width:170px;margin:0;box-shadow:0 0 10px 1px #eaeaea;background:#fff}.picker_arrow{display:none}.layout_default .picker_slider,.layout_default .picker_selector{padding:5px}.colorPlugin.ce-inline-tool{width:32px;border-radius:3px}.colorPlugin.ce-inline-tool--active svg{fill:#3c99ff}#color-left-btn{height:35px;width:18px;font-weight:600;display:flex;align-items:center}#color-left-btn:hover{border-radius:5px 0 0 5px;background:#cbcbcb7d}#color-text{padding:0 4px}#color-btn-text{height:15px}.ce-popover__container{overflow:visible}.ce-popover--inline .ce-popover__items{overflow:hidden}\")),document.head.appendChild(e)}}catch(o){console.error(\"vite-plugin-css-injected-by-js\",o)}})();\nfunction C(i) {\n  return i && i.__esModule && Object.prototype.hasOwnProperty.call(i, \"default\") ? i.default : i;\n}\nfunction p(i) {\n  if (i.__esModule) return i;\n  var t = i.default;\n  if (typeof t == \"function\") {\n    var e = function o() {\n      return this instanceof o ? Reflect.construct(t, arguments, this.constructor) : t.apply(this, arguments);\n    };\n    e.prototype = t.prototype;\n  } else e = {};\n  return Object.defineProperty(e, \"__esModule\", { value: !0 }), Object.keys(i).forEach(function(o) {\n    var s = Object.getOwnPropertyDescriptor(i, o);\n    Object.defineProperty(e, o, s.get ? s : {\n      enumerable: !0,\n      get: function() {\n        return i[o];\n      }\n    });\n  }), e;\n}\nclass k extends HTMLElement {\n  //https://mladenplavsic.github.io/css-ripple-effect\n  static get observedAttributes() {\n    return [\"disabled\", \"icon\", \"loading\", \"href\", \"htmltype\"];\n  }\n  constructor() {\n    super();\n    const t = this.attachShadow({ mode: \"open\" });\n    t.innerHTML = `\n        <style>\n        :host{ \n            position:relative; \n            display:inline-flex; \n            padding: .25em .625em;\n            box-sizing:border-box; \n            vertical-align: middle;\n            line-height: 1.8;\n            width: 5px;\n            overflow:hidden; \n            align-items:center;\n            justify-content: center;\n            font-size: 14px; \n            color: var(--fontColor,#333);  \n            border-radius: var(--borderRadius,.25em);\n            background: var(--fontColor,#333); \n            transition:background .3s,box-shadow .3s,border-color .3s,color .3s;\n        }\n        :host([shape=\"circle\"]){ \n            border-radius:50%; \n        }\n        /*\n        :host(:not([disabled]):active){\n            z-index:1;\n            transform:translateY(.1em);\n        }\n        */\n        :host([disabled]),:host([loading]){\n            pointer-events: none; \n            opacity:.6; \n        }\n        :host([block]){ \n            display:flex; \n        }\n        :host([disabled]:not([type])){ \n            background:rgba(0,0,0,.1); \n        }\n        :host([disabled]) .btn,:host([loading]) .btn{ \n            cursor: not-allowed; \n            pointer-events: all; \n        }\n        :host(:not([type=\"primary\"]):not([type=\"danger\"]):not([disabled]):hover),\n        :host(:not([type=\"primary\"]):not([type=\"danger\"]):focus-within),\n        :host([type=\"flat\"][focus]){ \n            color:var(--themeColor,#42b983); \n            border-color: var(--themeColor,#42b983); \n        }\n        :host(:not([type=\"primary\"]):not([type=\"danger\"])) .btn::after{ \n            background-image: radial-gradient(circle, var(--themeColor,#42b983) 10%, transparent 10.01%); \n        }\n        :host([type=\"primary\"]){ \n            color: #fff; \n            background:var(--themeBackground,var(--themeColor,#42b983));\n        }\n        :host([type=\"danger\"]){ \n            color: #fff; \n            background:var(--themeBackground,var(--dangerColor,#ff7875));\n        }\n        :host([type=\"dashed\"]){ \n            border-style:dashed \n        }\n        :host([type=\"flat\"]),:host([type=\"primary\"]),:host([type=\"danger\"]){ \n            border:0;\n            padding: calc( .25em + 1px ) calc( .625em + 1px );\n        }\n        :host([type=\"flat\"]) .btn::before{ \n            content:''; \n            position:absolute; \n            background:var(--themeColor,#42b983);\n            pointer-events:none; \n            left:0; \n            right:0; \n            top:0; \n            bottom:0; \n            opacity:0; \n            transition:.3s;\n        }\n        :host([type=\"flat\"]:not([disabled]):hover) .btn::before{ \n            opacity:.1 \n        }\n        :host(:not([disabled]):hover){ \n            z-index:1 \n        }\n        :host([type=\"flat\"]:focus-within) .btn:before,\n        :host([type=\"flat\"][focus]) .btn:before{ \n            opacity:.2; \n        }\n        :host(:focus-within){ \n            /*box-shadow: 0 0 10px rgba(0,0,0,0.1);*/ \n        }\n        .btn{ \n            background:none; \n            outline:0; \n            border:0; \n            position: \n            absolute; \n            left:0; \n            top:0;\n            width:100%;\n            height:100%;\n            padding:0;\n            user-select: none;\n            cursor: unset;\n        }\n        xy-loading{ \n            margin-right: 0.35em;  \n        }\n        ::-moz-focus-inner{\n            border:0;\n        }\n        .btn::before{\n            content: \"\";\n            display: block;\n            position: absolute;\n            width: 100%;\n            height: 100%;\n            left:0;\n            top:0;\n            transition:.2s;\n            background:#fff;\n            opacity:0;\n        }\n        :host(:not([disabled]):active) .btn::before{ \n            opacity:.2;\n        }\n        .btn::after {\n            content: \"\";\n            display: block;\n            position: absolute;\n            width: 100%;\n            height: 100%;\n            left: var(--x,0); \n            top: var(--y,0);\n            pointer-events: none;\n            background-image: radial-gradient(circle, #fff 10%, transparent 10.01%);\n            background-repeat: no-repeat;\n            background-position: 50%;\n            transform: translate(-50%,-50%) scale(10);\n            opacity: 0;\n            transition: transform .3s, opacity .8s;\n        }\n        .btn:not([disabled]):active::after {\n            transform: translate(-50%,-50%) scale(0);\n            opacity: .3;\n            transition: 0s;\n        }\n        xy-icon{\n            margin-right: 0.35em;\n            transition: none;\n        }\n        :host(:empty) xy-icon{\n            margin: auto;\n        }\n        :host(:empty){\n            padding: .65em;\n        }\n        :host([type=\"flat\"]:empty),:host([type=\"primary\"]:empty){ \n            padding: calc( .65em + 1px );\n        }\n        ::slotted(xy-icon){\n            transition: none;\n        }\n        :host([href]){\n            cursor:pointer;\n        }\n        </style>\n        <${this.href ? \"a\" : \"button\"} ${this.htmltype ? 'type=\"' + this.htmltype + '\"' : \"\"} ${this.download && this.href ? 'download=\"' + this.download + '\"' : \"\"} ${this.href ? 'href=\"' + this.href + '\" target=\"' + this.target + '\" rel=\"' + this.rel + '\"' : \"\"} class=\"btn\" id=\"btn\"></${this.href ? \"a\" : \"button\"}>${!this.loading && this.icon && this.icon != \"null\" ? '<xy-icon id=\"icon\" name=' + this.icon + \"></xy-icon>\" : \"\"}<slot></slot>\n        `;\n  }\n  focus() {\n    this.btn.focus();\n  }\n  get disabled() {\n    return this.getAttribute(\"disabled\") !== null;\n  }\n  get toggle() {\n    return this.getAttribute(\"toggle\") !== null;\n  }\n  get htmltype() {\n    return this.getAttribute(\"htmltype\");\n  }\n  get name() {\n    return this.getAttribute(\"name\");\n  }\n  get checked() {\n    return this.getAttribute(\"checked\") !== null;\n  }\n  get href() {\n    return this.getAttribute(\"href\");\n  }\n  get target() {\n    return this.getAttribute(\"target\") || \"_blank\";\n  }\n  get rel() {\n    return this.getAttribute(\"rel\");\n  }\n  get download() {\n    return this.getAttribute(\"download\");\n  }\n  get icon() {\n    return this.getAttribute(\"icon\");\n  }\n  get loading() {\n    return this.getAttribute(\"loading\") !== null;\n  }\n  set icon(t) {\n    this.setAttribute(\"icon\", t);\n  }\n  set htmltype(t) {\n    this.setAttribute(\"htmltype\", t);\n  }\n  set href(t) {\n    this.setAttribute(\"href\", t);\n  }\n  set disabled(t) {\n    t === null || t === !1 ? this.removeAttribute(\"disabled\") : this.setAttribute(\"disabled\", \"\");\n  }\n  set checked(t) {\n    t === null || t === !1 ? this.removeAttribute(\"checked\") : this.setAttribute(\"checked\", \"\");\n  }\n  set loading(t) {\n    t === null || t === !1 ? this.removeAttribute(\"loading\") : this.setAttribute(\"loading\", \"\");\n  }\n  connectedCallback() {\n    this.btn = this.shadowRoot.getElementById(\"btn\"), this.ico = this.shadowRoot.getElementById(\"icon\"), this.load = document.createElement(\"xy-loading\"), this.load.style.color = \"inherit\", this.btn.addEventListener(\"mousedown\", function(t) {\n      if (!this.disabled) {\n        const { left: e, top: o } = this.getBoundingClientRect();\n        this.style.setProperty(\"--x\", t.clientX - e + \"px\"), this.style.setProperty(\"--y\", t.clientY - o + \"px\");\n      }\n    }), this.addEventListener(\"click\", function(t) {\n      this.toggle && (this.checked = !this.checked);\n    }), this.btn.addEventListener(\"keydown\", (t) => {\n      switch (t.keyCode) {\n        case 13:\n          t.stopPropagation();\n          break;\n      }\n    }), this.disabled = this.disabled, this.loading = this.loading;\n  }\n  attributeChangedCallback(t, e, o) {\n    t == \"disabled\" && this.btn && (o !== null ? (this.btn.setAttribute(\"disabled\", \"disabled\"), this.href && this.btn.removeAttribute(\"href\")) : (this.btn.removeAttribute(\"disabled\"), this.href && (this.btn.href = this.href))), t == \"loading\" && this.btn && (o !== null ? (this.shadowRoot.prepend(this.load), this.btn.setAttribute(\"disabled\", \"disabled\")) : (this.shadowRoot.removeChild(this.load), this.btn.removeAttribute(\"disabled\"))), t == \"icon\" && this.ico && (this.ico.name = o), t == \"href\" && this.btn && (this.disabled || (this.btn.href = o)), t == \"htmltype\" && this.btn && (this.btn.type = o);\n  }\n}\ncustomElements.get(\"xy-button\") || customElements.define(\"xy-button\", k);\nclass w extends HTMLElement {\n  static get observedAttributes() {\n    return [\"disabled\"];\n  }\n  constructor() {\n    super();\n    const t = this.attachShadow({ mode: \"open\" });\n    t.innerHTML = `\n        <style>\n        :host {\n            display:inline-flex;\n        }\n        ::slotted(xy-button:not(:first-of-type):not(:last-of-type)){\n            border-radius:0;\n        }\n        ::slotted(xy-button){\n            margin:0!important;\n        }\n        ::slotted(xy-button:not(:first-of-type)){\n            margin-left:-1px!important;\n        }\n        ::slotted(xy-button[type]:not([type=\"dashed\"]):not(:first-of-type)){\n            margin-left:1px!important;\n        }\n        ::slotted(xy-button:first-of-type){\n            border-top-right-radius: 0;\n            border-bottom-right-radius: 0px;\n        }\n        ::slotted(xy-button:last-of-type){\n            border-top-left-radius: 0;\n            border-bottom-left-radius: 0;\n        }\n        </style>\n        <slot></slot>\n        `;\n  }\n  get disabled() {\n    return this.getAttribute(\"disabled\") !== null;\n  }\n  set disabled(t) {\n    t === null || t === !1 ? this.removeAttribute(\"disabled\") : this.setAttribute(\"disabled\", \"\");\n  }\n  connectedCallback() {\n  }\n  attributeChangedCallback(t, e, o) {\n  }\n}\ncustomElements.get(\"xy-button-group\") || customElements.define(\"xy-button-group\", w);\nclass d extends HTMLElement {\n  static get observedAttributes() {\n    return [\"open\", \"title\", \"oktext\", \"canceltext\", \"loading\", \"type\"];\n  }\n  constructor(t) {\n    super();\n    const e = this.attachShadow({ mode: \"open\" });\n    e.innerHTML = `\n        <style>\n        :host{\n            position:absolute;\n            display:flex;\n            box-shadow: 2px 2px 15px rgba(0,0,0,0.15);\n            box-sizing: border-box;\n            transform:scale(0);\n            opacity:0.5;\n            border-radius: 3px;\n            z-index:10;\n            transition:.3s cubic-bezier(.645, .045, .355, 1);\n            transform-origin:inherit;\n            background:#fff;\n            visibility:hidden;\n        }\n        .popcon-content{\n            box-sizing: border-box;\n            display:flex;\n            width: max-content;\n            padding: 0 15px;\n            flex:1;\n            flex-direction:column;\n        }\n        .popcon-title {\n            line-height: 30px;\n            padding: 15px 30px 0 0;\n            font-weight: 700;\n            font-size: 14px;\n            color: #4c5161;\n            user-select: none;\n            cursor: default;\n        }\n        .popcon-body {\n            flex: 1;\n            padding: 5px 0 15px 0;\n        }\n        .popcon-footer {\n            padding: 3px 0 15px 0;\n            margin-top: -3px;\n            text-align: right;\n            white-space: nowrap;\n        }\n        .btn-close{\n            position:absolute;\n            right:10px;\n            top:10px;\n            border:0;\n        }\n        .popcon-footer xy-button {\n            font-size: .8em;\n            margin-left: .8em;\n        }\n        .popcon-type{\n            display:flex;\n            width:30px;\n            height:30px;\n            font-size:22px;\n            margin: 15px -10px 0 15px;\n        }\n        /*\n        :host(:not([type=\"confirm\"])) .popcon-type,\n        :host(:not([type=\"confirm\"])) .popcon-footer,\n        :host(:not([type])) .popcon-title,\n        :host(:not([type])) .btn-close{\n            display:none;\n        }\n        */\n        :host([type=\"confirm\"]){\n            min-width:250px;\n        }\n        :host([type=\"confirm\"]) .popcon-body{\n            font-size:14px;\n        }\n        :host(:not([type])) .popcon-content,:host(:not([type])) .popcon-body{\n            padding: 0;\n        }\n        </style>\n            ${(t || this.type) === \"confirm\" ? '<xy-icon id=\"popcon-type\" class=\"popcon-type\" name=\"question-circle\" color=\"var(--waringColor,#faad14)\"></xy-icon>' : \"\"}\n            <div class=\"popcon-content\">\n                ${(t || this.type) !== null ? '<div class=\"popcon-title\" id=\"title\">' + this.title + '</div><xy-button class=\"btn-close\" id=\"btn-close\" icon=\"close\"></xy-button>' : \"\"}\n                <div class=\"popcon-body\">\n                    <slot></slot>\n                </div>\n                ${(t || this.type) === \"confirm\" ? '<div class=\"popcon-footer\"><xy-button id=\"btn-cancel\">' + this.canceltext + '</xy-button><xy-button id=\"btn-submit\" type=\"primary\">' + this.oktext + \"</xy-button></div>\" : \"\"}\n            </div>\n        `;\n  }\n  get open() {\n    return this.getAttribute(\"open\") !== null;\n  }\n  get stopfocus() {\n    return this.getAttribute(\"stopfocus\") !== null;\n  }\n  get title() {\n    return this.getAttribute(\"title\") || \"popcon\";\n  }\n  get type() {\n    return this.getAttribute(\"type\");\n  }\n  get oktext() {\n    return this.getAttribute(\"oktext\") || \"confirm\";\n  }\n  get canceltext() {\n    return this.getAttribute(\"canceltext\") || \"cancel\";\n  }\n  get loading() {\n    return this.getAttribute(\"loading\") !== null;\n  }\n  set title(t) {\n    this.setAttribute(\"title\", t);\n  }\n  set type(t) {\n    t === null || t === !1 ? this.removeAttribute(\"type\") : this.setAttribute(\"type\", t);\n  }\n  set oktext(t) {\n    this.setAttribute(\"oktext\", t);\n  }\n  set canceltext(t) {\n    this.setAttribute(\"canceltext\", t);\n  }\n  set open(t) {\n    t === null || t === !1 ? (this.removeAttribute(\"open\"), this.parentNode.removeAttribute(\"open\")) : (this.setAttribute(\"open\", \"\"), this.parentNode.setAttribute(\"open\", \"\"), this.loading && (this.loading = !1));\n  }\n  set loading(t) {\n    t === null || t === !1 ? this.removeAttribute(\"loading\") : this.setAttribute(\"loading\", \"\");\n  }\n  connectedCallback() {\n    this.remove = !1, this.type && (this.titles = this.shadowRoot.getElementById(\"title\"), this.btnClose = this.shadowRoot.getElementById(\"btn-close\")), this.type == \"confirm\" && (this.btnCancel = this.shadowRoot.getElementById(\"btn-cancel\"), this.btnSubmit = this.shadowRoot.getElementById(\"btn-submit\")), this.addEventListener(\"transitionend\", (t) => {\n      t.propertyName === \"transform\" && this.open && (this.type == \"confirm\" && this.btnSubmit.focus(), this.type == \"pane\" && this.btnClose.focus(), this.dispatchEvent(new CustomEvent(\"open\")));\n    }), this.addEventListener(\"transitionend\", (t) => {\n      t.propertyName === \"transform\" && !this.open && (this.remove && this.parentNode.removeChild(this), this.dispatchEvent(new CustomEvent(\"close\")));\n    }), this.addEventListener(\"click\", (t) => {\n      t.target.closest(\"[autoclose]\") && (this.open = !1, window.xyActiveElement.focus());\n    }), this.type && this.btnClose.addEventListener(\"click\", () => {\n      this.open = !1, window.xyActiveElement.focus();\n    }), this.type == \"confirm\" && (this.btnCancel.addEventListener(\"click\", async () => {\n      this.dispatchEvent(new CustomEvent(\"cancel\")), this.open = !1, window.xyActiveElement.focus();\n    }), this.btnSubmit.addEventListener(\"click\", () => {\n      this.dispatchEvent(new CustomEvent(\"submit\")), this.loading || (this.open = !1, window.xyActiveElement.focus());\n    }));\n  }\n  attributeChangedCallback(t, e, o) {\n    t == \"open\" && this.shadowRoot && o == null && this.stopfocus, t == \"loading\" && this.shadowRoot && (o !== null ? this.btnSubmit.loading = !0 : this.btnSubmit.loading = !1), t == \"title\" && this.titles && o !== null && (this.titles.innerHTML = o), t == \"oktext\" && this.btnSubmit && o !== null && (this.btnSubmit.innerHTML = o), t == \"canceltext\" && this.btnCancel && o !== null && (this.btnCancel.innerHTML = o);\n  }\n}\ncustomElements.get(\"xy-popcon\") || customElements.define(\"xy-popcon\", d);\nclass A extends HTMLElement {\n  static get observedAttributes() {\n    return [\"title\", \"oktext\", \"canceltext\", \"loading\", \"type\"];\n  }\n  constructor() {\n    super();\n    const t = this.attachShadow({ mode: \"open\" });\n    t.innerHTML = `\n        <style>\n        :host {\n            display:inline-block;\n            position:relative;\n            overflow:visible;\n        }\n        :host([dir=\"top\"]) ::slotted(xy-popcon){\n            bottom:100%;\n            left:50%;\n            transform:translate(-50%,-10px) scale(0);\n            transform-origin: center bottom;\n        }\n        :host([dir=\"top\"]) ::slotted(xy-popcon[open]),\n        :host([dir=\"top\"][trigger=\"hover\"]:not([disabled]):hover) ::slotted(xy-popcon),\n        :host([dir=\"top\"][trigger=\"focus\"]:not([disabled]):focus-within) ::slotted(xy-popcon){\n            transform:translate(-50%,-10px) scale(1);\n        }\n        :host([dir=\"right\"]) ::slotted(xy-popcon){\n            left:100%;\n            top:50%;\n            transform:translate(10px,-50%) scale(0);\n            transform-origin: left;\n        }\n        :host([dir=\"right\"]) ::slotted(xy-popcon[open]),\n        :host([dir=\"right\"][trigger=\"hover\"]:not([disabled]):hover) ::slotted(xy-popcon),\n        :host([dir=\"right\"][trigger=\"focus\"]:not([disabled]):focus-within) ::slotted(xy-popcon){\n            transform:translate(10px,-50%) scale(1);\n        }\n        :host([dir=\"bottom\"]) ::slotted(xy-popcon){\n            top:100%;\n            left:50%;\n            transform:translate(-50%,10px) scale(0);\n            transform-origin: center top;\n        }\n        :host([dir=\"bottom\"]) ::slotted(xy-popcon[open]),\n        :host([dir=\"bottom\"][trigger=\"hover\"]:not([disabled]):hover) ::slotted(xy-popcon),\n        :host([dir=\"bottom\"][trigger=\"focus\"]:not([disabled]):focus-within) ::slotted(xy-popcon){\n            transform:translate(-50%,10px) scale(1);\n        }\n        :host([dir=\"left\"]) ::slotted(xy-popcon){\n            right:100%;\n            top:50%;\n            transform:translate(-10px,-50%) scale(0);\n            transform-origin: right;\n        }\n        :host([dir=\"left\"]) ::slotted(xy-popcon[open]),\n        :host([dir=\"left\"][trigger=\"hover\"]:not([disabled]):hover) ::slotted(xy-popcon),\n        :host([dir=\"left\"][trigger=\"focus\"]:not([disabled]):focus-within) ::slotted(xy-popcon){\n            transform:translate(-10px,-50%) scale(1);\n        }\n        :host([dir=\"lefttop\"]) ::slotted(xy-popcon){\n            right:100%;\n            top:0;\n            transform:translate(-10px) scale(0);\n            transform-origin: right top;\n        }\n        :host([dir=\"lefttop\"]) ::slotted(xy-popcon[open]),\n        :host([dir=\"lefttop\"][trigger=\"hover\"]:not([disabled]):hover) ::slotted(xy-popcon),\n        :host([dir=\"lefttop\"][trigger=\"focus\"]:not([disabled]):focus-within) ::slotted(xy-popcon){\n            transform:translate(-10px) scale(1);\n        }\n        :host([dir=\"leftbottom\"]) ::slotted(xy-popcon){\n            right:100%;\n            bottom:0;\n            transform:translate(-10px) scale(0);\n            transform-origin: right bottom;\n        }\n        :host([dir=\"leftbottom\"]) ::slotted(xy-popcon[open]),\n        :host([dir=\"leftbottom\"][trigger=\"hover\"]:not([disabled]):hover) ::slotted(xy-popcon),\n        :host([dir=\"leftbottom\"][trigger=\"focus\"]:not([disabled]):focus-within) ::slotted(xy-popcon){\n            transform:translate(-10px) scale(1);\n        }\n        :host([dir=\"topleft\"]) ::slotted(xy-popcon){\n            bottom:100%;\n            left:0;\n            transform:translate(0,-10px) scale(0);\n            transform-origin: left bottom;\n        }\n        :host([dir=\"topleft\"]) ::slotted(xy-popcon[open]),\n        :host([dir=\"topleft\"][trigger=\"hover\"]:not([disabled]):hover) ::slotted(xy-popcon),\n        :host([dir=\"topleft\"][trigger=\"focus\"]:not([disabled]):focus-within) ::slotted(xy-popcon){\n            transform:translate(0,-10px) scale(1);\n        }\n        :host([dir=\"topright\"]) ::slotted(xy-popcon){\n            bottom:100%;\n            right:0;\n            transform:translate(0,-10px) scale(0);\n            transform-origin: right bottom;\n        }\n        :host([dir=\"topright\"]) ::slotted(xy-popcon[open]),\n        :host([dir=\"topright\"][trigger=\"hover\"]:not([disabled]):hover) ::slotted(xy-popcon),\n        :host([dir=\"topright\"][trigger=\"focus\"]:not([disabled]):focus-within) ::slotted(xy-popcon){\n            transform:translate(0,-10px) scale(1);\n        }\n        :host([dir=\"righttop\"]) ::slotted(xy-popcon){\n            left:100%;\n            top:0;\n            transform:translate(10px) scale(0);\n            transform-origin: left top;\n        }\n        :host([dir=\"righttop\"]) ::slotted(xy-popcon[open]),\n        :host([dir=\"righttop\"][trigger=\"hover\"]:not([disabled]):hover) ::slotted(xy-popcon),\n        :host([dir=\"righttop\"][trigger=\"focus\"]:not([disabled]):focus-within) ::slotted(xy-popcon){\n            transform:translate(10px) scale(1);\n        }\n        :host([dir=\"rightbottom\"]) ::slotted(xy-popcon){\n            left:100%;\n            bottom:0;\n            transform:translate(10px) scale(0);\n            transform-origin: left bottom;\n        }\n        :host([dir=\"rightbottom\"]) ::slotted(xy-popcon[open]),\n        :host([dir=\"rightbottom\"][trigger=\"hover\"]:not([disabled]):hover) ::slotted(xy-popcon),\n        :host([dir=\"rightbottom\"][trigger=\"focus\"]:not([disabled]):focus-within) ::slotted(xy-popcon){\n            transform:translate(10px) scale(1);\n        }\n        :host([dir=\"bottomleft\"]) ::slotted(xy-popcon),\n        :host(:not([dir])) ::slotted(xy-popcon){\n            left:0;\n            top:100%;\n            transform:translate(0,10px) scale(0);\n            transform-origin: left top;\n        }\n        :host(:not([dir])) ::slotted(xy-popcon[open]),\n        :host(:not([dir])[trigger=\"hover\"]:not([disabled]):hover) ::slotted(xy-popcon),\n        :host(:not([dir])[trigger=\"focus\"]:not([disabled]):focus-within) ::slotted(xy-popcon),\n        :host([dir=\"bottomleft\"]) ::slotted(xy-popcon[open]),\n        :host([dir=\"bottomleft\"][trigger=\"hover\"]:not([disabled]):hover) ::slotted(xy-popcon),\n        :host([dir=\"bottomleft\"][trigger=\"focus\"]:not([disabled]):focus-within) ::slotted(xy-popcon){\n            transform:translate(0,10px) scale(1);\n        }\n        :host([dir=\"bottomright\"]) ::slotted(xy-popcon){\n            right:0;\n            top:100%;\n            transform:translate(0,10px) scale(0);\n            transform-origin: right top;\n        }\n        :host([dir=\"bottomright\"]) ::slotted(xy-popcon[open]),\n        :host([dir=\"bottomright\"][trigger=\"hover\"]:not([disabled]):hover) ::slotted(xy-popcon),\n        :host([dir=\"bottomright\"][trigger=\"focus\"]:not([disabled]):focus-within) ::slotted(xy-popcon){\n            transform:translate(0,10px) scale(1);\n        }\n        :host([trigger=\"contextmenu\"]) ::slotted(xy-popcon){\n            right:auto;\n            bottom:auto;\n            left:var(--x,0);\n            top:var(--y,100%);\n            transform-origin: left top;\n            transform:translate(5px,5px) scale(0);\n            transition: .15s;\n        }\n        :host([trigger=\"contextmenu\"]) ::slotted(xy-popcon[open]){\n            transform:translate(5px,5px) scale(1);\n        }\n        :host ::slotted(xy-popcon[open]),\n        :host([trigger=\"hover\"]:not([disabled]):hover) ::slotted(xy-popcon),\n        :host([trigger=\"focus\"]:not([disabled]):focus-within) ::slotted(xy-popcon){\n            opacity:1;\n            visibility:visible;\n        }\n        slot{\n            border-radius: inherit;\n        }\n        </style>\n        <slot></slot>\n        `;\n  }\n  get title() {\n    return this.getAttribute(\"title\") || \"popcon\";\n  }\n  get trigger() {\n    return this.getAttribute(\"trigger\");\n  }\n  get disabled() {\n    return this.getAttribute(\"disabled\") !== null;\n  }\n  get type() {\n    return this.getAttribute(\"type\");\n  }\n  get accomplish() {\n    return this.getAttribute(\"accomplish\") !== null;\n  }\n  get content() {\n    return this.getAttribute(\"content\");\n  }\n  get oktext() {\n    return this.getAttribute(\"oktext\");\n  }\n  get canceltext() {\n    return this.getAttribute(\"canceltext\");\n  }\n  get dir() {\n    return this.getAttribute(\"dir\");\n  }\n  get loading() {\n    return this.getAttribute(\"loading\") !== null;\n  }\n  set dir(t) {\n    this.setAttribute(\"dir\", t);\n  }\n  set title(t) {\n    this.setAttribute(\"title\", t);\n  }\n  set type(t) {\n    this.setAttribute(\"type\", t);\n  }\n  set oktext(t) {\n    this.setAttribute(\"oktext\", t);\n  }\n  set canceltext(t) {\n    this.setAttribute(\"canceltext\", t);\n  }\n  set loading(t) {\n    t === null || t === !1 ? this.removeAttribute(\"loading\") : this.setAttribute(\"loading\", \"\");\n  }\n  set disabled(t) {\n    t === null || t === !1 ? this.removeAttribute(\"disabled\") : this.setAttribute(\"disabled\", \"\");\n  }\n  show(t) {\n    if (t.stopPropagation(), this.popcon = this.querySelector(\"xy-popcon\"), this.disabled)\n      (this.popcon || this).dispatchEvent(new CustomEvent(\"submit\"));\n    else if (this.popcon || (this.popcon = new d(this.type), this.popcon.type = this.type, this.appendChild(this.popcon), this.popcon.title = this.title || \"popover\", this.popcon.innerHTML = this.content || \"\", this.type == \"confirm\" && (this.popcon.oktext = this.oktext || \"confirm\", this.popcon.canceltext = this.canceltext || \"cancel\", this.popcon.onsubmit = () => this.dispatchEvent(new CustomEvent(\"submit\")), this.popcon.oncancel = () => this.dispatchEvent(new CustomEvent(\"cancel\")))), this.trigger === \"contextmenu\") {\n      const { x: e, y: o } = this.getBoundingClientRect();\n      this.popcon.style.setProperty(\"--x\", t.clientX - e + \"px\"), this.popcon.style.setProperty(\"--y\", t.clientY - o + \"px\"), this.popcon.open = !0;\n    } else\n      (t.path || t.composedPath && t.composedPath()).includes(this.popcon), window.xyActiveElement = document.activeElement, this.accomplish ? this.popcon.open = !0 : this.popcon.open = !this.popcon.open;\n    return this.popcon;\n  }\n  connectedCallback() {\n    this.popcon = this.querySelector(\"xy-popcon\"), this.trigger && this.trigger !== \"click\" || this.addEventListener(\"click\", this.show), this.trigger === \"contextmenu\" && this.addEventListener(\"contextmenu\", (t) => {\n      t.preventDefault(), (t.path || t.composedPath && t.composedPath()).includes(this.popcon) || this.show(t);\n    }), document.addEventListener(\"mousedown\", (t) => {\n      const e = t.path || t.composedPath && t.composedPath();\n      (this.popcon && !e.includes(this.popcon) && !this.popcon.loading && !e.includes(this.children[0]) || this.trigger === \"contextmenu\" && !e.includes(this.popcon) && t.which == \"1\") && (this.popcon.open = !1);\n    });\n  }\n  attributeChangedCallback(t, e, o) {\n    t == \"loading\" && this.popcon && (o !== null ? this.popcon.loading = !0 : this.popcon.loading = !1), t == \"title\" && this.popcon && o !== null && (this.popcon.title = o), t == \"oktext\" && this.popcon && o !== null && (this.popcon.oktext = o), t == \"canceltext\" && this.popcon && o !== null && (this.popcon.canceltext = o);\n  }\n}\ncustomElements.get(\"xy-popover\") || customElements.define(\"xy-popover\", A);\nconst c = \"editor-js-text-color-cache\";\nfunction l(i) {\n  if (P(i)) {\n    const t = E(i);\n    return T(t);\n  }\n  return i;\n}\nfunction E(i) {\n  const t = /\\((.*?)\\)/.exec(i);\n  if (t) return t[1];\n}\nfunction T(i) {\n  return window.getComputedStyle(document.documentElement).getPropertyValue(i);\n}\nfunction P(i) {\n  return L(i) && i.includes(\"--\");\n}\nfunction L(i) {\n  return typeof i == \"string\" || i instanceof String;\n}\nfunction h(i, t) {\n  let e;\n  return (...o) => {\n    e || (e = setTimeout(() => {\n      i(...o), e = null;\n    }, t));\n  };\n}\nfunction u(i, t) {\n  return sessionStorage.setItem(`${c}-${t}`, JSON.stringify(i)), i;\n}\nfunction g(i, t) {\n  const e = sessionStorage.getItem(`${c}-${t}`);\n  return e ? JSON.parse(e) : i;\n}\nfunction b(i, t) {\n  sessionStorage.setItem(`${c}-${t}-custom`, JSON.stringify(i));\n}\nfunction f(i) {\n  const t = sessionStorage.getItem(`${c}-${i}-custom`);\n  return t ? JSON.parse(t) : null;\n}\nconst m = \"ce-inline-toolbar__dropdown\", y = \"ce-conversion-toolbar--showed\", S = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  CONVERTER_BTN: m,\n  CONVERTER_PANEL: y,\n  getCustomColorCache: f,\n  getDefaultColorCache: g,\n  handleCSSVariables: l,\n  setCustomColorCache: b,\n  setDefaultColorCache: u,\n  throttle: h\n}, Symbol.toStringTag, { value: \"Module\" })), B = [\"#ff1300\", \"#EC7878\", \"#9C27B0\", \"#673AB7\", \"#3F51B5\", \"#0070FF\", \"#03A9F4\", \"#00BCD4\", \"#4CAF50\", \"#8BC34A\", \"#CDDC39\", \"#FFE500\", \"#FFBF00\", \"#FF9800\", \"#795548\", \"#9E9E9E\", \"#5A5A5A\", \"#FFF\"];\nclass x extends HTMLElement {\n  static get observedAttributes() {\n    return [\"disabled\", \"dir\"];\n  }\n  constructor(t = {}) {\n    super();\n    const e = this.attachShadow({ mode: \"open\" });\n    this.colorCollections = t.colorCollections || B, this.onColorPicked = t.onColorPicked, this.defaulColor = l(t.defaultColor || this.colorCollections[0]), this.pluginType = t.type, this.hasCustomPicker = t.hasCustomPicker, this.customColor = f(this.pluginType), e.innerHTML = `\n        <style>\n        :host{\n            display:inline-block;\n            width:15px;\n            font-size:14px;\n            border: none;\n        }\n        :host([block]){\n            display:block;\n        }\n        :host([disabled]){\n            pointer-events:none;\n        }\n        \n        :host(:focus-within) xy-popover,:host(:hover) xy-popover{ \n            z-index: 2;\n        }\n        input[type=\"color\"]{\n            -webkit-appearance: none;\n            outline: none;\n            border: none;\n        }\n        xy-popover{\n            width: 12px;\n            height:35px;\n            padding-right: 1px;\n        }\n        xy-popover:hover {\n            border-radius: 0 5px 5px 0;\n            background: rgba(203, 203, 203, 0.49);\n        }\n        .color-btn {\n            border: 1px solid #cab9b9;\n            margin: 18px 3px 2px 3px;\n            width: 7px;\n            height: 7px;\n            opacity: 0.9;\n            padding: 1px 0 1px 0;\n            color: var(--themeColor, #42b983);\n            background: var(--themeColor, #42b983);\n            font-weight: bolder;\n            border-radius: 2px;\n        }\n        .color-btn:hover {\n            opacity: 1;\n            z-index: auto;\n        }\n        xy-popover{\n            display:block;\n            position: static;\n        }\n        xy-popcon{\n            min-width:100%;\n        }\n        #custom-picker {\n            position: relative;\n            top: -1px;\n            background-color: rgb(250, 250, 250);\n            border-color: rgb(255 118 21) rgb(245 80 80 / 74%) #89c1c9 #95d5b6;\n            border-width: 3px;\n            border-radius: 8px;\n            height: 18px;\n        }\n        .pop-footer{\n            display:flex;\n            justify-content:flex-end;\n            padding:0 .8em .8em;\n        }\n        .pop-footer xy-button{\n            font-size: .8em;\n            margin-left: .8em;\n        }\n        .color-btn::before{\n            content:'';\n            position:absolute;\n            left:5px;\n            top:5px;\n            right:5px;\n            bottom:5px;\n            z-index:-1;\n            background: linear-gradient(45deg, #ddd 25%,transparent 0,transparent 75%,#ddd 0 ), linear-gradient(45deg, #ddd 25%, transparent 0, transparent 75%, #ddd 0);\n            background-position: 0 0,5px 5px;\n            background-size: 10px 10px;\n        }\n        .color-sign {\n           max-width: 220px;\n           padding: 10px;\n           display:grid;\n           cursor: default;\n           grid-template-columns: repeat(auto-fit, minmax(15px, 1fr));\n           grid-gap: 10px;     \n        }\n        .color-sign>button {\n            position: relative;\n            width: 16px;\n            height: 16px;\n            border-radius: 6px;\n            border: 1px solid #b8b9b49e;\n            outline: 0;\n            opacity: 0.9;\n        }\n        .color-sign>button:hover {\n            cursor: pointer;\n            opacity: 1;\n        }\n        .color-section {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        .color-fire-btn {\n            font-size: 17px;\n            font-weight: bold;\n            height: 28px;\n            padding-top: 8px;\n            padding-right: 1px;\n            margin-left: 3px;\n            padding-left: 3px;\n            border-radius: 5px 0 0 5px;\n        }\n        .color-fire-btn:hover {\n            font-size: 17px;\n            font-weight: bold;\n            background: rgba(203, 203, 203, 0.49);\n            border-radius: 5px 0 0 5px;\n        }\n        </style>\n        <section class=\"color-section\">\n            <xy-popover id=\"popover\" ${this.dir ? \"dir='\" + this.dir + \"'\" : \"\"}>\n                <xy-button class=\"color-btn\" id=\"color-btn\" ${this.disabled ? \"disabled\" : \"\"}>_</xy-button>\n                <xy-popcon id=\"popcon\">\n                    <div class=\"color-sign\" id=\"colors\">\n                        ${this.hasCustomPicker && '<button id=\"custom-picker\" class=\"rainbow-mask\"/>' || \"\"}\n                        ${this.colorCollections.map((o) => '<button class=\"color-cube\" style=\"background-color:' + o + '\" data-color=\"' + o + '\"></button>').join(\"\")}\n                    </div>\n                </xy-popcon>\n            </xy-popover>\n        </section>`;\n  }\n  focus() {\n    this.colorBtn.focus();\n  }\n  connectedCallback() {\n    this.$popover = this.shadowRoot.getElementById(\"popover\"), this.popcon = this.shadowRoot.getElementById(\"popcon\"), this.colorBtn = this.shadowRoot.getElementById(\"color-btn\"), this.colors = this.shadowRoot.getElementById(\"colors\"), this.colors.addEventListener(\"click\", (t) => {\n      const e = t.target.closest(\"button\");\n      e && e.id !== \"custom-picker\" && (this.nativeclick = !0, this.value = l(e.dataset.color), this.onColorPicked(this.value));\n    }), this.$popover.addEventListener(\"click\", () => this.closeConverter()), this.hasCustomPicker && this.setupCustomPicker(), this.value = this.defaultvalue;\n  }\n  closeConverter() {\n    if (document.getElementsByClassName(y)[0]) {\n      const e = document.getElementsByClassName(m)[0];\n      e == null || e.click();\n    }\n  }\n  disconnectedCallback() {\n    this.pickerInput && document.body.removeChild(this.pickerInput);\n  }\n  setupCustomPicker() {\n    let t = !1;\n    this.customPicker = this.shadowRoot.getElementById(\"custom-picker\");\n    const e = this.customPicker;\n    e.style.backgroundColor = this.customColor, this.customPicker.addEventListener(\"click\", (o) => {\n      if (t) {\n        t = !1;\n        return;\n      }\n      this.pickerInput && document.body.removeChild(this.pickerInput), this.pickerInput = document.createElement(\"input\");\n      const s = this.pickerInput, r = this.popcon.getBoundingClientRect();\n      s.setAttribute(\"type\", \"color\"), s.value = this.customColor, s.style.position = \"fixed\", s.style.left = `${r.x + 3}px`, s.style.top = `${r.y + 10}px`, s.style.pointerEvents = \"none\", s.style.zIndex = \"999\", s.style.opacity = \"0\", s.addEventListener(\"input\", h((a) => {\n        this.nativeclick = !0, this.value = l(a.target.value), this.onColorPicked(this.value), b(this.value, this.pluginType), e.style.backgroundColor = this.value, t = !0, e.click();\n      }, 30)), document.body.appendChild(s), setTimeout(() => {\n        s.focus(), s.click();\n      }, 0);\n    });\n  }\n  get defaultvalue() {\n    return this.defaulColor;\n  }\n  get value() {\n    return this.$value;\n  }\n  get type() {\n    return this.getAttribute(\"type\");\n  }\n  get disabled() {\n    return this.getAttribute(\"disabled\") !== null;\n  }\n  get dir() {\n    return this.getAttribute(\"dir\");\n  }\n  set dir(t) {\n    this.setAttribute(\"dir\", t);\n  }\n  set disabled(t) {\n    t === null || t === !1 ? this.removeAttribute(\"disabled\") : this.setAttribute(\"disabled\", \"\");\n  }\n  set defaultvalue(t) {\n    this.setAttribute(\"defaultvalue\", t);\n  }\n  set value(t) {\n    t && (this.$value = t, this.colorBtn.style.setProperty(\n      \"--themeColor\",\n      this.nativeclick ? u(t, this.pluginType) : g(t, this.pluginType)\n    ), this.nativeclick ? (this.nativeclick = !1, this.dispatchEvent(new CustomEvent(\"change\", {\n      detail: {\n        value: this.value\n      }\n    }))) : this.colorPane ? this.colorPane.value = this.value : this.defaultvalue = this.value);\n  }\n  attributeChangedCallback(t, e, o) {\n    t == \"disabled\" && this.colorBtn && (o != null ? this.colorBtn.setAttribute(\"disabled\", \"disabled\") : this.colorBtn.removeAttribute(\"disabled\")), t == \"dir\" && this.$popover && o != null && (this.$popover.dir = o);\n  }\n}\ncustomElements.get(\"xy-color-picker\") || customElements.define(\"xy-color-picker\", x);\nconst R = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  ColorPlugin: x\n}, Symbol.toStringTag, { value: \"Module\" })), $ = /* @__PURE__ */ p(R), N = `<svg fill=\"#000000\" height=\"34px\" width=\"34px\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" \n\t viewBox=\"0 0 491.644 491.644\" xml:space=\"preserve\">\n<g>\n\t<path d=\"M456.623,2.282c-42.758-20.283-141.107,96.84-223.473,264.224c-2.35,4.776-2.686,10.294-0.936,15.32\n\t\tc1.75,5.026,5.442,9.145,10.251,11.426L366.758,352.2c4.809,2.281,10.332,2.538,15.333,0.714c5.001-1.825,9.059-5.579,11.272-10.42\n\t\tC470.883,172.829,499.385,22.562,456.623,2.282z\"/>\n\t<path d=\"M34.71,461.799l-17.257,16.708c-2.225,2.17-2.934,5.475-1.773,8.363c1.179,2.886,3.985,4.773,7.099,4.773h160.887\n\t\tc-1.364-5.043-0.921-10.445,1.391-15.306l7.919-16.692H40.036C38.036,459.646,36.129,460.419,34.71,461.799z\"/>\n\t<path d=\"M264.766,448.864l-32.615-15.458c-1.046-0.502-2.161-0.744-3.257-0.744c-2.87,0-5.611,1.614-6.901,4.372l-22.001,46.384\n\t\tc-0.871,1.789-0.723,3.895,0.341,5.564c1.046,1.661,2.888,2.661,4.855,2.661h0.046l44.275-0.378\n\t\tc2.206-0.016,4.206-1.299,5.159-3.292l13.724-28.925c0.856-1.838,0.967-3.936,0.29-5.846\n\t\tC268.004,451.292,266.585,449.728,264.766,448.864z\"/>\n\t<path d=\"M348.445,366.038l-112.572-51.392c-8.909-4.067-19.434-0.227-23.63,8.622c-2.551,5.378-3.58,11.353-2.975,17.275\n\t\tl5.2,50.909c0.703,6.882,4.983,12.884,11.261,15.792l60.031,27.797c6.688,3.097,14.548,2.179,20.343-2.375l45.983-36.137\n\t\tc4.931-3.875,7.487-10.041,6.743-16.269C358.086,374.032,354.151,368.642,348.445,366.038z\"/>\n</g>\n</svg>`, I = '<svg fill=\"#000000\" viewBox=\"-6 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><g stroke-width=\"0\"></g><g stroke-linecap=\"round\" stroke-linejoin=\"round\"></g><g><title>text</title><path d=\"M365 432L328 352 172 352 135 432 64 432 227 80 272 80 436 432 365 432ZM201 288L299 288 250 183 201 288Z\"></path></g></svg>';\nvar O = {\n  markerIcon: N,\n  textIcon: I\n};\nconst z = /* @__PURE__ */ p(S), M = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null\n}, Symbol.toStringTag, { value: \"Module\" })), _ = /* @__PURE__ */ p(M), j = $, { markerIcon: F, textIcon: H } = O, { getDefaultColorCache: D, handleCSSVariables: X } = z;\n_.toString();\nclass q {\n  /**\n   * @param {{api: object}}  - Editor.js API\n   */\n  constructor({ config: t, api: e }) {\n    this.api = e, this.config = t, this.clickedOnLeft = !1, this.pluginType = this.config.type || \"text\", this.parentTag = this.pluginType === \"marker\" ? \"MARK\" : \"FONT\", this.hasCustomPicker = this.config.customPicker || !1, this.color = X(\n      D(this.config.defaultColor, this.pluginType)\n    ), this.picker = null, this.icon = null, this.button = null, this.iconClasses = {\n      base: this.api.styles.inlineToolButton,\n      active: this.api.styles.inlineToolButtonActive\n    };\n  }\n  /**\n   * Specifies Tool as Inline Toolbar Tool\n   *\n   * @return {boolean}\n   */\n  static get isInline() {\n    return !0;\n  }\n  /**\n   * Create button element for Toolbar\n   *\n   * @return {HTMLElement}\n   */\n  render() {\n    return this.button = document.createElement(\"button\"), this.button.type = \"button\", this.button.classList.add(\"colorPlugin\"), this.button.classList.add(this.iconClasses.base), this.button.appendChild(this.createLeftButton()), this.button.appendChild(this.createRightButton(this)), this.button;\n  }\n  /**\n   * Create left part button\n   *\n   * @return {HTMLElement}\n   */\n  createLeftButton() {\n    return this.icon || (this.icon = document.createElement(\"div\"), this.icon.id = \"color-left-btn\", this.icon.appendChild(this.createButtonIcon()), this.icon.addEventListener(\"click\", () => this.clickedOnLeft = !0)), this.icon;\n  }\n  /**\n   * Create button icon\n   *\n   * @return {HTMLElement}\n   */\n  createButtonIcon() {\n    const t = document.createElement(\"div\");\n    t.id = \"color-btn-text\";\n    const e = this.pluginType === \"marker\" ? F : H;\n    return t.innerHTML = this.config.icon || e, t;\n  }\n  /**\n   * Create right part button\n   *\n   * @return {HTMLElement}\n   */\n  createRightButton(t) {\n    return this.picker || (this.picker = new j.ColorPlugin({\n      onColorPicked: (e) => {\n        t.color = e;\n        const o = document.getSelection();\n        if (o) {\n          const s = o.getRangeAt(0);\n          this.wrap(s);\n        }\n      },\n      hasCustomPicker: this.hasCustomPicker,\n      defaultColor: this.config.defaultColor,\n      colorCollections: this.config.colorCollections,\n      type: this.pluginType\n    })), this.picker;\n  }\n  /**\n   * handle selected fragment\n   *\n   * @param {Range} range - selected fragment\n   */\n  surround(t) {\n    if (!t)\n      return;\n    const e = this.api.selection.findParentTag(\"SPAN\");\n    e && this.unwrap(e);\n    const o = this.api.selection.findParentTag(this.parentTag);\n    o ? this.unwrap(o) : this.wrap(t), this.clickedOnLeft = !1;\n  }\n  /**\n   * \n   * @param {Range} range \n   */\n  unwrapTagInRange(t, e) {\n    e = e.toUpperCase();\n    const o = t.startContainer, s = t.endContainer;\n    o.nodeType === Node.TEXT_NODE && o.parentNode.tagName === e && t.setStartBefore(o.parentNode), s.nodeType === Node.TEXT_NODE && s.parentNode.tagName === e && t.setEndAfter(s.parentNode);\n    const r = t.extractContents(), a = r.querySelectorAll(e), v = (n) => {\n      for (; n.firstChild; )\n        n.parentNode.insertBefore(n.firstChild, n);\n      n.parentNode.removeChild(n);\n    };\n    a.forEach((n) => v(n)), t.deleteContents(), t.insertNode(r);\n  }\n  /**\n   * Wrap selected fragment\n   *\n   * @param {Range} range - selected fragment\n   */\n  wrap(t) {\n    this.unwrapTagInRange(t, this.parentTag);\n    const e = t.extractContents(), o = document.createElement(this.parentTag);\n    o.appendChild(e), t.insertNode(o), this.pluginType === \"marker\" ? this.wrapMarker(o) : this.wrapTextColor(o), this.api.selection.expandToTag(o);\n  }\n  /**\n   * Wrap selected marker fragment\n   *\n   * @param newWrapper - wrapper for selected fragment\n   */\n  wrapMarker(t) {\n    t.style.backgroundColor = this.color;\n    const e = this.api.selection.findParentTag(\"FONT\");\n    e && (t.style.color = e.style.color);\n  }\n  /**\n   * Wrap selected text color fragment\n   *\n   * @param {Range} newWrapper - wrapper for selected fragment\n   */\n  wrapTextColor(t) {\n    t.style.color = this.color;\n  }\n  /**\n   * Unwrap selected fragment\n   *\n   * @param {Range} termWrapper - parent of selected fragment\n   */\n  unwrap(t) {\n    this.api.selection.expandToTag(t);\n    const e = window.getSelection(), o = e.getRangeAt(0), s = o.extractContents();\n    this.clickedOnLeft ? this.removeWrapper(t) : this.updateWrapper(t), o.insertNode(s), e.removeAllRanges(), e.addRange(o);\n  }\n  /**\n   * update color without create a new tag\n   *\n   * @param {Range} termWrapper - parent of selected fragment\n   */\n  updateWrapper(t) {\n    this.pluginType === \"marker\" ? t.style.backgroundColor = this.color : t.style.color = this.color;\n  }\n  /**\n   * remove wrapper\n   *\n   * @param {Range} termWrapper - parent of selected fragment\n   */\n  removeWrapper(t) {\n    t.parentNode.removeChild(t);\n  }\n  /**\n   * Check and change Term's state for current selection\n   */\n  checkState() {\n    const t = this.api.selection.findParentTag(\"SPAN\"), e = this.api.selection.findParentTag(this.parentTag);\n    let o = t ? this.handleLegacyWrapper(t, e) : e;\n    return this.button.classList.toggle(this.iconClasses.active, !!o), !!o;\n  }\n  /**\n   * handle icon active state for legacy wrappers\n   */\n  handleLegacyWrapper(t, e) {\n    return this.pluginType === \"marker\" ? t : e & t;\n  }\n  /**\n   * Sanitizer rule\n   * @return {{color: {class: string}}}\n   */\n  static get sanitize() {\n    return {\n      font: !0,\n      span: !0,\n      mark: !0\n    };\n  }\n  clear() {\n    this.picker = null, this.icon = null;\n  }\n}\nvar W = q;\nconst J = /* @__PURE__ */ C(W);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/editorjs-text-color-plugin/dist/bundle.mjs\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./Assets/Editor.js/js/index.js");
/******/ 	
/******/ })()
;